
dioda5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004904  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08004a94  08004a94  00014a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c58  08004c58  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004c58  08004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c60  08004c60  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c60  08004c60  00014c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c64  08004c64  00014c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000068  08004cd0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08004cd0  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c41e  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001de0  00000000  00000000  0002c4f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac0  00000000  00000000  0002e2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000082e  00000000  00000000  0002eda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027589  00000000  00000000  0002f5ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d513  00000000  00000000  00056b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efd6b  00000000  00000000  0006406a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032e8  00000000  00000000  00153dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  001570c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a7c 	.word	0x08004a7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004a7c 	.word	0x08004a7c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <led_set_1>:
int number = 0;
int current_minute = 0;
int current_secound = 0;

void led_set_1(int led, bool turn_on)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	460b      	mov	r3, r1
 8000576:	70fb      	strb	r3, [r7, #3]
 GPIO_PinState state = (turn_on) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000578:	78fb      	ldrb	r3, [r7, #3]
 800057a:	73fb      	strb	r3, [r7, #15]
 switch (led) {
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3b01      	subs	r3, #1
 8000580:	2b04      	cmp	r3, #4
 8000582:	d833      	bhi.n	80005ec <led_set_1+0x80>
 8000584:	a201      	add	r2, pc, #4	; (adr r2, 800058c <led_set_1+0x20>)
 8000586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058a:	bf00      	nop
 800058c:	080005a1 	.word	0x080005a1
 8000590:	080005b1 	.word	0x080005b1
 8000594:	080005c1 	.word	0x080005c1
 8000598:	080005cf 	.word	0x080005cf
 800059c:	080005dd 	.word	0x080005dd
 case 1:
 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, state);
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	461a      	mov	r2, r3
 80005a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a8:	4813      	ldr	r0, [pc, #76]	; (80005f8 <led_set_1+0x8c>)
 80005aa:	f000 ff63 	bl	8001474 <HAL_GPIO_WritePin>
 break;
 80005ae:	e01e      	b.n	80005ee <led_set_1+0x82>
 case 2:
 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, state);
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	461a      	mov	r2, r3
 80005b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b8:	4810      	ldr	r0, [pc, #64]	; (80005fc <led_set_1+0x90>)
 80005ba:	f000 ff5b 	bl	8001474 <HAL_GPIO_WritePin>
 break;
 80005be:	e016      	b.n	80005ee <led_set_1+0x82>
 case 3:
 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, state);
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	461a      	mov	r2, r3
 80005c4:	2120      	movs	r1, #32
 80005c6:	480d      	ldr	r0, [pc, #52]	; (80005fc <led_set_1+0x90>)
 80005c8:	f000 ff54 	bl	8001474 <HAL_GPIO_WritePin>
 break;
 80005cc:	e00f      	b.n	80005ee <led_set_1+0x82>
 case 4:
 HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, state);
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	461a      	mov	r2, r3
 80005d2:	2140      	movs	r1, #64	; 0x40
 80005d4:	4809      	ldr	r0, [pc, #36]	; (80005fc <led_set_1+0x90>)
 80005d6:	f000 ff4d 	bl	8001474 <HAL_GPIO_WritePin>
 break;
 80005da:	e008      	b.n	80005ee <led_set_1+0x82>
 case 5:
 HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, state);
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	461a      	mov	r2, r3
 80005e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e4:	4805      	ldr	r0, [pc, #20]	; (80005fc <led_set_1+0x90>)
 80005e6:	f000 ff45 	bl	8001474 <HAL_GPIO_WritePin>
 break;
 80005ea:	e000      	b.n	80005ee <led_set_1+0x82>
 default:
 break;
 80005ec:	bf00      	nop
 }
}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	48000400 	.word	0x48000400
 80005fc:	48000800 	.word	0x48000800

08000600 <__io_putchar>:

int __io_putchar(int ch)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 if (ch == '\n') {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b0a      	cmp	r3, #10
 800060c:	d109      	bne.n	8000622 <__io_putchar+0x22>
 uint8_t ch2 = '\r';
 800060e:	230d      	movs	r3, #13
 8000610:	73fb      	strb	r3, [r7, #15]
 HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8000612:	f107 010f 	add.w	r1, r7, #15
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	2201      	movs	r2, #1
 800061c:	4807      	ldr	r0, [pc, #28]	; (800063c <__io_putchar+0x3c>)
 800061e:	f002 fc47 	bl	8002eb0 <HAL_UART_Transmit>
 }
 HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000622:	1d39      	adds	r1, r7, #4
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	2201      	movs	r2, #1
 800062a:	4804      	ldr	r0, [pc, #16]	; (800063c <__io_putchar+0x3c>)
 800062c:	f002 fc40 	bl	8002eb0 <HAL_UART_Transmit>
 return 1;
 8000630:	2301      	movs	r3, #1
}
 8000632:	4618      	mov	r0, r3
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200000b8 	.word	0x200000b8

08000640 <line_append>:

#define LINE_MAX_LENGTH 80
static char line_buffer[LINE_MAX_LENGTH + 1];
static uint32_t line_length;
void line_append(uint8_t value)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
 if (value == '\r' || value == '\n') {
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b0d      	cmp	r3, #13
 800064e:	d002      	beq.n	8000656 <line_append+0x16>
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	2b0a      	cmp	r3, #10
 8000654:	d119      	bne.n	800068a <line_append+0x4a>
 // odebraliśmy znak końca linii
 if (line_length > 0) {
 8000656:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <line_append+0x74>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d025      	beq.n	80006aa <line_append+0x6a>
 // jeśli bufor nie jest pusty to dodajemy
 // 0 na końcu linii
 line_buffer[line_length] = '\0';
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <line_append+0x74>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a15      	ldr	r2, [pc, #84]	; (80006b8 <line_append+0x78>)
 8000664:	2100      	movs	r1, #0
 8000666:	54d1      	strb	r1, [r2, r3]
 enter_pressed = true;
 8000668:	4b14      	ldr	r3, [pc, #80]	; (80006bc <line_append+0x7c>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
 // przetwarzamy dane

 printf("%s", line_buffer);
 800066e:	4912      	ldr	r1, [pc, #72]	; (80006b8 <line_append+0x78>)
 8000670:	4813      	ldr	r0, [pc, #76]	; (80006c0 <line_append+0x80>)
 8000672:	f003 fb8d 	bl	8003d90 <iprintf>
 received_number = atoi(line_buffer);
 8000676:	4810      	ldr	r0, [pc, #64]	; (80006b8 <line_append+0x78>)
 8000678:	f003 fa37 	bl	8003aea <atoi>
 800067c:	4603      	mov	r3, r0
 800067e:	4a11      	ldr	r2, [pc, #68]	; (80006c4 <line_append+0x84>)
 8000680:	6013      	str	r3, [r2, #0]

 // zaczynamy zbieranie danych od nowa
 line_length = 0;
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <line_append+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 if (line_length > 0) {
 8000688:	e00f      	b.n	80006aa <line_append+0x6a>
 }
 }
 else {
 if (line_length >= LINE_MAX_LENGTH) {
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <line_append+0x74>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b4f      	cmp	r3, #79	; 0x4f
 8000690:	d902      	bls.n	8000698 <line_append+0x58>
 // za dużo danych, usuwamy wszystko co
 // odebraliśmy
 line_length = 0;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <line_append+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 }
 // dopisujemy wartość do bufora
 line_buffer[line_length++] = value;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <line_append+0x74>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	1c5a      	adds	r2, r3, #1
 800069e:	4905      	ldr	r1, [pc, #20]	; (80006b4 <line_append+0x74>)
 80006a0:	600a      	str	r2, [r1, #0]
 80006a2:	4905      	ldr	r1, [pc, #20]	; (80006b8 <line_append+0x78>)
 80006a4:	79fa      	ldrb	r2, [r7, #7]
 80006a6:	54ca      	strb	r2, [r1, r3]
 }
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200001a0 	.word	0x200001a0
 80006b8:	2000014c 	.word	0x2000014c
 80006bc:	2000014a 	.word	0x2000014a
 80006c0:	08004a94 	.word	0x08004a94
 80006c4:	20000140 	.word	0x20000140

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ce:	f000 fba8 	bl	8000e22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d2:	f000 f895 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d6:	f000 f951 	bl	800097c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006da:	f000 f91f 	bl	800091c <MX_USART2_UART_Init>
  MX_RTC_Init();
 80006de:	f000 f8f5 	bl	80008cc <MX_RTC_Init>
  MX_IWDG_Init();
 80006e2:	f000 f8d5 	bl	8000890 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  int i;
  for (i = 0; i < 10; i++){
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	e00a      	b.n	8000702 <main+0x3a>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006ec:	2120      	movs	r1, #32
 80006ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f2:	f000 fed7 	bl	80014a4 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80006f6:	2064      	movs	r0, #100	; 0x64
 80006f8:	f000 fc08 	bl	8000f0c <HAL_Delay>
  for (i = 0; i < 10; i++){
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	3301      	adds	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2b09      	cmp	r3, #9
 8000706:	ddf1      	ble.n	80006ec <main+0x24>
  }
  uint32_t last_ms = HAL_GetTick();
 8000708:	f000 fbf4 	bl	8000ef4 <HAL_GetTick>
 800070c:	60b8      	str	r0, [r7, #8]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Watchdog
	  HAL_IWDG_Refresh(&hiwdg);
 800070e:	4833      	ldr	r0, [pc, #204]	; (80007dc <main+0x114>)
 8000710:	f000 ff31 	bl	8001576 <HAL_IWDG_Refresh>
	  uint32_t now = HAL_GetTick();
 8000714:	f000 fbee 	bl	8000ef4 <HAL_GetTick>
 8000718:	6078      	str	r0, [r7, #4]
	  if(now - last_ms >= 500){
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000724:	d307      	bcc.n	8000736 <main+0x6e>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000726:	2120      	movs	r1, #32
 8000728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072c:	f000 feba 	bl	80014a4 <HAL_GPIO_TogglePin>
		  last_ms = HAL_GetTick();
 8000730:	f000 fbe0 	bl	8000ef4 <HAL_GetTick>
 8000734:	60b8      	str	r0, [r7, #8]




	  uint8_t value;
	  if (HAL_UART_Receive(&huart2, &value, 1, 0) == HAL_OK)
 8000736:	1cf9      	adds	r1, r7, #3
 8000738:	2300      	movs	r3, #0
 800073a:	2201      	movs	r2, #1
 800073c:	4828      	ldr	r0, [pc, #160]	; (80007e0 <main+0x118>)
 800073e:	f002 fc41 	bl	8002fc4 <HAL_UART_Receive>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d103      	bne.n	8000750 <main+0x88>
	  {
	      line_append(value);
 8000748:	78fb      	ldrb	r3, [r7, #3]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff78 	bl	8000640 <line_append>
	  }

	  if(enter_pressed){
 8000750:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <main+0x11c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d0da      	beq.n	800070e <main+0x46>
		  enter_pressed = false;
 8000758:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <main+0x11c>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]

	      printf("\r dioda LED ");
 800075e:	4822      	ldr	r0, [pc, #136]	; (80007e8 <main+0x120>)
 8000760:	f003 fb16 	bl	8003d90 <iprintf>
		  received_number = received_number - 1;
 8000764:	4b21      	ldr	r3, [pc, #132]	; (80007ec <main+0x124>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3b01      	subs	r3, #1
 800076a:	4a20      	ldr	r2, [pc, #128]	; (80007ec <main+0x124>)
 800076c:	6013      	str	r3, [r2, #0]
	      led_states[received_number] = !led_states[received_number];
 800076e:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <main+0x124>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a1f      	ldr	r2, [pc, #124]	; (80007f0 <main+0x128>)
 8000774:	5cd3      	ldrb	r3, [r2, r3]
 8000776:	2b00      	cmp	r3, #0
 8000778:	bf14      	ite	ne
 800077a:	2301      	movne	r3, #1
 800077c:	2300      	moveq	r3, #0
 800077e:	b2db      	uxtb	r3, r3
 8000780:	f083 0301 	eor.w	r3, r3, #1
 8000784:	b2db      	uxtb	r3, r3
 8000786:	461a      	mov	r2, r3
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <main+0x124>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f002 0201 	and.w	r2, r2, #1
 8000790:	b2d1      	uxtb	r1, r2
 8000792:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <main+0x128>)
 8000794:	54d1      	strb	r1, [r2, r3]
	      led_set_1(received_number, led_states[received_number]);
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <main+0x124>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <main+0x124>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4914      	ldr	r1, [pc, #80]	; (80007f0 <main+0x128>)
 80007a0:	5ccb      	ldrb	r3, [r1, r3]
 80007a2:	4619      	mov	r1, r3
 80007a4:	4610      	mov	r0, r2
 80007a6:	f7ff fee1 	bl	800056c <led_set_1>

	      if(led_states[received_number] == false){
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <main+0x124>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <main+0x128>)
 80007b0:	5cd3      	ldrb	r3, [r2, r3]
 80007b2:	f083 0301 	eor.w	r3, r3, #1
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d003      	beq.n	80007c4 <main+0xfc>
	    	  printf("off ");
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <main+0x12c>)
 80007be:	f003 fae7 	bl	8003d90 <iprintf>
 80007c2:	e002      	b.n	80007ca <main+0x102>
	      }else{
	    	  printf("on ");
 80007c4:	480c      	ldr	r0, [pc, #48]	; (80007f8 <main+0x130>)
 80007c6:	f003 fae3 	bl	8003d90 <iprintf>
	      }
	      printf("%d\n",received_number +1);
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <main+0x124>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	3301      	adds	r3, #1
 80007d0:	4619      	mov	r1, r3
 80007d2:	480a      	ldr	r0, [pc, #40]	; (80007fc <main+0x134>)
 80007d4:	f003 fadc 	bl	8003d90 <iprintf>
  {
 80007d8:	e799      	b.n	800070e <main+0x46>
 80007da:	bf00      	nop
 80007dc:	20000084 	.word	0x20000084
 80007e0:	200000b8 	.word	0x200000b8
 80007e4:	2000014a 	.word	0x2000014a
 80007e8:	08004abc 	.word	0x08004abc
 80007ec:	20000140 	.word	0x20000140
 80007f0:	20000144 	.word	0x20000144
 80007f4:	08004acc 	.word	0x08004acc
 80007f8:	08004ad4 	.word	0x08004ad4
 80007fc:	08004ad8 	.word	0x08004ad8

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b096      	sub	sp, #88	; 0x58
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	2244      	movs	r2, #68	; 0x44
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f003 fb13 	bl	8003e3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	463b      	mov	r3, r7
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000822:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000826:	f000 fec5 	bl	80015b4 <HAL_PWREx_ControlVoltageScaling>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000830:	f000 f936 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000834:	2318      	movs	r3, #24
 8000836:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000838:	2301      	movs	r3, #1
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800083c:	2301      	movs	r3, #1
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000844:	2360      	movs	r3, #96	; 0x60
 8000846:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000848:	2300      	movs	r3, #0
 800084a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4618      	mov	r0, r3
 8000852:	f000 ff05 	bl	8001660 <HAL_RCC_OscConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0x60>
  {
    Error_Handler();
 800085c:	f000 f920 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000860:	230f      	movs	r3, #15
 8000862:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f001 facd 	bl	8001e18 <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000884:	f000 f90c 	bl	8000aa0 <Error_Handler>
  }
}
 8000888:	bf00      	nop
 800088a:	3758      	adds	r7, #88	; 0x58
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_IWDG_Init+0x34>)
 8000896:	4a0c      	ldr	r2, [pc, #48]	; (80008c8 <MX_IWDG_Init+0x38>)
 8000898:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <MX_IWDG_Init+0x34>)
 800089c:	2203      	movs	r2, #3
 800089e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_IWDG_Init+0x34>)
 80008a2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80008a6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_IWDG_Init+0x34>)
 80008aa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80008ae:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80008b0:	4804      	ldr	r0, [pc, #16]	; (80008c4 <MX_IWDG_Init+0x34>)
 80008b2:	f000 fe11 	bl	80014d8 <HAL_IWDG_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80008bc:	f000 f8f0 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000084 	.word	0x20000084
 80008c8:	40003000 	.word	0x40003000

080008cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008d0:	4b10      	ldr	r3, [pc, #64]	; (8000914 <MX_RTC_Init+0x48>)
 80008d2:	4a11      	ldr	r2, [pc, #68]	; (8000918 <MX_RTC_Init+0x4c>)
 80008d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_RTC_Init+0x48>)
 80008d8:	2200      	movs	r2, #0
 80008da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008dc:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <MX_RTC_Init+0x48>)
 80008de:	227f      	movs	r2, #127	; 0x7f
 80008e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_RTC_Init+0x48>)
 80008e4:	22ff      	movs	r2, #255	; 0xff
 80008e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <MX_RTC_Init+0x48>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_RTC_Init+0x48>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <MX_RTC_Init+0x48>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_RTC_Init+0x48>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_RTC_Init+0x48>)
 8000902:	f002 f969 	bl	8002bd8 <HAL_RTC_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800090c:	f000 f8c8 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000094 	.word	0x20000094
 8000918:	40002800 	.word	0x40002800

0800091c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_USART2_UART_Init+0x58>)
 8000922:	4a15      	ldr	r2, [pc, #84]	; (8000978 <MX_USART2_UART_Init+0x5c>)
 8000924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_USART2_UART_Init+0x58>)
 8000928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800092c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_USART2_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_USART2_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_USART2_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_USART2_UART_Init+0x58>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_USART2_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_USART2_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_USART2_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_USART2_UART_Init+0x58>)
 8000960:	f002 fa58 	bl	8002e14 <HAL_UART_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800096a:	f000 f899 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200000b8 	.word	0x200000b8
 8000978:	40004400 	.word	0x40004400

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	4b40      	ldr	r3, [pc, #256]	; (8000a94 <MX_GPIO_Init+0x118>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4a3f      	ldr	r2, [pc, #252]	; (8000a94 <MX_GPIO_Init+0x118>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4b3d      	ldr	r3, [pc, #244]	; (8000a94 <MX_GPIO_Init+0x118>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	4b3a      	ldr	r3, [pc, #232]	; (8000a94 <MX_GPIO_Init+0x118>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a39      	ldr	r2, [pc, #228]	; (8000a94 <MX_GPIO_Init+0x118>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b37      	ldr	r3, [pc, #220]	; (8000a94 <MX_GPIO_Init+0x118>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	4b34      	ldr	r3, [pc, #208]	; (8000a94 <MX_GPIO_Init+0x118>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	4a33      	ldr	r2, [pc, #204]	; (8000a94 <MX_GPIO_Init+0x118>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ce:	4b31      	ldr	r3, [pc, #196]	; (8000a94 <MX_GPIO_Init+0x118>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2120      	movs	r1, #32
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f000 fd47 	bl	8001474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED3_Pin|LED4_Pin|LED5_Pin|LED2_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 7158 	mov.w	r1, #864	; 0x360
 80009ec:	482a      	ldr	r0, [pc, #168]	; (8000a98 <MX_GPIO_Init+0x11c>)
 80009ee:	f000 fd41 	bl	8001474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f8:	4828      	ldr	r0, [pc, #160]	; (8000a9c <MX_GPIO_Init+0x120>)
 80009fa:	f000 fd3b 	bl	8001474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80009fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a04:	2300      	movs	r3, #0
 8000a06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	4619      	mov	r1, r3
 8000a12:	4821      	ldr	r0, [pc, #132]	; (8000a98 <MX_GPIO_Init+0x11c>)
 8000a14:	f000 fb84 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a18:	2320      	movs	r3, #32
 8000a1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a32:	f000 fb75 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED5_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED5_Pin|LED2_Pin;
 8000a36:	f44f 7358 	mov.w	r3, #864	; 0x360
 8000a3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4812      	ldr	r0, [pc, #72]	; (8000a98 <MX_GPIO_Init+0x11c>)
 8000a50:	f000 fb66 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_BUTTON2_Pin USER_BUTTON3_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON2_Pin|USER_BUTTON3_Pin;
 8000a54:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	4619      	mov	r1, r3
 8000a68:	480c      	ldr	r0, [pc, #48]	; (8000a9c <MX_GPIO_Init+0x120>)
 8000a6a:	f000 fb59 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	4619      	mov	r1, r3
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_GPIO_Init+0x120>)
 8000a88:	f000 fb4a 	bl	8001120 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3720      	adds	r7, #32
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40021000 	.word	0x40021000
 8000a98:	48000800 	.word	0x48000800
 8000a9c:	48000400 	.word	0x48000400

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_MspInit+0x44>)
 8000ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <HAL_MspInit+0x44>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6613      	str	r3, [r2, #96]	; 0x60
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <HAL_MspInit+0x44>)
 8000ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_MspInit+0x44>)
 8000acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ace:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <HAL_MspInit+0x44>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_MspInit+0x44>)
 8000ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000

08000af4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b0a4      	sub	sp, #144	; 0x90
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000afc:	f107 0308 	add.w	r3, r7, #8
 8000b00:	2288      	movs	r2, #136	; 0x88
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f003 f998 	bl	8003e3a <memset>
  if(hrtc->Instance==RTC)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <HAL_RTC_MspInit+0x5c>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d118      	bne.n	8000b46 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b18:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 fb9a 	bl	8002260 <HAL_RCCEx_PeriphCLKConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000b32:	f7ff ffb5 	bl	8000aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <HAL_RTC_MspInit+0x60>)
 8000b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b3c:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <HAL_RTC_MspInit+0x60>)
 8000b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b46:	bf00      	nop
 8000b48:	3790      	adds	r7, #144	; 0x90
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40002800 	.word	0x40002800
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0ac      	sub	sp, #176	; 0xb0
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2288      	movs	r2, #136	; 0x88
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f003 f95e 	bl	8003e3a <memset>
  if(huart->Instance==USART2)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a21      	ldr	r2, [pc, #132]	; (8000c08 <HAL_UART_MspInit+0xb0>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d13b      	bne.n	8000c00 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4618      	mov	r0, r3
 8000b96:	f001 fb63 	bl	8002260 <HAL_RCCEx_PeriphCLKConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ba0:	f7ff ff7e 	bl	8000aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba4:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <HAL_UART_MspInit+0xb4>)
 8000ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba8:	4a18      	ldr	r2, [pc, #96]	; (8000c0c <HAL_UART_MspInit+0xb4>)
 8000baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bae:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb0:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <HAL_UART_MspInit+0xb4>)
 8000bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <HAL_UART_MspInit+0xb4>)
 8000bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc0:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <HAL_UART_MspInit+0xb4>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc8:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <HAL_UART_MspInit+0xb4>)
 8000bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bd4:	230c      	movs	r3, #12
 8000bd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bec:	2307      	movs	r3, #7
 8000bee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfc:	f000 fa90 	bl	8001120 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c00:	bf00      	nop
 8000c02:	37b0      	adds	r7, #176	; 0xb0
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40004400 	.word	0x40004400
 8000c0c:	40021000 	.word	0x40021000

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c14:	e7fe      	b.n	8000c14 <NMI_Handler+0x4>

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <MemManage_Handler+0x4>

08000c22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5c:	f000 f936 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	e00a      	b.n	8000c8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c76:	f3af 8000 	nop.w
 8000c7a:	4601      	mov	r1, r0
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	1c5a      	adds	r2, r3, #1
 8000c80:	60ba      	str	r2, [r7, #8]
 8000c82:	b2ca      	uxtb	r2, r1
 8000c84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	dbf0      	blt.n	8000c76 <_read+0x12>
  }

  return len;
 8000c94:	687b      	ldr	r3, [r7, #4]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	60f8      	str	r0, [r7, #12]
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	e009      	b.n	8000cc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	1c5a      	adds	r2, r3, #1
 8000cb4:	60ba      	str	r2, [r7, #8]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fca1 	bl	8000600 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	dbf1      	blt.n	8000cb0 <_write+0x12>
  }
  return len;
 8000ccc:	687b      	ldr	r3, [r7, #4]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <_close>:

int _close(int file)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cfe:	605a      	str	r2, [r3, #4]
  return 0;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <_isatty>:

int _isatty(int file)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d48:	4a14      	ldr	r2, [pc, #80]	; (8000d9c <_sbrk+0x5c>)
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <_sbrk+0x60>)
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d102      	bne.n	8000d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <_sbrk+0x64>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <_sbrk+0x68>)
 8000d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d207      	bcs.n	8000d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d70:	f003 f8b2 	bl	8003ed8 <__errno>
 8000d74:	4603      	mov	r3, r0
 8000d76:	220c      	movs	r2, #12
 8000d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7e:	e009      	b.n	8000d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <_sbrk+0x64>)
 8000d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d92:	68fb      	ldr	r3, [r7, #12]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20018000 	.word	0x20018000
 8000da0:	00000400 	.word	0x00000400
 8000da4:	200001a4 	.word	0x200001a4
 8000da8:	200002f8 	.word	0x200002f8

08000dac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <SystemInit+0x20>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <SystemInit+0x20>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* Set stack pointer */
 8000dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dd4:	f7ff ffea 	bl	8000dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd8:	480c      	ldr	r0, [pc, #48]	; (8000e0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dda:	490d      	ldr	r1, [pc, #52]	; (8000e10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <LoopForever+0xe>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de0:	e002      	b.n	8000de8 <LoopCopyDataInit>

08000de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de6:	3304      	adds	r3, #4

08000de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dec:	d3f9      	bcc.n	8000de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000df0:	4c0a      	ldr	r4, [pc, #40]	; (8000e1c <LoopForever+0x16>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df4:	e001      	b.n	8000dfa <LoopFillZerobss>

08000df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df8:	3204      	adds	r2, #4

08000dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dfc:	d3fb      	bcc.n	8000df6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f003 f871 	bl	8003ee4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e02:	f7ff fc61 	bl	80006c8 <main>

08000e06 <LoopForever>:

LoopForever:
    b LoopForever
 8000e06:	e7fe      	b.n	8000e06 <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* Set stack pointer */
 8000e08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e14:	08004c68 	.word	0x08004c68
  ldr r2, =_sbss
 8000e18:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e1c:	200002f8 	.word	0x200002f8

08000e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC1_2_IRQHandler>

08000e22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	f000 f943 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e32:	200f      	movs	r0, #15
 8000e34:	f000 f80e 	bl	8000e54 <HAL_InitTick>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d002      	beq.n	8000e44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	71fb      	strb	r3, [r7, #7]
 8000e42:	e001      	b.n	8000e48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e44:	f7ff fe32 	bl	8000aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e48:	79fb      	ldrb	r3, [r7, #7]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_InitTick+0x6c>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d023      	beq.n	8000eb0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <HAL_InitTick+0x70>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_InitTick+0x6c>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f941 	bl	8001106 <HAL_SYSTICK_Config>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d10f      	bne.n	8000eaa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b0f      	cmp	r3, #15
 8000e8e:	d809      	bhi.n	8000ea4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e90:	2200      	movs	r2, #0
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f000 f919 	bl	80010ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <HAL_InitTick+0x74>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	e007      	b.n	8000eb4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	73fb      	strb	r3, [r7, #15]
 8000ea8:	e004      	b.n	8000eb4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	73fb      	strb	r3, [r7, #15]
 8000eae:	e001      	b.n	8000eb4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000004 	.word	0x20000004

08000ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x20>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	200001a8 	.word	0x200001a8

08000ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <HAL_GetTick+0x14>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	200001a8 	.word	0x200001a8

08000f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff ffee 	bl	8000ef4 <HAL_GetTick>
 8000f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f24:	d005      	beq.n	8000f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_Delay+0x44>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f32:	bf00      	nop
 8000f34:	f7ff ffde 	bl	8000ef4 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8f7      	bhi.n	8000f34 <HAL_Delay+0x28>
  {
  }
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008

08000f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f86:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	f003 0307 	and.w	r3, r3, #7
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db0a      	blt.n	8000fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	; (8001004 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe0:	e00a      	b.n	8000ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4908      	ldr	r1, [pc, #32]	; (8001008 <__NVIC_SetPriority+0x50>)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	761a      	strb	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000e100 	.word	0xe000e100
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	; 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f7ff ff8e 	bl	8000fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff47 	bl	8000f54 <__NVIC_SetPriorityGrouping>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010e0:	f7ff ff5c 	bl	8000f9c <__NVIC_GetPriorityGrouping>
 80010e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f7ff ff8e 	bl	800100c <NVIC_EncodePriority>
 80010f0:	4602      	mov	r2, r0
 80010f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff5d 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ffb0 	bl	8001074 <SysTick_Config>
 8001114:	4603      	mov	r3, r0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b480      	push	{r7}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112e:	e17f      	b.n	8001430 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	2101      	movs	r1, #1
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 8171 	beq.w	800142a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b01      	cmp	r3, #1
 8001152:	d005      	beq.n	8001160 <HAL_GPIO_Init+0x40>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d130      	bne.n	80011c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001196:	2201      	movs	r2, #1
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	091b      	lsrs	r3, r3, #4
 80011ac:	f003 0201 	and.w	r2, r3, #1
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d118      	bne.n	8001200 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011d4:	2201      	movs	r2, #1
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	08db      	lsrs	r3, r3, #3
 80011ea:	f003 0201 	and.w	r2, r3, #1
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b03      	cmp	r3, #3
 800120a:	d017      	beq.n	800123c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	2203      	movs	r2, #3
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d123      	bne.n	8001290 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	08da      	lsrs	r2, r3, #3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3208      	adds	r2, #8
 8001250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001254:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	220f      	movs	r2, #15
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	08da      	lsrs	r2, r3, #3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3208      	adds	r2, #8
 800128a:	6939      	ldr	r1, [r7, #16]
 800128c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0203 	and.w	r2, r3, #3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 80ac 	beq.w	800142a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	4b5f      	ldr	r3, [pc, #380]	; (8001450 <HAL_GPIO_Init+0x330>)
 80012d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d6:	4a5e      	ldr	r2, [pc, #376]	; (8001450 <HAL_GPIO_Init+0x330>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6613      	str	r3, [r2, #96]	; 0x60
 80012de:	4b5c      	ldr	r3, [pc, #368]	; (8001450 <HAL_GPIO_Init+0x330>)
 80012e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012ea:	4a5a      	ldr	r2, [pc, #360]	; (8001454 <HAL_GPIO_Init+0x334>)
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	3302      	adds	r3, #2
 80012f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	220f      	movs	r2, #15
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001314:	d025      	beq.n	8001362 <HAL_GPIO_Init+0x242>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4f      	ldr	r2, [pc, #316]	; (8001458 <HAL_GPIO_Init+0x338>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d01f      	beq.n	800135e <HAL_GPIO_Init+0x23e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4e      	ldr	r2, [pc, #312]	; (800145c <HAL_GPIO_Init+0x33c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d019      	beq.n	800135a <HAL_GPIO_Init+0x23a>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4d      	ldr	r2, [pc, #308]	; (8001460 <HAL_GPIO_Init+0x340>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d013      	beq.n	8001356 <HAL_GPIO_Init+0x236>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4c      	ldr	r2, [pc, #304]	; (8001464 <HAL_GPIO_Init+0x344>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d00d      	beq.n	8001352 <HAL_GPIO_Init+0x232>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4b      	ldr	r2, [pc, #300]	; (8001468 <HAL_GPIO_Init+0x348>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d007      	beq.n	800134e <HAL_GPIO_Init+0x22e>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4a      	ldr	r2, [pc, #296]	; (800146c <HAL_GPIO_Init+0x34c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d101      	bne.n	800134a <HAL_GPIO_Init+0x22a>
 8001346:	2306      	movs	r3, #6
 8001348:	e00c      	b.n	8001364 <HAL_GPIO_Init+0x244>
 800134a:	2307      	movs	r3, #7
 800134c:	e00a      	b.n	8001364 <HAL_GPIO_Init+0x244>
 800134e:	2305      	movs	r3, #5
 8001350:	e008      	b.n	8001364 <HAL_GPIO_Init+0x244>
 8001352:	2304      	movs	r3, #4
 8001354:	e006      	b.n	8001364 <HAL_GPIO_Init+0x244>
 8001356:	2303      	movs	r3, #3
 8001358:	e004      	b.n	8001364 <HAL_GPIO_Init+0x244>
 800135a:	2302      	movs	r3, #2
 800135c:	e002      	b.n	8001364 <HAL_GPIO_Init+0x244>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <HAL_GPIO_Init+0x244>
 8001362:	2300      	movs	r3, #0
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	f002 0203 	and.w	r2, r2, #3
 800136a:	0092      	lsls	r2, r2, #2
 800136c:	4093      	lsls	r3, r2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001374:	4937      	ldr	r1, [pc, #220]	; (8001454 <HAL_GPIO_Init+0x334>)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001382:	4b3b      	ldr	r3, [pc, #236]	; (8001470 <HAL_GPIO_Init+0x350>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013a6:	4a32      	ldr	r2, [pc, #200]	; (8001470 <HAL_GPIO_Init+0x350>)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013ac:	4b30      	ldr	r3, [pc, #192]	; (8001470 <HAL_GPIO_Init+0x350>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013d0:	4a27      	ldr	r2, [pc, #156]	; (8001470 <HAL_GPIO_Init+0x350>)
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <HAL_GPIO_Init+0x350>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	43db      	mvns	r3, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013fa:	4a1d      	ldr	r2, [pc, #116]	; (8001470 <HAL_GPIO_Init+0x350>)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <HAL_GPIO_Init+0x350>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	43db      	mvns	r3, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001424:	4a12      	ldr	r2, [pc, #72]	; (8001470 <HAL_GPIO_Init+0x350>)
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	3301      	adds	r3, #1
 800142e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa22 f303 	lsr.w	r3, r2, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	f47f ae78 	bne.w	8001130 <HAL_GPIO_Init+0x10>
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	371c      	adds	r7, #28
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000
 8001454:	40010000 	.word	0x40010000
 8001458:	48000400 	.word	0x48000400
 800145c:	48000800 	.word	0x48000800
 8001460:	48000c00 	.word	0x48000c00
 8001464:	48001000 	.word	0x48001000
 8001468:	48001400 	.word	0x48001400
 800146c:	48001800 	.word	0x48001800
 8001470:	40010400 	.word	0x40010400

08001474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]
 8001480:	4613      	mov	r3, r2
 8001482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001484:	787b      	ldrb	r3, [r7, #1]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800148a:	887a      	ldrh	r2, [r7, #2]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001490:	e002      	b.n	8001498 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001492:	887a      	ldrh	r2, [r7, #2]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014b6:	887a      	ldrh	r2, [r7, #2]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4013      	ands	r3, r2
 80014bc:	041a      	lsls	r2, r3, #16
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	43d9      	mvns	r1, r3
 80014c2:	887b      	ldrh	r3, [r7, #2]
 80014c4:	400b      	ands	r3, r1
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	619a      	str	r2, [r3, #24]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e041      	b.n	800156e <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80014f2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f245 5255 	movw	r2, #21845	; 0x5555
 80014fc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	6852      	ldr	r2, [r2, #4]
 8001506:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6892      	ldr	r2, [r2, #8]
 8001510:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001512:	f7ff fcef 	bl	8000ef4 <HAL_GetTick>
 8001516:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001518:	e00f      	b.n	800153a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800151a:	f7ff fceb 	bl	8000ef4 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b31      	cmp	r3, #49	; 0x31
 8001526:	d908      	bls.n	800153a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e019      	b.n	800156e <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1e8      	bne.n	800151a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	691a      	ldr	r2, [r3, #16]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	429a      	cmp	r2, r3
 8001554:	d005      	beq.n	8001562 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68d2      	ldr	r2, [r2, #12]
 800155e:	611a      	str	r2, [r3, #16]
 8001560:	e004      	b.n	800156c <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800156a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001586:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40007000 	.word	0x40007000

080015b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015c2:	d130      	bne.n	8001626 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015c4:	4b23      	ldr	r3, [pc, #140]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015d0:	d038      	beq.n	8001644 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015da:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015e2:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2232      	movs	r2, #50	; 0x32
 80015e8:	fb02 f303 	mul.w	r3, r2, r3
 80015ec:	4a1b      	ldr	r2, [pc, #108]	; (800165c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	0c9b      	lsrs	r3, r3, #18
 80015f4:	3301      	adds	r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015f8:	e002      	b.n	8001600 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800160c:	d102      	bne.n	8001614 <HAL_PWREx_ControlVoltageScaling+0x60>
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f2      	bne.n	80015fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001620:	d110      	bne.n	8001644 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e00f      	b.n	8001646 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800162e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001632:	d007      	beq.n	8001644 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800163c:	4a05      	ldr	r2, [pc, #20]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800163e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001642:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40007000 	.word	0x40007000
 8001658:	20000000 	.word	0x20000000
 800165c:	431bde83 	.word	0x431bde83

08001660 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e3ca      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001672:	4b97      	ldr	r3, [pc, #604]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800167c:	4b94      	ldr	r3, [pc, #592]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 80e4 	beq.w	800185c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d007      	beq.n	80016aa <HAL_RCC_OscConfig+0x4a>
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	2b0c      	cmp	r3, #12
 800169e:	f040 808b 	bne.w	80017b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	f040 8087 	bne.w	80017b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016aa:	4b89      	ldr	r3, [pc, #548]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d005      	beq.n	80016c2 <HAL_RCC_OscConfig+0x62>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e3a2      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1a      	ldr	r2, [r3, #32]
 80016c6:	4b82      	ldr	r3, [pc, #520]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d004      	beq.n	80016dc <HAL_RCC_OscConfig+0x7c>
 80016d2:	4b7f      	ldr	r3, [pc, #508]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016da:	e005      	b.n	80016e8 <HAL_RCC_OscConfig+0x88>
 80016dc:	4b7c      	ldr	r3, [pc, #496]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80016de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d223      	bcs.n	8001734 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 fd55 	bl	80021a0 <RCC_SetFlashLatencyFromMSIRange>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e383      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001700:	4b73      	ldr	r3, [pc, #460]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a72      	ldr	r2, [pc, #456]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001706:	f043 0308 	orr.w	r3, r3, #8
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b70      	ldr	r3, [pc, #448]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	496d      	ldr	r1, [pc, #436]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800171e:	4b6c      	ldr	r3, [pc, #432]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	4968      	ldr	r1, [pc, #416]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 800172e:	4313      	orrs	r3, r2
 8001730:	604b      	str	r3, [r1, #4]
 8001732:	e025      	b.n	8001780 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001734:	4b66      	ldr	r3, [pc, #408]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a65      	ldr	r2, [pc, #404]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 800173a:	f043 0308 	orr.w	r3, r3, #8
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b63      	ldr	r3, [pc, #396]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4960      	ldr	r1, [pc, #384]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 800174e:	4313      	orrs	r3, r2
 8001750:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001752:	4b5f      	ldr	r3, [pc, #380]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	495b      	ldr	r1, [pc, #364]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001762:	4313      	orrs	r3, r2
 8001764:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d109      	bne.n	8001780 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	4618      	mov	r0, r3
 8001772:	f000 fd15 	bl	80021a0 <RCC_SetFlashLatencyFromMSIRange>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e343      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001780:	f000 fc4a 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8001784:	4602      	mov	r2, r0
 8001786:	4b52      	ldr	r3, [pc, #328]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	f003 030f 	and.w	r3, r3, #15
 8001790:	4950      	ldr	r1, [pc, #320]	; (80018d4 <HAL_RCC_OscConfig+0x274>)
 8001792:	5ccb      	ldrb	r3, [r1, r3]
 8001794:	f003 031f 	and.w	r3, r3, #31
 8001798:	fa22 f303 	lsr.w	r3, r2, r3
 800179c:	4a4e      	ldr	r2, [pc, #312]	; (80018d8 <HAL_RCC_OscConfig+0x278>)
 800179e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017a0:	4b4e      	ldr	r3, [pc, #312]	; (80018dc <HAL_RCC_OscConfig+0x27c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fb55 	bl	8000e54 <HAL_InitTick>
 80017aa:	4603      	mov	r3, r0
 80017ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d052      	beq.n	800185a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	e327      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d032      	beq.n	8001826 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017c0:	4b43      	ldr	r3, [pc, #268]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a42      	ldr	r2, [pc, #264]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017cc:	f7ff fb92 	bl	8000ef4 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017d4:	f7ff fb8e 	bl	8000ef4 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e310      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017e6:	4b3a      	ldr	r3, [pc, #232]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017f2:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a36      	ldr	r2, [pc, #216]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	4b34      	ldr	r3, [pc, #208]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	4931      	ldr	r1, [pc, #196]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 800180c:	4313      	orrs	r3, r2
 800180e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001810:	4b2f      	ldr	r3, [pc, #188]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	492c      	ldr	r1, [pc, #176]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
 8001824:	e01a      	b.n	800185c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001826:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a29      	ldr	r2, [pc, #164]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001832:	f7ff fb5f 	bl	8000ef4 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800183a:	f7ff fb5b 	bl	8000ef4 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e2dd      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800184c:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f0      	bne.n	800183a <HAL_RCC_OscConfig+0x1da>
 8001858:	e000      	b.n	800185c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800185a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d074      	beq.n	8001952 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	2b08      	cmp	r3, #8
 800186c:	d005      	beq.n	800187a <HAL_RCC_OscConfig+0x21a>
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	2b0c      	cmp	r3, #12
 8001872:	d10e      	bne.n	8001892 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2b03      	cmp	r3, #3
 8001878:	d10b      	bne.n	8001892 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d064      	beq.n	8001950 <HAL_RCC_OscConfig+0x2f0>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d160      	bne.n	8001950 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e2ba      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800189a:	d106      	bne.n	80018aa <HAL_RCC_OscConfig+0x24a>
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0b      	ldr	r2, [pc, #44]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80018a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	e026      	b.n	80018f8 <HAL_RCC_OscConfig+0x298>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b2:	d115      	bne.n	80018e0 <HAL_RCC_OscConfig+0x280>
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80018ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a02      	ldr	r2, [pc, #8]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80018c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	e014      	b.n	80018f8 <HAL_RCC_OscConfig+0x298>
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000
 80018d4:	08004adc 	.word	0x08004adc
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000004 	.word	0x20000004
 80018e0:	4ba0      	ldr	r3, [pc, #640]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a9f      	ldr	r2, [pc, #636]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 80018e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b9d      	ldr	r3, [pc, #628]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a9c      	ldr	r2, [pc, #624]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 80018f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d013      	beq.n	8001928 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff faf8 	bl	8000ef4 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff faf4 	bl	8000ef4 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	; 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e276      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800191a:	4b92      	ldr	r3, [pc, #584]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x2a8>
 8001926:	e014      	b.n	8001952 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff fae4 	bl	8000ef4 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001930:	f7ff fae0 	bl	8000ef4 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	; 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e262      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001942:	4b88      	ldr	r3, [pc, #544]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x2d0>
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d060      	beq.n	8001a20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2b04      	cmp	r3, #4
 8001962:	d005      	beq.n	8001970 <HAL_RCC_OscConfig+0x310>
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2b0c      	cmp	r3, #12
 8001968:	d119      	bne.n	800199e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d116      	bne.n	800199e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001970:	4b7c      	ldr	r3, [pc, #496]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_OscConfig+0x328>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e23f      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001988:	4b76      	ldr	r3, [pc, #472]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	061b      	lsls	r3, r3, #24
 8001996:	4973      	ldr	r1, [pc, #460]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800199c:	e040      	b.n	8001a20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d023      	beq.n	80019ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a6:	4b6f      	ldr	r3, [pc, #444]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a6e      	ldr	r2, [pc, #440]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 80019ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b2:	f7ff fa9f 	bl	8000ef4 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ba:	f7ff fa9b 	bl	8000ef4 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e21d      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019cc:	4b65      	ldr	r3, [pc, #404]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d8:	4b62      	ldr	r3, [pc, #392]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	061b      	lsls	r3, r3, #24
 80019e6:	495f      	ldr	r1, [pc, #380]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
 80019ec:	e018      	b.n	8001a20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ee:	4b5d      	ldr	r3, [pc, #372]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a5c      	ldr	r2, [pc, #368]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 80019f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fa:	f7ff fa7b 	bl	8000ef4 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a02:	f7ff fa77 	bl	8000ef4 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e1f9      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a14:	4b53      	ldr	r3, [pc, #332]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1f0      	bne.n	8001a02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d03c      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d01c      	beq.n	8001a6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a34:	4b4b      	ldr	r3, [pc, #300]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a3a:	4a4a      	ldr	r2, [pc, #296]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a44:	f7ff fa56 	bl	8000ef4 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7ff fa52 	bl	8000ef4 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e1d4      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a5e:	4b41      	ldr	r3, [pc, #260]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0ef      	beq.n	8001a4c <HAL_RCC_OscConfig+0x3ec>
 8001a6c:	e01b      	b.n	8001aa6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a6e:	4b3d      	ldr	r3, [pc, #244]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a74:	4a3b      	ldr	r2, [pc, #236]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7e:	f7ff fa39 	bl	8000ef4 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a86:	f7ff fa35 	bl	8000ef4 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e1b7      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a98:	4b32      	ldr	r3, [pc, #200]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1ef      	bne.n	8001a86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80a6 	beq.w	8001c00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ab8:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10d      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac4:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac8:	4a26      	ldr	r2, [pc, #152]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ace:	6593      	str	r3, [r2, #88]	; 0x58
 8001ad0:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001adc:	2301      	movs	r3, #1
 8001ade:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae0:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <HAL_RCC_OscConfig+0x508>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d118      	bne.n	8001b1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aec:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <HAL_RCC_OscConfig+0x508>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a1d      	ldr	r2, [pc, #116]	; (8001b68 <HAL_RCC_OscConfig+0x508>)
 8001af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af8:	f7ff f9fc 	bl	8000ef4 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b00:	f7ff f9f8 	bl	8000ef4 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e17a      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_RCC_OscConfig+0x508>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d108      	bne.n	8001b38 <HAL_RCC_OscConfig+0x4d8>
 8001b26:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b36:	e029      	b.n	8001b8c <HAL_RCC_OscConfig+0x52c>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	d115      	bne.n	8001b6c <HAL_RCC_OscConfig+0x50c>
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b46:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b56:	4a03      	ldr	r2, [pc, #12]	; (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b60:	e014      	b.n	8001b8c <HAL_RCC_OscConfig+0x52c>
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40007000 	.word	0x40007000
 8001b6c:	4b9c      	ldr	r3, [pc, #624]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b72:	4a9b      	ldr	r2, [pc, #620]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b7c:	4b98      	ldr	r3, [pc, #608]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b82:	4a97      	ldr	r2, [pc, #604]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001b84:	f023 0304 	bic.w	r3, r3, #4
 8001b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d016      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b94:	f7ff f9ae 	bl	8000ef4 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9c:	f7ff f9aa 	bl	8000ef4 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e12a      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bb2:	4b8b      	ldr	r3, [pc, #556]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0ed      	beq.n	8001b9c <HAL_RCC_OscConfig+0x53c>
 8001bc0:	e015      	b.n	8001bee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc2:	f7ff f997 	bl	8000ef4 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f7ff f993 	bl	8000ef4 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e113      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001be0:	4b7f      	ldr	r3, [pc, #508]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1ed      	bne.n	8001bca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bee:	7ffb      	ldrb	r3, [r7, #31]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d105      	bne.n	8001c00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf4:	4b7a      	ldr	r3, [pc, #488]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf8:	4a79      	ldr	r2, [pc, #484]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 80fe 	beq.w	8001e06 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	f040 80d0 	bne.w	8001db4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c14:	4b72      	ldr	r3, [pc, #456]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f003 0203 	and.w	r2, r3, #3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d130      	bne.n	8001c8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	3b01      	subs	r3, #1
 8001c34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d127      	bne.n	8001c8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c44:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d11f      	bne.n	8001c8a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c54:	2a07      	cmp	r2, #7
 8001c56:	bf14      	ite	ne
 8001c58:	2201      	movne	r2, #1
 8001c5a:	2200      	moveq	r2, #0
 8001c5c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d113      	bne.n	8001c8a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6c:	085b      	lsrs	r3, r3, #1
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d109      	bne.n	8001c8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	085b      	lsrs	r3, r3, #1
 8001c82:	3b01      	subs	r3, #1
 8001c84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d06e      	beq.n	8001d68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	2b0c      	cmp	r3, #12
 8001c8e:	d069      	beq.n	8001d64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c90:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d105      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c9c:	4b50      	ldr	r3, [pc, #320]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0ad      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cac:	4b4c      	ldr	r3, [pc, #304]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a4b      	ldr	r2, [pc, #300]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cb6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cb8:	f7ff f91c 	bl	8000ef4 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7ff f918 	bl	8000ef4 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e09a      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd2:	4b43      	ldr	r3, [pc, #268]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cde:	4b40      	ldr	r3, [pc, #256]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	4b40      	ldr	r3, [pc, #256]	; (8001de4 <HAL_RCC_OscConfig+0x784>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cee:	3a01      	subs	r2, #1
 8001cf0:	0112      	lsls	r2, r2, #4
 8001cf2:	4311      	orrs	r1, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cf8:	0212      	lsls	r2, r2, #8
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d00:	0852      	lsrs	r2, r2, #1
 8001d02:	3a01      	subs	r2, #1
 8001d04:	0552      	lsls	r2, r2, #21
 8001d06:	4311      	orrs	r1, r2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d0c:	0852      	lsrs	r2, r2, #1
 8001d0e:	3a01      	subs	r2, #1
 8001d10:	0652      	lsls	r2, r2, #25
 8001d12:	4311      	orrs	r1, r2
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d18:	0912      	lsrs	r2, r2, #4
 8001d1a:	0452      	lsls	r2, r2, #17
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	4930      	ldr	r1, [pc, #192]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d24:	4b2e      	ldr	r3, [pc, #184]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a2d      	ldr	r2, [pc, #180]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001d2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d30:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4a2a      	ldr	r2, [pc, #168]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d3c:	f7ff f8da 	bl	8000ef4 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d44:	f7ff f8d6 	bl	8000ef4 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e058      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d56:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d62:	e050      	b.n	8001e06 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e04f      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d148      	bne.n	8001e06 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d74:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d80:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	4a16      	ldr	r2, [pc, #88]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d8c:	f7ff f8b2 	bl	8000ef4 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d94:	f7ff f8ae 	bl	8000ef4 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e030      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0x734>
 8001db2:	e028      	b.n	8001e06 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	2b0c      	cmp	r3, #12
 8001db8:	d023      	beq.n	8001e02 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a08      	ldr	r2, [pc, #32]	; (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001dc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc6:	f7ff f895 	bl	8000ef4 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dcc:	e00c      	b.n	8001de8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dce:	f7ff f891 	bl	8000ef4 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d905      	bls.n	8001de8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e013      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
 8001de0:	40021000 	.word	0x40021000
 8001de4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_RCC_OscConfig+0x7b0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1ec      	bne.n	8001dce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_RCC_OscConfig+0x7b0>)
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	4905      	ldr	r1, [pc, #20]	; (8001e10 <HAL_RCC_OscConfig+0x7b0>)
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_RCC_OscConfig+0x7b4>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60cb      	str	r3, [r1, #12]
 8001e00:	e001      	b.n	8001e06 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3720      	adds	r7, #32
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000
 8001e14:	feeefffc 	.word	0xfeeefffc

08001e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0e7      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e2c:	4b75      	ldr	r3, [pc, #468]	; (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d910      	bls.n	8001e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3a:	4b72      	ldr	r3, [pc, #456]	; (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 0207 	bic.w	r2, r3, #7
 8001e42:	4970      	ldr	r1, [pc, #448]	; (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4a:	4b6e      	ldr	r3, [pc, #440]	; (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0cf      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d010      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	4b66      	ldr	r3, [pc, #408]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d908      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e78:	4b63      	ldr	r3, [pc, #396]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	4960      	ldr	r1, [pc, #384]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d04c      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d107      	bne.n	8001eae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9e:	4b5a      	ldr	r3, [pc, #360]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d121      	bne.n	8001eee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e0a6      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d107      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eb6:	4b54      	ldr	r3, [pc, #336]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d115      	bne.n	8001eee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e09a      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d107      	bne.n	8001ede <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ece:	4b4e      	ldr	r3, [pc, #312]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e08e      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ede:	4b4a      	ldr	r3, [pc, #296]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e086      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eee:	4b46      	ldr	r3, [pc, #280]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f023 0203 	bic.w	r2, r3, #3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	4943      	ldr	r1, [pc, #268]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f00:	f7fe fff8 	bl	8000ef4 <HAL_GetTick>
 8001f04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f06:	e00a      	b.n	8001f1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f08:	f7fe fff4 	bl	8000ef4 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e06e      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1e:	4b3a      	ldr	r3, [pc, #232]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 020c 	and.w	r2, r3, #12
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d1eb      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d010      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	4b31      	ldr	r3, [pc, #196]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d208      	bcs.n	8001f5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f4c:	4b2e      	ldr	r3, [pc, #184]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	492b      	ldr	r1, [pc, #172]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f5e:	4b29      	ldr	r3, [pc, #164]	; (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d210      	bcs.n	8001f8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6c:	4b25      	ldr	r3, [pc, #148]	; (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f023 0207 	bic.w	r2, r3, #7
 8001f74:	4923      	ldr	r1, [pc, #140]	; (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7c:	4b21      	ldr	r3, [pc, #132]	; (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d001      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e036      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d008      	beq.n	8001fac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	4918      	ldr	r1, [pc, #96]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d009      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4910      	ldr	r1, [pc, #64]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fcc:	f000 f824 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	091b      	lsrs	r3, r3, #4
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	490b      	ldr	r1, [pc, #44]	; (800200c <HAL_RCC_ClockConfig+0x1f4>)
 8001fde:	5ccb      	ldrb	r3, [r1, r3]
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe8:	4a09      	ldr	r2, [pc, #36]	; (8002010 <HAL_RCC_ClockConfig+0x1f8>)
 8001fea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_RCC_ClockConfig+0x1fc>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe ff2f 	bl	8000e54 <HAL_InitTick>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ffa:	7afb      	ldrb	r3, [r7, #11]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40022000 	.word	0x40022000
 8002008:	40021000 	.word	0x40021000
 800200c:	08004adc 	.word	0x08004adc
 8002010:	20000000 	.word	0x20000000
 8002014:	20000004 	.word	0x20000004

08002018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002018:	b480      	push	{r7}
 800201a:	b089      	sub	sp, #36	; 0x24
 800201c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002026:	4b3e      	ldr	r3, [pc, #248]	; (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002030:	4b3b      	ldr	r3, [pc, #236]	; (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0x34>
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	2b0c      	cmp	r3, #12
 8002044:	d121      	bne.n	800208a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d11e      	bne.n	800208a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800204c:	4b34      	ldr	r3, [pc, #208]	; (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b00      	cmp	r3, #0
 8002056:	d107      	bne.n	8002068 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002058:	4b31      	ldr	r3, [pc, #196]	; (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 800205a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	e005      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002068:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002074:	4a2b      	ldr	r2, [pc, #172]	; (8002124 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10d      	bne.n	80020a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002088:	e00a      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	2b04      	cmp	r3, #4
 800208e:	d102      	bne.n	8002096 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002090:	4b25      	ldr	r3, [pc, #148]	; (8002128 <HAL_RCC_GetSysClockFreq+0x110>)
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	e004      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2b08      	cmp	r3, #8
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800209c:	4b23      	ldr	r3, [pc, #140]	; (800212c <HAL_RCC_GetSysClockFreq+0x114>)
 800209e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	2b0c      	cmp	r3, #12
 80020a4:	d134      	bne.n	8002110 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020a6:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d003      	beq.n	80020be <HAL_RCC_GetSysClockFreq+0xa6>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d003      	beq.n	80020c4 <HAL_RCC_GetSysClockFreq+0xac>
 80020bc:	e005      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <HAL_RCC_GetSysClockFreq+0x110>)
 80020c0:	617b      	str	r3, [r7, #20]
      break;
 80020c2:	e005      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <HAL_RCC_GetSysClockFreq+0x114>)
 80020c6:	617b      	str	r3, [r7, #20]
      break;
 80020c8:	e002      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	617b      	str	r3, [r7, #20]
      break;
 80020ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	3301      	adds	r3, #1
 80020dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	0a1b      	lsrs	r3, r3, #8
 80020e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	fb03 f202 	mul.w	r2, r3, r2
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020f6:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	0e5b      	lsrs	r3, r3, #25
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	3301      	adds	r3, #1
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	fbb2 f3f3 	udiv	r3, r2, r3
 800210e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002110:	69bb      	ldr	r3, [r7, #24]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3724      	adds	r7, #36	; 0x24
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	08004af4 	.word	0x08004af4
 8002128:	00f42400 	.word	0x00f42400
 800212c:	007a1200 	.word	0x007a1200

08002130 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <HAL_RCC_GetHCLKFreq+0x14>)
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000000 	.word	0x20000000

08002148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800214c:	f7ff fff0 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8002150:	4602      	mov	r2, r0
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	0a1b      	lsrs	r3, r3, #8
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	4904      	ldr	r1, [pc, #16]	; (8002170 <HAL_RCC_GetPCLK1Freq+0x28>)
 800215e:	5ccb      	ldrb	r3, [r1, r3]
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002168:	4618      	mov	r0, r3
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	08004aec 	.word	0x08004aec

08002174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002178:	f7ff ffda 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 800217c:	4602      	mov	r2, r0
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	0adb      	lsrs	r3, r3, #11
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	4904      	ldr	r1, [pc, #16]	; (800219c <HAL_RCC_GetPCLK2Freq+0x28>)
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002194:	4618      	mov	r0, r3
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40021000 	.word	0x40021000
 800219c:	08004aec 	.word	0x08004aec

080021a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021ac:	4b2a      	ldr	r3, [pc, #168]	; (8002258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021b8:	f7ff f9ee 	bl	8001598 <HAL_PWREx_GetVoltageRange>
 80021bc:	6178      	str	r0, [r7, #20]
 80021be:	e014      	b.n	80021ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021c0:	4b25      	ldr	r3, [pc, #148]	; (8002258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c4:	4a24      	ldr	r2, [pc, #144]	; (8002258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ca:	6593      	str	r3, [r2, #88]	; 0x58
 80021cc:	4b22      	ldr	r3, [pc, #136]	; (8002258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021d8:	f7ff f9de 	bl	8001598 <HAL_PWREx_GetVoltageRange>
 80021dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021de:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e2:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021f0:	d10b      	bne.n	800220a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b80      	cmp	r3, #128	; 0x80
 80021f6:	d919      	bls.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2ba0      	cmp	r3, #160	; 0xa0
 80021fc:	d902      	bls.n	8002204 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021fe:	2302      	movs	r3, #2
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	e013      	b.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002204:	2301      	movs	r3, #1
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	e010      	b.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b80      	cmp	r3, #128	; 0x80
 800220e:	d902      	bls.n	8002216 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002210:	2303      	movs	r3, #3
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	e00a      	b.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b80      	cmp	r3, #128	; 0x80
 800221a:	d102      	bne.n	8002222 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800221c:	2302      	movs	r3, #2
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	e004      	b.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b70      	cmp	r3, #112	; 0x70
 8002226:	d101      	bne.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002228:	2301      	movs	r3, #1
 800222a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f023 0207 	bic.w	r2, r3, #7
 8002234:	4909      	ldr	r1, [pc, #36]	; (800225c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800223c:	4b07      	ldr	r3, [pc, #28]	; (800225c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	429a      	cmp	r2, r3
 8002248:	d001      	beq.n	800224e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000
 800225c:	40022000 	.word	0x40022000

08002260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002268:	2300      	movs	r3, #0
 800226a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800226c:	2300      	movs	r3, #0
 800226e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002278:	2b00      	cmp	r3, #0
 800227a:	d041      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002280:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002284:	d02a      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002286:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800228a:	d824      	bhi.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800228c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002290:	d008      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002292:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002296:	d81e      	bhi.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800229c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022a0:	d010      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022a2:	e018      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022a4:	4b86      	ldr	r3, [pc, #536]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4a85      	ldr	r2, [pc, #532]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022b0:	e015      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3304      	adds	r3, #4
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 fabb 	bl	8002834 <RCCEx_PLLSAI1_Config>
 80022be:	4603      	mov	r3, r0
 80022c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022c2:	e00c      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3320      	adds	r3, #32
 80022c8:	2100      	movs	r1, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 fba6 	bl	8002a1c <RCCEx_PLLSAI2_Config>
 80022d0:	4603      	mov	r3, r0
 80022d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022d4:	e003      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	74fb      	strb	r3, [r7, #19]
      break;
 80022da:	e000      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022de:	7cfb      	ldrb	r3, [r7, #19]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10b      	bne.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022e4:	4b76      	ldr	r3, [pc, #472]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022f2:	4973      	ldr	r1, [pc, #460]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022fa:	e001      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022fc:	7cfb      	ldrb	r3, [r7, #19]
 80022fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d041      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002310:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002314:	d02a      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002316:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800231a:	d824      	bhi.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800231c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002320:	d008      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002322:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002326:	d81e      	bhi.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00a      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800232c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002330:	d010      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002332:	e018      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002334:	4b62      	ldr	r3, [pc, #392]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4a61      	ldr	r2, [pc, #388]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002340:	e015      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3304      	adds	r3, #4
 8002346:	2100      	movs	r1, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f000 fa73 	bl	8002834 <RCCEx_PLLSAI1_Config>
 800234e:	4603      	mov	r3, r0
 8002350:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002352:	e00c      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3320      	adds	r3, #32
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f000 fb5e 	bl	8002a1c <RCCEx_PLLSAI2_Config>
 8002360:	4603      	mov	r3, r0
 8002362:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002364:	e003      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	74fb      	strb	r3, [r7, #19]
      break;
 800236a:	e000      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800236c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800236e:	7cfb      	ldrb	r3, [r7, #19]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10b      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002374:	4b52      	ldr	r3, [pc, #328]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002382:	494f      	ldr	r1, [pc, #316]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800238a:	e001      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800238c:	7cfb      	ldrb	r3, [r7, #19]
 800238e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80a0 	beq.w	80024de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239e:	2300      	movs	r3, #0
 80023a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023a2:	4b47      	ldr	r3, [pc, #284]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80023b2:	2300      	movs	r3, #0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00d      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b8:	4b41      	ldr	r3, [pc, #260]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023bc:	4a40      	ldr	r2, [pc, #256]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c2:	6593      	str	r3, [r2, #88]	; 0x58
 80023c4:	4b3e      	ldr	r3, [pc, #248]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d0:	2301      	movs	r3, #1
 80023d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023d4:	4b3b      	ldr	r3, [pc, #236]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a3a      	ldr	r2, [pc, #232]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023e0:	f7fe fd88 	bl	8000ef4 <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023e6:	e009      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e8:	f7fe fd84 	bl	8000ef4 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d902      	bls.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	74fb      	strb	r3, [r7, #19]
        break;
 80023fa:	e005      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023fc:	4b31      	ldr	r3, [pc, #196]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0ef      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002408:	7cfb      	ldrb	r3, [r7, #19]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d15c      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800240e:	4b2c      	ldr	r3, [pc, #176]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002418:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d01f      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	429a      	cmp	r2, r3
 800242a:	d019      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800242c:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002436:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002438:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	4a20      	ldr	r2, [pc, #128]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002448:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244e:	4a1c      	ldr	r2, [pc, #112]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002458:	4a19      	ldr	r2, [pc, #100]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d016      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246a:	f7fe fd43 	bl	8000ef4 <HAL_GetTick>
 800246e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002470:	e00b      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002472:	f7fe fd3f 	bl	8000ef4 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002480:	4293      	cmp	r3, r2
 8002482:	d902      	bls.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	74fb      	strb	r3, [r7, #19]
            break;
 8002488:	e006      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800248a:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0ec      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10c      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ae:	4904      	ldr	r1, [pc, #16]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024b6:	e009      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024b8:	7cfb      	ldrb	r3, [r7, #19]
 80024ba:	74bb      	strb	r3, [r7, #18]
 80024bc:	e006      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80024be:	bf00      	nop
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024c8:	7cfb      	ldrb	r3, [r7, #19]
 80024ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024cc:	7c7b      	ldrb	r3, [r7, #17]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d105      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d2:	4b9e      	ldr	r3, [pc, #632]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	4a9d      	ldr	r2, [pc, #628]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024ea:	4b98      	ldr	r3, [pc, #608]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f0:	f023 0203 	bic.w	r2, r3, #3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f8:	4994      	ldr	r1, [pc, #592]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00a      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800250c:	4b8f      	ldr	r3, [pc, #572]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002512:	f023 020c 	bic.w	r2, r3, #12
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251a:	498c      	ldr	r1, [pc, #560]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00a      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800252e:	4b87      	ldr	r3, [pc, #540]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002534:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	4983      	ldr	r1, [pc, #524]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253e:	4313      	orrs	r3, r2
 8002540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00a      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002550:	4b7e      	ldr	r3, [pc, #504]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	497b      	ldr	r1, [pc, #492]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0310 	and.w	r3, r3, #16
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002572:	4b76      	ldr	r3, [pc, #472]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002578:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002580:	4972      	ldr	r1, [pc, #456]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0320 	and.w	r3, r3, #32
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00a      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002594:	4b6d      	ldr	r3, [pc, #436]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a2:	496a      	ldr	r1, [pc, #424]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00a      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025b6:	4b65      	ldr	r3, [pc, #404]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c4:	4961      	ldr	r1, [pc, #388]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00a      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025d8:	4b5c      	ldr	r3, [pc, #368]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e6:	4959      	ldr	r1, [pc, #356]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00a      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025fa:	4b54      	ldr	r3, [pc, #336]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002600:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002608:	4950      	ldr	r1, [pc, #320]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260a:	4313      	orrs	r3, r2
 800260c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00a      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800261c:	4b4b      	ldr	r3, [pc, #300]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002622:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262a:	4948      	ldr	r1, [pc, #288]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00a      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800263e:	4b43      	ldr	r3, [pc, #268]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002644:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264c:	493f      	ldr	r1, [pc, #252]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264e:	4313      	orrs	r3, r2
 8002650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d028      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002660:	4b3a      	ldr	r3, [pc, #232]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002666:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800266e:	4937      	ldr	r1, [pc, #220]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800267a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800267e:	d106      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002680:	4b32      	ldr	r3, [pc, #200]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4a31      	ldr	r2, [pc, #196]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002686:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800268a:	60d3      	str	r3, [r2, #12]
 800268c:	e011      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002692:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002696:	d10c      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3304      	adds	r3, #4
 800269c:	2101      	movs	r1, #1
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f8c8 	bl	8002834 <RCCEx_PLLSAI1_Config>
 80026a4:	4603      	mov	r3, r0
 80026a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80026ae:	7cfb      	ldrb	r3, [r7, #19]
 80026b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d028      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026be:	4b23      	ldr	r3, [pc, #140]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026cc:	491f      	ldr	r1, [pc, #124]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026dc:	d106      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026de:	4b1b      	ldr	r3, [pc, #108]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	4a1a      	ldr	r2, [pc, #104]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e8:	60d3      	str	r3, [r2, #12]
 80026ea:	e011      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026f4:	d10c      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2101      	movs	r1, #1
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 f899 	bl	8002834 <RCCEx_PLLSAI1_Config>
 8002702:	4603      	mov	r3, r0
 8002704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002706:	7cfb      	ldrb	r3, [r7, #19]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800270c:	7cfb      	ldrb	r3, [r7, #19]
 800270e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d02b      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800272a:	4908      	ldr	r1, [pc, #32]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002736:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800273a:	d109      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800273c:	4b03      	ldr	r3, [pc, #12]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4a02      	ldr	r2, [pc, #8]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002746:	60d3      	str	r3, [r2, #12]
 8002748:	e014      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002754:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002758:	d10c      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3304      	adds	r3, #4
 800275e:	2101      	movs	r1, #1
 8002760:	4618      	mov	r0, r3
 8002762:	f000 f867 	bl	8002834 <RCCEx_PLLSAI1_Config>
 8002766:	4603      	mov	r3, r0
 8002768:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800276a:	7cfb      	ldrb	r3, [r7, #19]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002770:	7cfb      	ldrb	r3, [r7, #19]
 8002772:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d02f      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002780:	4b2b      	ldr	r3, [pc, #172]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800278e:	4928      	ldr	r1, [pc, #160]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800279a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800279e:	d10d      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3304      	adds	r3, #4
 80027a4:	2102      	movs	r1, #2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f844 	bl	8002834 <RCCEx_PLLSAI1_Config>
 80027ac:	4603      	mov	r3, r0
 80027ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027b0:	7cfb      	ldrb	r3, [r7, #19]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d014      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027b6:	7cfb      	ldrb	r3, [r7, #19]
 80027b8:	74bb      	strb	r3, [r7, #18]
 80027ba:	e011      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3320      	adds	r3, #32
 80027ca:	2102      	movs	r1, #2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 f925 	bl	8002a1c <RCCEx_PLLSAI2_Config>
 80027d2:	4603      	mov	r3, r0
 80027d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027d6:	7cfb      	ldrb	r3, [r7, #19]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027dc:	7cfb      	ldrb	r3, [r7, #19]
 80027de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00a      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027ec:	4b10      	ldr	r3, [pc, #64]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027fa:	490d      	ldr	r1, [pc, #52]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00b      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800280e:	4b08      	ldr	r3, [pc, #32]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002814:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800281e:	4904      	ldr	r1, [pc, #16]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002826:	7cbb      	ldrb	r3, [r7, #18]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000

08002834 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002842:	4b75      	ldr	r3, [pc, #468]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d018      	beq.n	8002880 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800284e:	4b72      	ldr	r3, [pc, #456]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f003 0203 	and.w	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d10d      	bne.n	800287a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
       ||
 8002862:	2b00      	cmp	r3, #0
 8002864:	d009      	beq.n	800287a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002866:	4b6c      	ldr	r3, [pc, #432]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	091b      	lsrs	r3, r3, #4
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
       ||
 8002876:	429a      	cmp	r2, r3
 8002878:	d047      	beq.n	800290a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
 800287e:	e044      	b.n	800290a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b03      	cmp	r3, #3
 8002886:	d018      	beq.n	80028ba <RCCEx_PLLSAI1_Config+0x86>
 8002888:	2b03      	cmp	r3, #3
 800288a:	d825      	bhi.n	80028d8 <RCCEx_PLLSAI1_Config+0xa4>
 800288c:	2b01      	cmp	r3, #1
 800288e:	d002      	beq.n	8002896 <RCCEx_PLLSAI1_Config+0x62>
 8002890:	2b02      	cmp	r3, #2
 8002892:	d009      	beq.n	80028a8 <RCCEx_PLLSAI1_Config+0x74>
 8002894:	e020      	b.n	80028d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002896:	4b60      	ldr	r3, [pc, #384]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d11d      	bne.n	80028de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a6:	e01a      	b.n	80028de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028a8:	4b5b      	ldr	r3, [pc, #364]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d116      	bne.n	80028e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028b8:	e013      	b.n	80028e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028ba:	4b57      	ldr	r3, [pc, #348]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10f      	bne.n	80028e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028c6:	4b54      	ldr	r3, [pc, #336]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d109      	bne.n	80028e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028d6:	e006      	b.n	80028e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      break;
 80028dc:	e004      	b.n	80028e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028de:	bf00      	nop
 80028e0:	e002      	b.n	80028e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028e2:	bf00      	nop
 80028e4:	e000      	b.n	80028e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10d      	bne.n	800290a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028ee:	4b4a      	ldr	r3, [pc, #296]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6819      	ldr	r1, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	3b01      	subs	r3, #1
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	430b      	orrs	r3, r1
 8002904:	4944      	ldr	r1, [pc, #272]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002906:	4313      	orrs	r3, r2
 8002908:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d17d      	bne.n	8002a0c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002910:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a40      	ldr	r2, [pc, #256]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002916:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800291a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800291c:	f7fe faea 	bl	8000ef4 <HAL_GetTick>
 8002920:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002922:	e009      	b.n	8002938 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002924:	f7fe fae6 	bl	8000ef4 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d902      	bls.n	8002938 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	73fb      	strb	r3, [r7, #15]
        break;
 8002936:	e005      	b.n	8002944 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002938:	4b37      	ldr	r3, [pc, #220]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1ef      	bne.n	8002924 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d160      	bne.n	8002a0c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d111      	bne.n	8002974 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002950:	4b31      	ldr	r3, [pc, #196]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6892      	ldr	r2, [r2, #8]
 8002960:	0211      	lsls	r1, r2, #8
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68d2      	ldr	r2, [r2, #12]
 8002966:	0912      	lsrs	r2, r2, #4
 8002968:	0452      	lsls	r2, r2, #17
 800296a:	430a      	orrs	r2, r1
 800296c:	492a      	ldr	r1, [pc, #168]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800296e:	4313      	orrs	r3, r2
 8002970:	610b      	str	r3, [r1, #16]
 8002972:	e027      	b.n	80029c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d112      	bne.n	80029a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800297a:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002982:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6892      	ldr	r2, [r2, #8]
 800298a:	0211      	lsls	r1, r2, #8
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6912      	ldr	r2, [r2, #16]
 8002990:	0852      	lsrs	r2, r2, #1
 8002992:	3a01      	subs	r2, #1
 8002994:	0552      	lsls	r2, r2, #21
 8002996:	430a      	orrs	r2, r1
 8002998:	491f      	ldr	r1, [pc, #124]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299a:	4313      	orrs	r3, r2
 800299c:	610b      	str	r3, [r1, #16]
 800299e:	e011      	b.n	80029c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029a0:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6892      	ldr	r2, [r2, #8]
 80029b0:	0211      	lsls	r1, r2, #8
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6952      	ldr	r2, [r2, #20]
 80029b6:	0852      	lsrs	r2, r2, #1
 80029b8:	3a01      	subs	r2, #1
 80029ba:	0652      	lsls	r2, r2, #25
 80029bc:	430a      	orrs	r2, r1
 80029be:	4916      	ldr	r1, [pc, #88]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029c4:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a13      	ldr	r2, [pc, #76]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d0:	f7fe fa90 	bl	8000ef4 <HAL_GetTick>
 80029d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029d6:	e009      	b.n	80029ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029d8:	f7fe fa8c 	bl	8000ef4 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d902      	bls.n	80029ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	73fb      	strb	r3, [r7, #15]
          break;
 80029ea:	e005      	b.n	80029f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029ec:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0ef      	beq.n	80029d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	4904      	ldr	r1, [pc, #16]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000

08002a1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a2a:	4b6a      	ldr	r3, [pc, #424]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d018      	beq.n	8002a68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a36:	4b67      	ldr	r3, [pc, #412]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f003 0203 	and.w	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d10d      	bne.n	8002a62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
       ||
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a4e:	4b61      	ldr	r3, [pc, #388]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
       ||
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d047      	beq.n	8002af2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
 8002a66:	e044      	b.n	8002af2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d018      	beq.n	8002aa2 <RCCEx_PLLSAI2_Config+0x86>
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d825      	bhi.n	8002ac0 <RCCEx_PLLSAI2_Config+0xa4>
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d002      	beq.n	8002a7e <RCCEx_PLLSAI2_Config+0x62>
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d009      	beq.n	8002a90 <RCCEx_PLLSAI2_Config+0x74>
 8002a7c:	e020      	b.n	8002ac0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a7e:	4b55      	ldr	r3, [pc, #340]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d11d      	bne.n	8002ac6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a8e:	e01a      	b.n	8002ac6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a90:	4b50      	ldr	r3, [pc, #320]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d116      	bne.n	8002aca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa0:	e013      	b.n	8002aca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002aa2:	4b4c      	ldr	r3, [pc, #304]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10f      	bne.n	8002ace <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002aae:	4b49      	ldr	r3, [pc, #292]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002abe:	e006      	b.n	8002ace <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac4:	e004      	b.n	8002ad0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ac6:	bf00      	nop
 8002ac8:	e002      	b.n	8002ad0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aca:	bf00      	nop
 8002acc:	e000      	b.n	8002ad0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ace:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10d      	bne.n	8002af2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ad6:	4b3f      	ldr	r3, [pc, #252]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6819      	ldr	r1, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	430b      	orrs	r3, r1
 8002aec:	4939      	ldr	r1, [pc, #228]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d167      	bne.n	8002bc8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002af8:	4b36      	ldr	r3, [pc, #216]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a35      	ldr	r2, [pc, #212]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b04:	f7fe f9f6 	bl	8000ef4 <HAL_GetTick>
 8002b08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b0a:	e009      	b.n	8002b20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b0c:	f7fe f9f2 	bl	8000ef4 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d902      	bls.n	8002b20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	73fb      	strb	r3, [r7, #15]
        break;
 8002b1e:	e005      	b.n	8002b2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b20:	4b2c      	ldr	r3, [pc, #176]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1ef      	bne.n	8002b0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d14a      	bne.n	8002bc8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d111      	bne.n	8002b5c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b38:	4b26      	ldr	r3, [pc, #152]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6892      	ldr	r2, [r2, #8]
 8002b48:	0211      	lsls	r1, r2, #8
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	68d2      	ldr	r2, [r2, #12]
 8002b4e:	0912      	lsrs	r2, r2, #4
 8002b50:	0452      	lsls	r2, r2, #17
 8002b52:	430a      	orrs	r2, r1
 8002b54:	491f      	ldr	r1, [pc, #124]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	614b      	str	r3, [r1, #20]
 8002b5a:	e011      	b.n	8002b80 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6892      	ldr	r2, [r2, #8]
 8002b6c:	0211      	lsls	r1, r2, #8
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6912      	ldr	r2, [r2, #16]
 8002b72:	0852      	lsrs	r2, r2, #1
 8002b74:	3a01      	subs	r2, #1
 8002b76:	0652      	lsls	r2, r2, #25
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	4916      	ldr	r1, [pc, #88]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b80:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a13      	ldr	r2, [pc, #76]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8c:	f7fe f9b2 	bl	8000ef4 <HAL_GetTick>
 8002b90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b92:	e009      	b.n	8002ba8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b94:	f7fe f9ae 	bl	8000ef4 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d902      	bls.n	8002ba8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ba6:	e005      	b.n	8002bb4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0ef      	beq.n	8002b94 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	4904      	ldr	r1, [pc, #16]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000

08002bd8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d079      	beq.n	8002cde <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fd ff78 	bl	8000af4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	2b10      	cmp	r3, #16
 8002c18:	d058      	beq.n	8002ccc <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	22ca      	movs	r2, #202	; 0xca
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2253      	movs	r2, #83	; 0x53
 8002c28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f880 	bl	8002d30 <RTC_EnterInitMode>
 8002c30:	4603      	mov	r3, r0
 8002c32:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d127      	bne.n	8002c8a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c4c:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6899      	ldr	r1, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	68d2      	ldr	r2, [r2, #12]
 8002c74:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6919      	ldr	r1, [r3, #16]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	041a      	lsls	r2, r3, #16
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f884 	bl	8002d98 <RTC_ExitInitMode>
 8002c90:	4603      	mov	r3, r0
 8002c92:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d113      	bne.n	8002cc2 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0203 	bic.w	r2, r2, #3
 8002ca8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69da      	ldr	r2, [r3, #28]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	22ff      	movs	r2, #255	; 0xff
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24
 8002cca:	e001      	b.n	8002cd0 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d103      	bne.n	8002cde <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a0d      	ldr	r2, [pc, #52]	; (8002d2c <HAL_RTC_WaitForSynchro+0x44>)
 8002cf6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002cf8:	f7fe f8fc 	bl	8000ef4 <HAL_GetTick>
 8002cfc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002cfe:	e009      	b.n	8002d14 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d00:	f7fe f8f8 	bl	8000ef4 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d0e:	d901      	bls.n	8002d14 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e007      	b.n	8002d24 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0ee      	beq.n	8002d00 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	0003ff5f 	.word	0x0003ff5f

08002d30 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d120      	bne.n	8002d8c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d52:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002d54:	f7fe f8ce 	bl	8000ef4 <HAL_GetTick>
 8002d58:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002d5a:	e00d      	b.n	8002d78 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002d5c:	f7fe f8ca 	bl	8000ef4 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d6a:	d905      	bls.n	8002d78 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2203      	movs	r2, #3
 8002d74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d102      	bne.n	8002d8c <RTC_EnterInitMode+0x5c>
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d1e7      	bne.n	8002d5c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002da4:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <RTC_ExitInitMode+0x78>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	4a19      	ldr	r2, [pc, #100]	; (8002e10 <RTC_ExitInitMode+0x78>)
 8002daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dae:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002db0:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <RTC_ExitInitMode+0x78>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10c      	bne.n	8002dd6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ff93 	bl	8002ce8 <HAL_RTC_WaitForSynchro>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d01e      	beq.n	8002e06 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2203      	movs	r2, #3
 8002dcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	73fb      	strb	r3, [r7, #15]
 8002dd4:	e017      	b.n	8002e06 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002dd6:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <RTC_ExitInitMode+0x78>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	4a0d      	ldr	r2, [pc, #52]	; (8002e10 <RTC_ExitInitMode+0x78>)
 8002ddc:	f023 0320 	bic.w	r3, r3, #32
 8002de0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff ff80 	bl	8002ce8 <HAL_RTC_WaitForSynchro>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2203      	movs	r2, #3
 8002df2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002dfa:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <RTC_ExitInitMode+0x78>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <RTC_ExitInitMode+0x78>)
 8002e00:	f043 0320 	orr.w	r3, r3, #32
 8002e04:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40002800 	.word	0x40002800

08002e14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e040      	b.n	8002ea8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d106      	bne.n	8002e3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7fd fe8e 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2224      	movs	r2, #36	; 0x24
 8002e40:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0201 	bic.w	r2, r2, #1
 8002e50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fc30 	bl	80036c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f979 	bl	8003158 <UART_SetConfig>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e01b      	b.n	8002ea8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fcaf 	bl	8003804 <UART_CheckIdleState>
 8002ea6:	4603      	mov	r3, r0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08a      	sub	sp, #40	; 0x28
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec4:	2b20      	cmp	r3, #32
 8002ec6:	d178      	bne.n	8002fba <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_UART_Transmit+0x24>
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e071      	b.n	8002fbc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2221      	movs	r2, #33	; 0x21
 8002ee4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ee6:	f7fe f805 	bl	8000ef4 <HAL_GetTick>
 8002eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	88fa      	ldrh	r2, [r7, #6]
 8002ef0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	88fa      	ldrh	r2, [r7, #6]
 8002ef8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f04:	d108      	bne.n	8002f18 <HAL_UART_Transmit+0x68>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d104      	bne.n	8002f18 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	e003      	b.n	8002f20 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f20:	e030      	b.n	8002f84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2180      	movs	r1, #128	; 0x80
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 fd11 	bl	8003954 <UART_WaitOnFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d004      	beq.n	8002f42 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e03c      	b.n	8002fbc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10b      	bne.n	8002f60 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	881a      	ldrh	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f54:	b292      	uxth	r2, r2
 8002f56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	61bb      	str	r3, [r7, #24]
 8002f5e:	e008      	b.n	8002f72 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	781a      	ldrb	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	b292      	uxth	r2, r2
 8002f6a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1c8      	bne.n	8002f22 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2200      	movs	r2, #0
 8002f98:	2140      	movs	r1, #64	; 0x40
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fcda 	bl	8003954 <UART_WaitOnFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d004      	beq.n	8002fb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e005      	b.n	8002fbc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	e000      	b.n	8002fbc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002fba:	2302      	movs	r3, #2
  }
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3720      	adds	r7, #32
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	; 0x28
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	f040 80b6 	bne.w	800314c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <HAL_UART_Receive+0x28>
 8002fe6:	88fb      	ldrh	r3, [r7, #6]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0ae      	b.n	800314e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2222      	movs	r2, #34	; 0x22
 8002ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003006:	f7fd ff75 	bl	8000ef4 <HAL_GetTick>
 800300a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	88fa      	ldrh	r2, [r7, #6]
 8003010:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	88fa      	ldrh	r2, [r7, #6]
 8003018:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003024:	d10e      	bne.n	8003044 <HAL_UART_Receive+0x80>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d105      	bne.n	800303a <HAL_UART_Receive+0x76>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003034:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003038:	e02d      	b.n	8003096 <HAL_UART_Receive+0xd2>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	22ff      	movs	r2, #255	; 0xff
 800303e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003042:	e028      	b.n	8003096 <HAL_UART_Receive+0xd2>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10d      	bne.n	8003068 <HAL_UART_Receive+0xa4>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d104      	bne.n	800305e <HAL_UART_Receive+0x9a>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	22ff      	movs	r2, #255	; 0xff
 8003058:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800305c:	e01b      	b.n	8003096 <HAL_UART_Receive+0xd2>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	227f      	movs	r2, #127	; 0x7f
 8003062:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003066:	e016      	b.n	8003096 <HAL_UART_Receive+0xd2>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003070:	d10d      	bne.n	800308e <HAL_UART_Receive+0xca>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d104      	bne.n	8003084 <HAL_UART_Receive+0xc0>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	227f      	movs	r2, #127	; 0x7f
 800307e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003082:	e008      	b.n	8003096 <HAL_UART_Receive+0xd2>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	223f      	movs	r2, #63	; 0x3f
 8003088:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800308c:	e003      	b.n	8003096 <HAL_UART_Receive+0xd2>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800309c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a6:	d108      	bne.n	80030ba <HAL_UART_Receive+0xf6>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d104      	bne.n	80030ba <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	61bb      	str	r3, [r7, #24]
 80030b8:	e003      	b.n	80030c2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80030c2:	e037      	b.n	8003134 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2200      	movs	r2, #0
 80030cc:	2120      	movs	r1, #32
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 fc40 	bl	8003954 <UART_WaitOnFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d005      	beq.n	80030e6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2220      	movs	r2, #32
 80030de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e033      	b.n	800314e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10c      	bne.n	8003106 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	8a7b      	ldrh	r3, [r7, #18]
 80030f6:	4013      	ands	r3, r2
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	3302      	adds	r3, #2
 8003102:	61bb      	str	r3, [r7, #24]
 8003104:	e00d      	b.n	8003122 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800310c:	b29b      	uxth	r3, r3
 800310e:	b2da      	uxtb	r2, r3
 8003110:	8a7b      	ldrh	r3, [r7, #18]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	4013      	ands	r3, r2
 8003116:	b2da      	uxtb	r2, r3
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	3301      	adds	r3, #1
 8003120:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800313a:	b29b      	uxth	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1c1      	bne.n	80030c4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2220      	movs	r2, #32
 8003144:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	e000      	b.n	800314e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800314c:	2302      	movs	r3, #2
  }
}
 800314e:	4618      	mov	r0, r3
 8003150:	3720      	adds	r7, #32
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800315c:	b08a      	sub	sp, #40	; 0x28
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	431a      	orrs	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	431a      	orrs	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	4313      	orrs	r3, r2
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4ba4      	ldr	r3, [pc, #656]	; (8003418 <UART_SetConfig+0x2c0>)
 8003188:	4013      	ands	r3, r2
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003190:	430b      	orrs	r3, r1
 8003192:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a99      	ldr	r2, [pc, #612]	; (800341c <UART_SetConfig+0x2c4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d004      	beq.n	80031c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c0:	4313      	orrs	r3, r2
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d4:	430a      	orrs	r2, r1
 80031d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a90      	ldr	r2, [pc, #576]	; (8003420 <UART_SetConfig+0x2c8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d126      	bne.n	8003230 <UART_SetConfig+0xd8>
 80031e2:	4b90      	ldr	r3, [pc, #576]	; (8003424 <UART_SetConfig+0x2cc>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d81b      	bhi.n	8003228 <UART_SetConfig+0xd0>
 80031f0:	a201      	add	r2, pc, #4	; (adr r2, 80031f8 <UART_SetConfig+0xa0>)
 80031f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f6:	bf00      	nop
 80031f8:	08003209 	.word	0x08003209
 80031fc:	08003219 	.word	0x08003219
 8003200:	08003211 	.word	0x08003211
 8003204:	08003221 	.word	0x08003221
 8003208:	2301      	movs	r3, #1
 800320a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320e:	e116      	b.n	800343e <UART_SetConfig+0x2e6>
 8003210:	2302      	movs	r3, #2
 8003212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003216:	e112      	b.n	800343e <UART_SetConfig+0x2e6>
 8003218:	2304      	movs	r3, #4
 800321a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800321e:	e10e      	b.n	800343e <UART_SetConfig+0x2e6>
 8003220:	2308      	movs	r3, #8
 8003222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003226:	e10a      	b.n	800343e <UART_SetConfig+0x2e6>
 8003228:	2310      	movs	r3, #16
 800322a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800322e:	e106      	b.n	800343e <UART_SetConfig+0x2e6>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a7c      	ldr	r2, [pc, #496]	; (8003428 <UART_SetConfig+0x2d0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d138      	bne.n	80032ac <UART_SetConfig+0x154>
 800323a:	4b7a      	ldr	r3, [pc, #488]	; (8003424 <UART_SetConfig+0x2cc>)
 800323c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003240:	f003 030c 	and.w	r3, r3, #12
 8003244:	2b0c      	cmp	r3, #12
 8003246:	d82d      	bhi.n	80032a4 <UART_SetConfig+0x14c>
 8003248:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <UART_SetConfig+0xf8>)
 800324a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324e:	bf00      	nop
 8003250:	08003285 	.word	0x08003285
 8003254:	080032a5 	.word	0x080032a5
 8003258:	080032a5 	.word	0x080032a5
 800325c:	080032a5 	.word	0x080032a5
 8003260:	08003295 	.word	0x08003295
 8003264:	080032a5 	.word	0x080032a5
 8003268:	080032a5 	.word	0x080032a5
 800326c:	080032a5 	.word	0x080032a5
 8003270:	0800328d 	.word	0x0800328d
 8003274:	080032a5 	.word	0x080032a5
 8003278:	080032a5 	.word	0x080032a5
 800327c:	080032a5 	.word	0x080032a5
 8003280:	0800329d 	.word	0x0800329d
 8003284:	2300      	movs	r3, #0
 8003286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800328a:	e0d8      	b.n	800343e <UART_SetConfig+0x2e6>
 800328c:	2302      	movs	r3, #2
 800328e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003292:	e0d4      	b.n	800343e <UART_SetConfig+0x2e6>
 8003294:	2304      	movs	r3, #4
 8003296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800329a:	e0d0      	b.n	800343e <UART_SetConfig+0x2e6>
 800329c:	2308      	movs	r3, #8
 800329e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032a2:	e0cc      	b.n	800343e <UART_SetConfig+0x2e6>
 80032a4:	2310      	movs	r3, #16
 80032a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032aa:	e0c8      	b.n	800343e <UART_SetConfig+0x2e6>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a5e      	ldr	r2, [pc, #376]	; (800342c <UART_SetConfig+0x2d4>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d125      	bne.n	8003302 <UART_SetConfig+0x1aa>
 80032b6:	4b5b      	ldr	r3, [pc, #364]	; (8003424 <UART_SetConfig+0x2cc>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032c0:	2b30      	cmp	r3, #48	; 0x30
 80032c2:	d016      	beq.n	80032f2 <UART_SetConfig+0x19a>
 80032c4:	2b30      	cmp	r3, #48	; 0x30
 80032c6:	d818      	bhi.n	80032fa <UART_SetConfig+0x1a2>
 80032c8:	2b20      	cmp	r3, #32
 80032ca:	d00a      	beq.n	80032e2 <UART_SetConfig+0x18a>
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d814      	bhi.n	80032fa <UART_SetConfig+0x1a2>
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <UART_SetConfig+0x182>
 80032d4:	2b10      	cmp	r3, #16
 80032d6:	d008      	beq.n	80032ea <UART_SetConfig+0x192>
 80032d8:	e00f      	b.n	80032fa <UART_SetConfig+0x1a2>
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e0:	e0ad      	b.n	800343e <UART_SetConfig+0x2e6>
 80032e2:	2302      	movs	r3, #2
 80032e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e8:	e0a9      	b.n	800343e <UART_SetConfig+0x2e6>
 80032ea:	2304      	movs	r3, #4
 80032ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032f0:	e0a5      	b.n	800343e <UART_SetConfig+0x2e6>
 80032f2:	2308      	movs	r3, #8
 80032f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032f8:	e0a1      	b.n	800343e <UART_SetConfig+0x2e6>
 80032fa:	2310      	movs	r3, #16
 80032fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003300:	e09d      	b.n	800343e <UART_SetConfig+0x2e6>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a4a      	ldr	r2, [pc, #296]	; (8003430 <UART_SetConfig+0x2d8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d125      	bne.n	8003358 <UART_SetConfig+0x200>
 800330c:	4b45      	ldr	r3, [pc, #276]	; (8003424 <UART_SetConfig+0x2cc>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003312:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003316:	2bc0      	cmp	r3, #192	; 0xc0
 8003318:	d016      	beq.n	8003348 <UART_SetConfig+0x1f0>
 800331a:	2bc0      	cmp	r3, #192	; 0xc0
 800331c:	d818      	bhi.n	8003350 <UART_SetConfig+0x1f8>
 800331e:	2b80      	cmp	r3, #128	; 0x80
 8003320:	d00a      	beq.n	8003338 <UART_SetConfig+0x1e0>
 8003322:	2b80      	cmp	r3, #128	; 0x80
 8003324:	d814      	bhi.n	8003350 <UART_SetConfig+0x1f8>
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <UART_SetConfig+0x1d8>
 800332a:	2b40      	cmp	r3, #64	; 0x40
 800332c:	d008      	beq.n	8003340 <UART_SetConfig+0x1e8>
 800332e:	e00f      	b.n	8003350 <UART_SetConfig+0x1f8>
 8003330:	2300      	movs	r3, #0
 8003332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003336:	e082      	b.n	800343e <UART_SetConfig+0x2e6>
 8003338:	2302      	movs	r3, #2
 800333a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800333e:	e07e      	b.n	800343e <UART_SetConfig+0x2e6>
 8003340:	2304      	movs	r3, #4
 8003342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003346:	e07a      	b.n	800343e <UART_SetConfig+0x2e6>
 8003348:	2308      	movs	r3, #8
 800334a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800334e:	e076      	b.n	800343e <UART_SetConfig+0x2e6>
 8003350:	2310      	movs	r3, #16
 8003352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003356:	e072      	b.n	800343e <UART_SetConfig+0x2e6>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a35      	ldr	r2, [pc, #212]	; (8003434 <UART_SetConfig+0x2dc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d12a      	bne.n	80033b8 <UART_SetConfig+0x260>
 8003362:	4b30      	ldr	r3, [pc, #192]	; (8003424 <UART_SetConfig+0x2cc>)
 8003364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003368:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800336c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003370:	d01a      	beq.n	80033a8 <UART_SetConfig+0x250>
 8003372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003376:	d81b      	bhi.n	80033b0 <UART_SetConfig+0x258>
 8003378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800337c:	d00c      	beq.n	8003398 <UART_SetConfig+0x240>
 800337e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003382:	d815      	bhi.n	80033b0 <UART_SetConfig+0x258>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <UART_SetConfig+0x238>
 8003388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800338c:	d008      	beq.n	80033a0 <UART_SetConfig+0x248>
 800338e:	e00f      	b.n	80033b0 <UART_SetConfig+0x258>
 8003390:	2300      	movs	r3, #0
 8003392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003396:	e052      	b.n	800343e <UART_SetConfig+0x2e6>
 8003398:	2302      	movs	r3, #2
 800339a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800339e:	e04e      	b.n	800343e <UART_SetConfig+0x2e6>
 80033a0:	2304      	movs	r3, #4
 80033a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033a6:	e04a      	b.n	800343e <UART_SetConfig+0x2e6>
 80033a8:	2308      	movs	r3, #8
 80033aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ae:	e046      	b.n	800343e <UART_SetConfig+0x2e6>
 80033b0:	2310      	movs	r3, #16
 80033b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b6:	e042      	b.n	800343e <UART_SetConfig+0x2e6>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a17      	ldr	r2, [pc, #92]	; (800341c <UART_SetConfig+0x2c4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d13a      	bne.n	8003438 <UART_SetConfig+0x2e0>
 80033c2:	4b18      	ldr	r3, [pc, #96]	; (8003424 <UART_SetConfig+0x2cc>)
 80033c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033d0:	d01a      	beq.n	8003408 <UART_SetConfig+0x2b0>
 80033d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033d6:	d81b      	bhi.n	8003410 <UART_SetConfig+0x2b8>
 80033d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033dc:	d00c      	beq.n	80033f8 <UART_SetConfig+0x2a0>
 80033de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033e2:	d815      	bhi.n	8003410 <UART_SetConfig+0x2b8>
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <UART_SetConfig+0x298>
 80033e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ec:	d008      	beq.n	8003400 <UART_SetConfig+0x2a8>
 80033ee:	e00f      	b.n	8003410 <UART_SetConfig+0x2b8>
 80033f0:	2300      	movs	r3, #0
 80033f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033f6:	e022      	b.n	800343e <UART_SetConfig+0x2e6>
 80033f8:	2302      	movs	r3, #2
 80033fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033fe:	e01e      	b.n	800343e <UART_SetConfig+0x2e6>
 8003400:	2304      	movs	r3, #4
 8003402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003406:	e01a      	b.n	800343e <UART_SetConfig+0x2e6>
 8003408:	2308      	movs	r3, #8
 800340a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800340e:	e016      	b.n	800343e <UART_SetConfig+0x2e6>
 8003410:	2310      	movs	r3, #16
 8003412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003416:	e012      	b.n	800343e <UART_SetConfig+0x2e6>
 8003418:	efff69f3 	.word	0xefff69f3
 800341c:	40008000 	.word	0x40008000
 8003420:	40013800 	.word	0x40013800
 8003424:	40021000 	.word	0x40021000
 8003428:	40004400 	.word	0x40004400
 800342c:	40004800 	.word	0x40004800
 8003430:	40004c00 	.word	0x40004c00
 8003434:	40005000 	.word	0x40005000
 8003438:	2310      	movs	r3, #16
 800343a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a9d      	ldr	r2, [pc, #628]	; (80036b8 <UART_SetConfig+0x560>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d179      	bne.n	800353c <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003448:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800344c:	2b08      	cmp	r3, #8
 800344e:	d823      	bhi.n	8003498 <UART_SetConfig+0x340>
 8003450:	a201      	add	r2, pc, #4	; (adr r2, 8003458 <UART_SetConfig+0x300>)
 8003452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003456:	bf00      	nop
 8003458:	0800347d 	.word	0x0800347d
 800345c:	08003499 	.word	0x08003499
 8003460:	08003485 	.word	0x08003485
 8003464:	08003499 	.word	0x08003499
 8003468:	0800348b 	.word	0x0800348b
 800346c:	08003499 	.word	0x08003499
 8003470:	08003499 	.word	0x08003499
 8003474:	08003499 	.word	0x08003499
 8003478:	08003493 	.word	0x08003493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800347c:	f7fe fe64 	bl	8002148 <HAL_RCC_GetPCLK1Freq>
 8003480:	61f8      	str	r0, [r7, #28]
        break;
 8003482:	e00f      	b.n	80034a4 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003484:	4b8d      	ldr	r3, [pc, #564]	; (80036bc <UART_SetConfig+0x564>)
 8003486:	61fb      	str	r3, [r7, #28]
        break;
 8003488:	e00c      	b.n	80034a4 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800348a:	f7fe fdc5 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 800348e:	61f8      	str	r0, [r7, #28]
        break;
 8003490:	e008      	b.n	80034a4 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003492:	2320      	movs	r3, #32
 8003494:	61fb      	str	r3, [r7, #28]
        break;
 8003496:	e005      	b.n	80034a4 <UART_SetConfig+0x34c>
      default:
        pclk = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 80f9 	beq.w	800369e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	4413      	add	r3, r2
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d305      	bcc.n	80034c8 <UART_SetConfig+0x370>
          (pclk > (4096U * huart->Init.BaudRate)))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d903      	bls.n	80034d0 <UART_SetConfig+0x378>
      {
        ret = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034ce:	e0e6      	b.n	800369e <UART_SetConfig+0x546>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	2200      	movs	r2, #0
 80034d4:	461c      	mov	r4, r3
 80034d6:	4615      	mov	r5, r2
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	022b      	lsls	r3, r5, #8
 80034e2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80034e6:	0222      	lsls	r2, r4, #8
 80034e8:	68f9      	ldr	r1, [r7, #12]
 80034ea:	6849      	ldr	r1, [r1, #4]
 80034ec:	0849      	lsrs	r1, r1, #1
 80034ee:	2000      	movs	r0, #0
 80034f0:	4688      	mov	r8, r1
 80034f2:	4681      	mov	r9, r0
 80034f4:	eb12 0a08 	adds.w	sl, r2, r8
 80034f8:	eb43 0b09 	adc.w	fp, r3, r9
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	607a      	str	r2, [r7, #4]
 8003506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800350a:	4650      	mov	r0, sl
 800350c:	4659      	mov	r1, fp
 800350e:	f7fc feaf 	bl	8000270 <__aeabi_uldivmod>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4613      	mov	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003520:	d308      	bcc.n	8003534 <UART_SetConfig+0x3dc>
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003528:	d204      	bcs.n	8003534 <UART_SetConfig+0x3dc>
        {
          huart->Instance->BRR = usartdiv;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	e0b4      	b.n	800369e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800353a:	e0b0      	b.n	800369e <UART_SetConfig+0x546>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003544:	d15c      	bne.n	8003600 <UART_SetConfig+0x4a8>
  {
    switch (clocksource)
 8003546:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800354a:	2b08      	cmp	r3, #8
 800354c:	d826      	bhi.n	800359c <UART_SetConfig+0x444>
 800354e:	a201      	add	r2, pc, #4	; (adr r2, 8003554 <UART_SetConfig+0x3fc>)
 8003550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003554:	08003579 	.word	0x08003579
 8003558:	08003581 	.word	0x08003581
 800355c:	08003589 	.word	0x08003589
 8003560:	0800359d 	.word	0x0800359d
 8003564:	0800358f 	.word	0x0800358f
 8003568:	0800359d 	.word	0x0800359d
 800356c:	0800359d 	.word	0x0800359d
 8003570:	0800359d 	.word	0x0800359d
 8003574:	08003597 	.word	0x08003597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003578:	f7fe fde6 	bl	8002148 <HAL_RCC_GetPCLK1Freq>
 800357c:	61f8      	str	r0, [r7, #28]
        break;
 800357e:	e013      	b.n	80035a8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003580:	f7fe fdf8 	bl	8002174 <HAL_RCC_GetPCLK2Freq>
 8003584:	61f8      	str	r0, [r7, #28]
        break;
 8003586:	e00f      	b.n	80035a8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003588:	4b4c      	ldr	r3, [pc, #304]	; (80036bc <UART_SetConfig+0x564>)
 800358a:	61fb      	str	r3, [r7, #28]
        break;
 800358c:	e00c      	b.n	80035a8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800358e:	f7fe fd43 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8003592:	61f8      	str	r0, [r7, #28]
        break;
 8003594:	e008      	b.n	80035a8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003596:	2320      	movs	r3, #32
 8003598:	61fb      	str	r3, [r7, #28]
        break;
 800359a:	e005      	b.n	80035a8 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80035a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d077      	beq.n	800369e <UART_SetConfig+0x546>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	005a      	lsls	r2, r3, #1
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	085b      	lsrs	r3, r3, #1
 80035b8:	441a      	add	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	2b0f      	cmp	r3, #15
 80035c8:	d916      	bls.n	80035f8 <UART_SetConfig+0x4a0>
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d0:	d212      	bcs.n	80035f8 <UART_SetConfig+0x4a0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	f023 030f 	bic.w	r3, r3, #15
 80035da:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	085b      	lsrs	r3, r3, #1
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	8afb      	ldrh	r3, [r7, #22]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	8afa      	ldrh	r2, [r7, #22]
 80035f4:	60da      	str	r2, [r3, #12]
 80035f6:	e052      	b.n	800369e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80035fe:	e04e      	b.n	800369e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003600:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003604:	2b08      	cmp	r3, #8
 8003606:	d827      	bhi.n	8003658 <UART_SetConfig+0x500>
 8003608:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <UART_SetConfig+0x4b8>)
 800360a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360e:	bf00      	nop
 8003610:	08003635 	.word	0x08003635
 8003614:	0800363d 	.word	0x0800363d
 8003618:	08003645 	.word	0x08003645
 800361c:	08003659 	.word	0x08003659
 8003620:	0800364b 	.word	0x0800364b
 8003624:	08003659 	.word	0x08003659
 8003628:	08003659 	.word	0x08003659
 800362c:	08003659 	.word	0x08003659
 8003630:	08003653 	.word	0x08003653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003634:	f7fe fd88 	bl	8002148 <HAL_RCC_GetPCLK1Freq>
 8003638:	61f8      	str	r0, [r7, #28]
        break;
 800363a:	e013      	b.n	8003664 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800363c:	f7fe fd9a 	bl	8002174 <HAL_RCC_GetPCLK2Freq>
 8003640:	61f8      	str	r0, [r7, #28]
        break;
 8003642:	e00f      	b.n	8003664 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003644:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <UART_SetConfig+0x564>)
 8003646:	61fb      	str	r3, [r7, #28]
        break;
 8003648:	e00c      	b.n	8003664 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800364a:	f7fe fce5 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 800364e:	61f8      	str	r0, [r7, #28]
        break;
 8003650:	e008      	b.n	8003664 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003652:	2320      	movs	r3, #32
 8003654:	61fb      	str	r3, [r7, #28]
        break;
 8003656:	e005      	b.n	8003664 <UART_SetConfig+0x50c>
      default:
        pclk = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003662:	bf00      	nop
    }

    if (pclk != 0U)
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d019      	beq.n	800369e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	085a      	lsrs	r2, r3, #1
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	441a      	add	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	fbb2 f3f3 	udiv	r3, r2, r3
 800367c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	2b0f      	cmp	r3, #15
 8003682:	d909      	bls.n	8003698 <UART_SetConfig+0x540>
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368a:	d205      	bcs.n	8003698 <UART_SetConfig+0x540>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60da      	str	r2, [r3, #12]
 8003696:	e002      	b.n	800369e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80036aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3728      	adds	r7, #40	; 0x28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036b8:	40008000 	.word	0x40008000
 80036bc:	00f42400 	.word	0x00f42400

080036c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00a      	beq.n	80036ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	f003 0310 	and.w	r3, r3, #16
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01a      	beq.n	80037d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037be:	d10a      	bne.n	80037d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	605a      	str	r2, [r3, #4]
  }
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b098      	sub	sp, #96	; 0x60
 8003808:	af02      	add	r7, sp, #8
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003814:	f7fd fb6e 	bl	8000ef4 <HAL_GetTick>
 8003818:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b08      	cmp	r3, #8
 8003826:	d12e      	bne.n	8003886 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003828:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003830:	2200      	movs	r2, #0
 8003832:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f88c 	bl	8003954 <UART_WaitOnFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d021      	beq.n	8003886 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384a:	e853 3f00 	ldrex	r3, [r3]
 800384e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003856:	653b      	str	r3, [r7, #80]	; 0x50
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003860:	647b      	str	r3, [r7, #68]	; 0x44
 8003862:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003864:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003866:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003868:	e841 2300 	strex	r3, r2, [r1]
 800386c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800386e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1e6      	bne.n	8003842 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e062      	b.n	800394c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b04      	cmp	r3, #4
 8003892:	d149      	bne.n	8003928 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003894:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800389c:	2200      	movs	r2, #0
 800389e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f856 	bl	8003954 <UART_WaitOnFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d03c      	beq.n	8003928 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	e853 3f00 	ldrex	r3, [r3]
 80038ba:	623b      	str	r3, [r7, #32]
   return(result);
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	461a      	mov	r2, r3
 80038ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038cc:	633b      	str	r3, [r7, #48]	; 0x30
 80038ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038d4:	e841 2300 	strex	r3, r2, [r1]
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1e6      	bne.n	80038ae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3308      	adds	r3, #8
 80038e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	e853 3f00 	ldrex	r3, [r3]
 80038ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0301 	bic.w	r3, r3, #1
 80038f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3308      	adds	r3, #8
 80038fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003900:	61fa      	str	r2, [r7, #28]
 8003902:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003904:	69b9      	ldr	r1, [r7, #24]
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	e841 2300 	strex	r3, r2, [r1]
 800390c:	617b      	str	r3, [r7, #20]
   return(result);
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1e5      	bne.n	80038e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e011      	b.n	800394c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2220      	movs	r2, #32
 8003932:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3758      	adds	r7, #88	; 0x58
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	603b      	str	r3, [r7, #0]
 8003960:	4613      	mov	r3, r2
 8003962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003964:	e049      	b.n	80039fa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396c:	d045      	beq.n	80039fa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800396e:	f7fd fac1 	bl	8000ef4 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	429a      	cmp	r2, r3
 800397c:	d302      	bcc.n	8003984 <UART_WaitOnFlagUntilTimeout+0x30>
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e048      	b.n	8003a1a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b00      	cmp	r3, #0
 8003994:	d031      	beq.n	80039fa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d110      	bne.n	80039c6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2208      	movs	r2, #8
 80039aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 f838 	bl	8003a22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2208      	movs	r2, #8
 80039b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e029      	b.n	8003a1a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039d4:	d111      	bne.n	80039fa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f81e 	bl	8003a22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e00f      	b.n	8003a1a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69da      	ldr	r2, [r3, #28]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4013      	ands	r3, r2
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	bf0c      	ite	eq
 8003a0a:	2301      	moveq	r3, #1
 8003a0c:	2300      	movne	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d0a6      	beq.n	8003966 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b095      	sub	sp, #84	; 0x54
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a32:	e853 3f00 	ldrex	r3, [r3]
 8003a36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a48:	643b      	str	r3, [r7, #64]	; 0x40
 8003a4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a50:	e841 2300 	strex	r3, r2, [r1]
 8003a54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e6      	bne.n	8003a2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3308      	adds	r3, #8
 8003a62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	e853 3f00 	ldrex	r3, [r3]
 8003a6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f023 0301 	bic.w	r3, r3, #1
 8003a72:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3308      	adds	r3, #8
 8003a7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a84:	e841 2300 	strex	r3, r2, [r1]
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1e5      	bne.n	8003a5c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d118      	bne.n	8003aca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	f023 0310 	bic.w	r3, r3, #16
 8003aac:	647b      	str	r3, [r7, #68]	; 0x44
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ab6:	61bb      	str	r3, [r7, #24]
 8003ab8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	6979      	ldr	r1, [r7, #20]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e6      	bne.n	8003a98 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2220      	movs	r2, #32
 8003ace:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ade:	bf00      	nop
 8003ae0:	3754      	adds	r7, #84	; 0x54
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <atoi>:
 8003aea:	220a      	movs	r2, #10
 8003aec:	2100      	movs	r1, #0
 8003aee:	f000 b883 	b.w	8003bf8 <strtol>
	...

08003af4 <_strtol_l.constprop.0>:
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003afa:	d001      	beq.n	8003b00 <_strtol_l.constprop.0+0xc>
 8003afc:	2b24      	cmp	r3, #36	; 0x24
 8003afe:	d906      	bls.n	8003b0e <_strtol_l.constprop.0+0x1a>
 8003b00:	f000 f9ea 	bl	8003ed8 <__errno>
 8003b04:	2316      	movs	r3, #22
 8003b06:	6003      	str	r3, [r0, #0]
 8003b08:	2000      	movs	r0, #0
 8003b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b0e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003bf4 <_strtol_l.constprop.0+0x100>
 8003b12:	460d      	mov	r5, r1
 8003b14:	462e      	mov	r6, r5
 8003b16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003b1a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8003b1e:	f017 0708 	ands.w	r7, r7, #8
 8003b22:	d1f7      	bne.n	8003b14 <_strtol_l.constprop.0+0x20>
 8003b24:	2c2d      	cmp	r4, #45	; 0x2d
 8003b26:	d132      	bne.n	8003b8e <_strtol_l.constprop.0+0x9a>
 8003b28:	782c      	ldrb	r4, [r5, #0]
 8003b2a:	2701      	movs	r7, #1
 8003b2c:	1cb5      	adds	r5, r6, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d05b      	beq.n	8003bea <_strtol_l.constprop.0+0xf6>
 8003b32:	2b10      	cmp	r3, #16
 8003b34:	d109      	bne.n	8003b4a <_strtol_l.constprop.0+0x56>
 8003b36:	2c30      	cmp	r4, #48	; 0x30
 8003b38:	d107      	bne.n	8003b4a <_strtol_l.constprop.0+0x56>
 8003b3a:	782c      	ldrb	r4, [r5, #0]
 8003b3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003b40:	2c58      	cmp	r4, #88	; 0x58
 8003b42:	d14d      	bne.n	8003be0 <_strtol_l.constprop.0+0xec>
 8003b44:	786c      	ldrb	r4, [r5, #1]
 8003b46:	2310      	movs	r3, #16
 8003b48:	3502      	adds	r5, #2
 8003b4a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003b4e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003b52:	f04f 0e00 	mov.w	lr, #0
 8003b56:	fbb8 f9f3 	udiv	r9, r8, r3
 8003b5a:	4676      	mov	r6, lr
 8003b5c:	fb03 8a19 	mls	sl, r3, r9, r8
 8003b60:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003b64:	f1bc 0f09 	cmp.w	ip, #9
 8003b68:	d816      	bhi.n	8003b98 <_strtol_l.constprop.0+0xa4>
 8003b6a:	4664      	mov	r4, ip
 8003b6c:	42a3      	cmp	r3, r4
 8003b6e:	dd24      	ble.n	8003bba <_strtol_l.constprop.0+0xc6>
 8003b70:	f1be 3fff 	cmp.w	lr, #4294967295
 8003b74:	d008      	beq.n	8003b88 <_strtol_l.constprop.0+0x94>
 8003b76:	45b1      	cmp	r9, r6
 8003b78:	d31c      	bcc.n	8003bb4 <_strtol_l.constprop.0+0xc0>
 8003b7a:	d101      	bne.n	8003b80 <_strtol_l.constprop.0+0x8c>
 8003b7c:	45a2      	cmp	sl, r4
 8003b7e:	db19      	blt.n	8003bb4 <_strtol_l.constprop.0+0xc0>
 8003b80:	fb06 4603 	mla	r6, r6, r3, r4
 8003b84:	f04f 0e01 	mov.w	lr, #1
 8003b88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003b8c:	e7e8      	b.n	8003b60 <_strtol_l.constprop.0+0x6c>
 8003b8e:	2c2b      	cmp	r4, #43	; 0x2b
 8003b90:	bf04      	itt	eq
 8003b92:	782c      	ldrbeq	r4, [r5, #0]
 8003b94:	1cb5      	addeq	r5, r6, #2
 8003b96:	e7ca      	b.n	8003b2e <_strtol_l.constprop.0+0x3a>
 8003b98:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003b9c:	f1bc 0f19 	cmp.w	ip, #25
 8003ba0:	d801      	bhi.n	8003ba6 <_strtol_l.constprop.0+0xb2>
 8003ba2:	3c37      	subs	r4, #55	; 0x37
 8003ba4:	e7e2      	b.n	8003b6c <_strtol_l.constprop.0+0x78>
 8003ba6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003baa:	f1bc 0f19 	cmp.w	ip, #25
 8003bae:	d804      	bhi.n	8003bba <_strtol_l.constprop.0+0xc6>
 8003bb0:	3c57      	subs	r4, #87	; 0x57
 8003bb2:	e7db      	b.n	8003b6c <_strtol_l.constprop.0+0x78>
 8003bb4:	f04f 3eff 	mov.w	lr, #4294967295
 8003bb8:	e7e6      	b.n	8003b88 <_strtol_l.constprop.0+0x94>
 8003bba:	f1be 3fff 	cmp.w	lr, #4294967295
 8003bbe:	d105      	bne.n	8003bcc <_strtol_l.constprop.0+0xd8>
 8003bc0:	2322      	movs	r3, #34	; 0x22
 8003bc2:	6003      	str	r3, [r0, #0]
 8003bc4:	4646      	mov	r6, r8
 8003bc6:	b942      	cbnz	r2, 8003bda <_strtol_l.constprop.0+0xe6>
 8003bc8:	4630      	mov	r0, r6
 8003bca:	e79e      	b.n	8003b0a <_strtol_l.constprop.0+0x16>
 8003bcc:	b107      	cbz	r7, 8003bd0 <_strtol_l.constprop.0+0xdc>
 8003bce:	4276      	negs	r6, r6
 8003bd0:	2a00      	cmp	r2, #0
 8003bd2:	d0f9      	beq.n	8003bc8 <_strtol_l.constprop.0+0xd4>
 8003bd4:	f1be 0f00 	cmp.w	lr, #0
 8003bd8:	d000      	beq.n	8003bdc <_strtol_l.constprop.0+0xe8>
 8003bda:	1e69      	subs	r1, r5, #1
 8003bdc:	6011      	str	r1, [r2, #0]
 8003bde:	e7f3      	b.n	8003bc8 <_strtol_l.constprop.0+0xd4>
 8003be0:	2430      	movs	r4, #48	; 0x30
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1b1      	bne.n	8003b4a <_strtol_l.constprop.0+0x56>
 8003be6:	2308      	movs	r3, #8
 8003be8:	e7af      	b.n	8003b4a <_strtol_l.constprop.0+0x56>
 8003bea:	2c30      	cmp	r4, #48	; 0x30
 8003bec:	d0a5      	beq.n	8003b3a <_strtol_l.constprop.0+0x46>
 8003bee:	230a      	movs	r3, #10
 8003bf0:	e7ab      	b.n	8003b4a <_strtol_l.constprop.0+0x56>
 8003bf2:	bf00      	nop
 8003bf4:	08004b25 	.word	0x08004b25

08003bf8 <strtol>:
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	460a      	mov	r2, r1
 8003bfc:	4601      	mov	r1, r0
 8003bfe:	4802      	ldr	r0, [pc, #8]	; (8003c08 <strtol+0x10>)
 8003c00:	6800      	ldr	r0, [r0, #0]
 8003c02:	f7ff bf77 	b.w	8003af4 <_strtol_l.constprop.0>
 8003c06:	bf00      	nop
 8003c08:	20000064 	.word	0x20000064

08003c0c <std>:
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	b510      	push	{r4, lr}
 8003c10:	4604      	mov	r4, r0
 8003c12:	e9c0 3300 	strd	r3, r3, [r0]
 8003c16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c1a:	6083      	str	r3, [r0, #8]
 8003c1c:	8181      	strh	r1, [r0, #12]
 8003c1e:	6643      	str	r3, [r0, #100]	; 0x64
 8003c20:	81c2      	strh	r2, [r0, #14]
 8003c22:	6183      	str	r3, [r0, #24]
 8003c24:	4619      	mov	r1, r3
 8003c26:	2208      	movs	r2, #8
 8003c28:	305c      	adds	r0, #92	; 0x5c
 8003c2a:	f000 f906 	bl	8003e3a <memset>
 8003c2e:	4b0d      	ldr	r3, [pc, #52]	; (8003c64 <std+0x58>)
 8003c30:	6263      	str	r3, [r4, #36]	; 0x24
 8003c32:	4b0d      	ldr	r3, [pc, #52]	; (8003c68 <std+0x5c>)
 8003c34:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c36:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <std+0x60>)
 8003c38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <std+0x64>)
 8003c3c:	6323      	str	r3, [r4, #48]	; 0x30
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <std+0x68>)
 8003c40:	6224      	str	r4, [r4, #32]
 8003c42:	429c      	cmp	r4, r3
 8003c44:	d006      	beq.n	8003c54 <std+0x48>
 8003c46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003c4a:	4294      	cmp	r4, r2
 8003c4c:	d002      	beq.n	8003c54 <std+0x48>
 8003c4e:	33d0      	adds	r3, #208	; 0xd0
 8003c50:	429c      	cmp	r4, r3
 8003c52:	d105      	bne.n	8003c60 <std+0x54>
 8003c54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c5c:	f000 b966 	b.w	8003f2c <__retarget_lock_init_recursive>
 8003c60:	bd10      	pop	{r4, pc}
 8003c62:	bf00      	nop
 8003c64:	08003db5 	.word	0x08003db5
 8003c68:	08003dd7 	.word	0x08003dd7
 8003c6c:	08003e0f 	.word	0x08003e0f
 8003c70:	08003e33 	.word	0x08003e33
 8003c74:	200001ac 	.word	0x200001ac

08003c78 <stdio_exit_handler>:
 8003c78:	4a02      	ldr	r2, [pc, #8]	; (8003c84 <stdio_exit_handler+0xc>)
 8003c7a:	4903      	ldr	r1, [pc, #12]	; (8003c88 <stdio_exit_handler+0x10>)
 8003c7c:	4803      	ldr	r0, [pc, #12]	; (8003c8c <stdio_exit_handler+0x14>)
 8003c7e:	f000 b869 	b.w	8003d54 <_fwalk_sglue>
 8003c82:	bf00      	nop
 8003c84:	2000000c 	.word	0x2000000c
 8003c88:	080047d9 	.word	0x080047d9
 8003c8c:	20000018 	.word	0x20000018

08003c90 <cleanup_stdio>:
 8003c90:	6841      	ldr	r1, [r0, #4]
 8003c92:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <cleanup_stdio+0x34>)
 8003c94:	4299      	cmp	r1, r3
 8003c96:	b510      	push	{r4, lr}
 8003c98:	4604      	mov	r4, r0
 8003c9a:	d001      	beq.n	8003ca0 <cleanup_stdio+0x10>
 8003c9c:	f000 fd9c 	bl	80047d8 <_fflush_r>
 8003ca0:	68a1      	ldr	r1, [r4, #8]
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <cleanup_stdio+0x38>)
 8003ca4:	4299      	cmp	r1, r3
 8003ca6:	d002      	beq.n	8003cae <cleanup_stdio+0x1e>
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f000 fd95 	bl	80047d8 <_fflush_r>
 8003cae:	68e1      	ldr	r1, [r4, #12]
 8003cb0:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <cleanup_stdio+0x3c>)
 8003cb2:	4299      	cmp	r1, r3
 8003cb4:	d004      	beq.n	8003cc0 <cleanup_stdio+0x30>
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cbc:	f000 bd8c 	b.w	80047d8 <_fflush_r>
 8003cc0:	bd10      	pop	{r4, pc}
 8003cc2:	bf00      	nop
 8003cc4:	200001ac 	.word	0x200001ac
 8003cc8:	20000214 	.word	0x20000214
 8003ccc:	2000027c 	.word	0x2000027c

08003cd0 <global_stdio_init.part.0>:
 8003cd0:	b510      	push	{r4, lr}
 8003cd2:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <global_stdio_init.part.0+0x30>)
 8003cd4:	4c0b      	ldr	r4, [pc, #44]	; (8003d04 <global_stdio_init.part.0+0x34>)
 8003cd6:	4a0c      	ldr	r2, [pc, #48]	; (8003d08 <global_stdio_init.part.0+0x38>)
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	4620      	mov	r0, r4
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2104      	movs	r1, #4
 8003ce0:	f7ff ff94 	bl	8003c0c <std>
 8003ce4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003ce8:	2201      	movs	r2, #1
 8003cea:	2109      	movs	r1, #9
 8003cec:	f7ff ff8e 	bl	8003c0c <std>
 8003cf0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cfa:	2112      	movs	r1, #18
 8003cfc:	f7ff bf86 	b.w	8003c0c <std>
 8003d00:	200002e4 	.word	0x200002e4
 8003d04:	200001ac 	.word	0x200001ac
 8003d08:	08003c79 	.word	0x08003c79

08003d0c <__sfp_lock_acquire>:
 8003d0c:	4801      	ldr	r0, [pc, #4]	; (8003d14 <__sfp_lock_acquire+0x8>)
 8003d0e:	f000 b90e 	b.w	8003f2e <__retarget_lock_acquire_recursive>
 8003d12:	bf00      	nop
 8003d14:	200002ed 	.word	0x200002ed

08003d18 <__sfp_lock_release>:
 8003d18:	4801      	ldr	r0, [pc, #4]	; (8003d20 <__sfp_lock_release+0x8>)
 8003d1a:	f000 b909 	b.w	8003f30 <__retarget_lock_release_recursive>
 8003d1e:	bf00      	nop
 8003d20:	200002ed 	.word	0x200002ed

08003d24 <__sinit>:
 8003d24:	b510      	push	{r4, lr}
 8003d26:	4604      	mov	r4, r0
 8003d28:	f7ff fff0 	bl	8003d0c <__sfp_lock_acquire>
 8003d2c:	6a23      	ldr	r3, [r4, #32]
 8003d2e:	b11b      	cbz	r3, 8003d38 <__sinit+0x14>
 8003d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d34:	f7ff bff0 	b.w	8003d18 <__sfp_lock_release>
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <__sinit+0x28>)
 8003d3a:	6223      	str	r3, [r4, #32]
 8003d3c:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <__sinit+0x2c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1f5      	bne.n	8003d30 <__sinit+0xc>
 8003d44:	f7ff ffc4 	bl	8003cd0 <global_stdio_init.part.0>
 8003d48:	e7f2      	b.n	8003d30 <__sinit+0xc>
 8003d4a:	bf00      	nop
 8003d4c:	08003c91 	.word	0x08003c91
 8003d50:	200002e4 	.word	0x200002e4

08003d54 <_fwalk_sglue>:
 8003d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d58:	4607      	mov	r7, r0
 8003d5a:	4688      	mov	r8, r1
 8003d5c:	4614      	mov	r4, r2
 8003d5e:	2600      	movs	r6, #0
 8003d60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d64:	f1b9 0901 	subs.w	r9, r9, #1
 8003d68:	d505      	bpl.n	8003d76 <_fwalk_sglue+0x22>
 8003d6a:	6824      	ldr	r4, [r4, #0]
 8003d6c:	2c00      	cmp	r4, #0
 8003d6e:	d1f7      	bne.n	8003d60 <_fwalk_sglue+0xc>
 8003d70:	4630      	mov	r0, r6
 8003d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d76:	89ab      	ldrh	r3, [r5, #12]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d907      	bls.n	8003d8c <_fwalk_sglue+0x38>
 8003d7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d80:	3301      	adds	r3, #1
 8003d82:	d003      	beq.n	8003d8c <_fwalk_sglue+0x38>
 8003d84:	4629      	mov	r1, r5
 8003d86:	4638      	mov	r0, r7
 8003d88:	47c0      	blx	r8
 8003d8a:	4306      	orrs	r6, r0
 8003d8c:	3568      	adds	r5, #104	; 0x68
 8003d8e:	e7e9      	b.n	8003d64 <_fwalk_sglue+0x10>

08003d90 <iprintf>:
 8003d90:	b40f      	push	{r0, r1, r2, r3}
 8003d92:	b507      	push	{r0, r1, r2, lr}
 8003d94:	4906      	ldr	r1, [pc, #24]	; (8003db0 <iprintf+0x20>)
 8003d96:	ab04      	add	r3, sp, #16
 8003d98:	6808      	ldr	r0, [r1, #0]
 8003d9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d9e:	6881      	ldr	r1, [r0, #8]
 8003da0:	9301      	str	r3, [sp, #4]
 8003da2:	f000 f9e9 	bl	8004178 <_vfiprintf_r>
 8003da6:	b003      	add	sp, #12
 8003da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dac:	b004      	add	sp, #16
 8003dae:	4770      	bx	lr
 8003db0:	20000064 	.word	0x20000064

08003db4 <__sread>:
 8003db4:	b510      	push	{r4, lr}
 8003db6:	460c      	mov	r4, r1
 8003db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dbc:	f000 f868 	bl	8003e90 <_read_r>
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	bfab      	itete	ge
 8003dc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003dc6:	89a3      	ldrhlt	r3, [r4, #12]
 8003dc8:	181b      	addge	r3, r3, r0
 8003dca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003dce:	bfac      	ite	ge
 8003dd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003dd2:	81a3      	strhlt	r3, [r4, #12]
 8003dd4:	bd10      	pop	{r4, pc}

08003dd6 <__swrite>:
 8003dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dda:	461f      	mov	r7, r3
 8003ddc:	898b      	ldrh	r3, [r1, #12]
 8003dde:	05db      	lsls	r3, r3, #23
 8003de0:	4605      	mov	r5, r0
 8003de2:	460c      	mov	r4, r1
 8003de4:	4616      	mov	r6, r2
 8003de6:	d505      	bpl.n	8003df4 <__swrite+0x1e>
 8003de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dec:	2302      	movs	r3, #2
 8003dee:	2200      	movs	r2, #0
 8003df0:	f000 f83c 	bl	8003e6c <_lseek_r>
 8003df4:	89a3      	ldrh	r3, [r4, #12]
 8003df6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dfe:	81a3      	strh	r3, [r4, #12]
 8003e00:	4632      	mov	r2, r6
 8003e02:	463b      	mov	r3, r7
 8003e04:	4628      	mov	r0, r5
 8003e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e0a:	f000 b853 	b.w	8003eb4 <_write_r>

08003e0e <__sseek>:
 8003e0e:	b510      	push	{r4, lr}
 8003e10:	460c      	mov	r4, r1
 8003e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e16:	f000 f829 	bl	8003e6c <_lseek_r>
 8003e1a:	1c43      	adds	r3, r0, #1
 8003e1c:	89a3      	ldrh	r3, [r4, #12]
 8003e1e:	bf15      	itete	ne
 8003e20:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e2a:	81a3      	strheq	r3, [r4, #12]
 8003e2c:	bf18      	it	ne
 8003e2e:	81a3      	strhne	r3, [r4, #12]
 8003e30:	bd10      	pop	{r4, pc}

08003e32 <__sclose>:
 8003e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e36:	f000 b809 	b.w	8003e4c <_close_r>

08003e3a <memset>:
 8003e3a:	4402      	add	r2, r0
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d100      	bne.n	8003e44 <memset+0xa>
 8003e42:	4770      	bx	lr
 8003e44:	f803 1b01 	strb.w	r1, [r3], #1
 8003e48:	e7f9      	b.n	8003e3e <memset+0x4>
	...

08003e4c <_close_r>:
 8003e4c:	b538      	push	{r3, r4, r5, lr}
 8003e4e:	4d06      	ldr	r5, [pc, #24]	; (8003e68 <_close_r+0x1c>)
 8003e50:	2300      	movs	r3, #0
 8003e52:	4604      	mov	r4, r0
 8003e54:	4608      	mov	r0, r1
 8003e56:	602b      	str	r3, [r5, #0]
 8003e58:	f7fc ff3d 	bl	8000cd6 <_close>
 8003e5c:	1c43      	adds	r3, r0, #1
 8003e5e:	d102      	bne.n	8003e66 <_close_r+0x1a>
 8003e60:	682b      	ldr	r3, [r5, #0]
 8003e62:	b103      	cbz	r3, 8003e66 <_close_r+0x1a>
 8003e64:	6023      	str	r3, [r4, #0]
 8003e66:	bd38      	pop	{r3, r4, r5, pc}
 8003e68:	200002e8 	.word	0x200002e8

08003e6c <_lseek_r>:
 8003e6c:	b538      	push	{r3, r4, r5, lr}
 8003e6e:	4d07      	ldr	r5, [pc, #28]	; (8003e8c <_lseek_r+0x20>)
 8003e70:	4604      	mov	r4, r0
 8003e72:	4608      	mov	r0, r1
 8003e74:	4611      	mov	r1, r2
 8003e76:	2200      	movs	r2, #0
 8003e78:	602a      	str	r2, [r5, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f7fc ff52 	bl	8000d24 <_lseek>
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	d102      	bne.n	8003e8a <_lseek_r+0x1e>
 8003e84:	682b      	ldr	r3, [r5, #0]
 8003e86:	b103      	cbz	r3, 8003e8a <_lseek_r+0x1e>
 8003e88:	6023      	str	r3, [r4, #0]
 8003e8a:	bd38      	pop	{r3, r4, r5, pc}
 8003e8c:	200002e8 	.word	0x200002e8

08003e90 <_read_r>:
 8003e90:	b538      	push	{r3, r4, r5, lr}
 8003e92:	4d07      	ldr	r5, [pc, #28]	; (8003eb0 <_read_r+0x20>)
 8003e94:	4604      	mov	r4, r0
 8003e96:	4608      	mov	r0, r1
 8003e98:	4611      	mov	r1, r2
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	602a      	str	r2, [r5, #0]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f7fc fee0 	bl	8000c64 <_read>
 8003ea4:	1c43      	adds	r3, r0, #1
 8003ea6:	d102      	bne.n	8003eae <_read_r+0x1e>
 8003ea8:	682b      	ldr	r3, [r5, #0]
 8003eaa:	b103      	cbz	r3, 8003eae <_read_r+0x1e>
 8003eac:	6023      	str	r3, [r4, #0]
 8003eae:	bd38      	pop	{r3, r4, r5, pc}
 8003eb0:	200002e8 	.word	0x200002e8

08003eb4 <_write_r>:
 8003eb4:	b538      	push	{r3, r4, r5, lr}
 8003eb6:	4d07      	ldr	r5, [pc, #28]	; (8003ed4 <_write_r+0x20>)
 8003eb8:	4604      	mov	r4, r0
 8003eba:	4608      	mov	r0, r1
 8003ebc:	4611      	mov	r1, r2
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	602a      	str	r2, [r5, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f7fc feeb 	bl	8000c9e <_write>
 8003ec8:	1c43      	adds	r3, r0, #1
 8003eca:	d102      	bne.n	8003ed2 <_write_r+0x1e>
 8003ecc:	682b      	ldr	r3, [r5, #0]
 8003ece:	b103      	cbz	r3, 8003ed2 <_write_r+0x1e>
 8003ed0:	6023      	str	r3, [r4, #0]
 8003ed2:	bd38      	pop	{r3, r4, r5, pc}
 8003ed4:	200002e8 	.word	0x200002e8

08003ed8 <__errno>:
 8003ed8:	4b01      	ldr	r3, [pc, #4]	; (8003ee0 <__errno+0x8>)
 8003eda:	6818      	ldr	r0, [r3, #0]
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	20000064 	.word	0x20000064

08003ee4 <__libc_init_array>:
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	4d0d      	ldr	r5, [pc, #52]	; (8003f1c <__libc_init_array+0x38>)
 8003ee8:	4c0d      	ldr	r4, [pc, #52]	; (8003f20 <__libc_init_array+0x3c>)
 8003eea:	1b64      	subs	r4, r4, r5
 8003eec:	10a4      	asrs	r4, r4, #2
 8003eee:	2600      	movs	r6, #0
 8003ef0:	42a6      	cmp	r6, r4
 8003ef2:	d109      	bne.n	8003f08 <__libc_init_array+0x24>
 8003ef4:	4d0b      	ldr	r5, [pc, #44]	; (8003f24 <__libc_init_array+0x40>)
 8003ef6:	4c0c      	ldr	r4, [pc, #48]	; (8003f28 <__libc_init_array+0x44>)
 8003ef8:	f000 fdc0 	bl	8004a7c <_init>
 8003efc:	1b64      	subs	r4, r4, r5
 8003efe:	10a4      	asrs	r4, r4, #2
 8003f00:	2600      	movs	r6, #0
 8003f02:	42a6      	cmp	r6, r4
 8003f04:	d105      	bne.n	8003f12 <__libc_init_array+0x2e>
 8003f06:	bd70      	pop	{r4, r5, r6, pc}
 8003f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f0c:	4798      	blx	r3
 8003f0e:	3601      	adds	r6, #1
 8003f10:	e7ee      	b.n	8003ef0 <__libc_init_array+0xc>
 8003f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f16:	4798      	blx	r3
 8003f18:	3601      	adds	r6, #1
 8003f1a:	e7f2      	b.n	8003f02 <__libc_init_array+0x1e>
 8003f1c:	08004c60 	.word	0x08004c60
 8003f20:	08004c60 	.word	0x08004c60
 8003f24:	08004c60 	.word	0x08004c60
 8003f28:	08004c64 	.word	0x08004c64

08003f2c <__retarget_lock_init_recursive>:
 8003f2c:	4770      	bx	lr

08003f2e <__retarget_lock_acquire_recursive>:
 8003f2e:	4770      	bx	lr

08003f30 <__retarget_lock_release_recursive>:
 8003f30:	4770      	bx	lr
	...

08003f34 <_free_r>:
 8003f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f36:	2900      	cmp	r1, #0
 8003f38:	d044      	beq.n	8003fc4 <_free_r+0x90>
 8003f3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f3e:	9001      	str	r0, [sp, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f1a1 0404 	sub.w	r4, r1, #4
 8003f46:	bfb8      	it	lt
 8003f48:	18e4      	addlt	r4, r4, r3
 8003f4a:	f000 f8df 	bl	800410c <__malloc_lock>
 8003f4e:	4a1e      	ldr	r2, [pc, #120]	; (8003fc8 <_free_r+0x94>)
 8003f50:	9801      	ldr	r0, [sp, #4]
 8003f52:	6813      	ldr	r3, [r2, #0]
 8003f54:	b933      	cbnz	r3, 8003f64 <_free_r+0x30>
 8003f56:	6063      	str	r3, [r4, #4]
 8003f58:	6014      	str	r4, [r2, #0]
 8003f5a:	b003      	add	sp, #12
 8003f5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f60:	f000 b8da 	b.w	8004118 <__malloc_unlock>
 8003f64:	42a3      	cmp	r3, r4
 8003f66:	d908      	bls.n	8003f7a <_free_r+0x46>
 8003f68:	6825      	ldr	r5, [r4, #0]
 8003f6a:	1961      	adds	r1, r4, r5
 8003f6c:	428b      	cmp	r3, r1
 8003f6e:	bf01      	itttt	eq
 8003f70:	6819      	ldreq	r1, [r3, #0]
 8003f72:	685b      	ldreq	r3, [r3, #4]
 8003f74:	1949      	addeq	r1, r1, r5
 8003f76:	6021      	streq	r1, [r4, #0]
 8003f78:	e7ed      	b.n	8003f56 <_free_r+0x22>
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	b10b      	cbz	r3, 8003f84 <_free_r+0x50>
 8003f80:	42a3      	cmp	r3, r4
 8003f82:	d9fa      	bls.n	8003f7a <_free_r+0x46>
 8003f84:	6811      	ldr	r1, [r2, #0]
 8003f86:	1855      	adds	r5, r2, r1
 8003f88:	42a5      	cmp	r5, r4
 8003f8a:	d10b      	bne.n	8003fa4 <_free_r+0x70>
 8003f8c:	6824      	ldr	r4, [r4, #0]
 8003f8e:	4421      	add	r1, r4
 8003f90:	1854      	adds	r4, r2, r1
 8003f92:	42a3      	cmp	r3, r4
 8003f94:	6011      	str	r1, [r2, #0]
 8003f96:	d1e0      	bne.n	8003f5a <_free_r+0x26>
 8003f98:	681c      	ldr	r4, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	6053      	str	r3, [r2, #4]
 8003f9e:	440c      	add	r4, r1
 8003fa0:	6014      	str	r4, [r2, #0]
 8003fa2:	e7da      	b.n	8003f5a <_free_r+0x26>
 8003fa4:	d902      	bls.n	8003fac <_free_r+0x78>
 8003fa6:	230c      	movs	r3, #12
 8003fa8:	6003      	str	r3, [r0, #0]
 8003faa:	e7d6      	b.n	8003f5a <_free_r+0x26>
 8003fac:	6825      	ldr	r5, [r4, #0]
 8003fae:	1961      	adds	r1, r4, r5
 8003fb0:	428b      	cmp	r3, r1
 8003fb2:	bf04      	itt	eq
 8003fb4:	6819      	ldreq	r1, [r3, #0]
 8003fb6:	685b      	ldreq	r3, [r3, #4]
 8003fb8:	6063      	str	r3, [r4, #4]
 8003fba:	bf04      	itt	eq
 8003fbc:	1949      	addeq	r1, r1, r5
 8003fbe:	6021      	streq	r1, [r4, #0]
 8003fc0:	6054      	str	r4, [r2, #4]
 8003fc2:	e7ca      	b.n	8003f5a <_free_r+0x26>
 8003fc4:	b003      	add	sp, #12
 8003fc6:	bd30      	pop	{r4, r5, pc}
 8003fc8:	200002f0 	.word	0x200002f0

08003fcc <sbrk_aligned>:
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	4e0e      	ldr	r6, [pc, #56]	; (8004008 <sbrk_aligned+0x3c>)
 8003fd0:	460c      	mov	r4, r1
 8003fd2:	6831      	ldr	r1, [r6, #0]
 8003fd4:	4605      	mov	r5, r0
 8003fd6:	b911      	cbnz	r1, 8003fde <sbrk_aligned+0x12>
 8003fd8:	f000 fcbc 	bl	8004954 <_sbrk_r>
 8003fdc:	6030      	str	r0, [r6, #0]
 8003fde:	4621      	mov	r1, r4
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f000 fcb7 	bl	8004954 <_sbrk_r>
 8003fe6:	1c43      	adds	r3, r0, #1
 8003fe8:	d00a      	beq.n	8004000 <sbrk_aligned+0x34>
 8003fea:	1cc4      	adds	r4, r0, #3
 8003fec:	f024 0403 	bic.w	r4, r4, #3
 8003ff0:	42a0      	cmp	r0, r4
 8003ff2:	d007      	beq.n	8004004 <sbrk_aligned+0x38>
 8003ff4:	1a21      	subs	r1, r4, r0
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	f000 fcac 	bl	8004954 <_sbrk_r>
 8003ffc:	3001      	adds	r0, #1
 8003ffe:	d101      	bne.n	8004004 <sbrk_aligned+0x38>
 8004000:	f04f 34ff 	mov.w	r4, #4294967295
 8004004:	4620      	mov	r0, r4
 8004006:	bd70      	pop	{r4, r5, r6, pc}
 8004008:	200002f4 	.word	0x200002f4

0800400c <_malloc_r>:
 800400c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004010:	1ccd      	adds	r5, r1, #3
 8004012:	f025 0503 	bic.w	r5, r5, #3
 8004016:	3508      	adds	r5, #8
 8004018:	2d0c      	cmp	r5, #12
 800401a:	bf38      	it	cc
 800401c:	250c      	movcc	r5, #12
 800401e:	2d00      	cmp	r5, #0
 8004020:	4607      	mov	r7, r0
 8004022:	db01      	blt.n	8004028 <_malloc_r+0x1c>
 8004024:	42a9      	cmp	r1, r5
 8004026:	d905      	bls.n	8004034 <_malloc_r+0x28>
 8004028:	230c      	movs	r3, #12
 800402a:	603b      	str	r3, [r7, #0]
 800402c:	2600      	movs	r6, #0
 800402e:	4630      	mov	r0, r6
 8004030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004034:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004108 <_malloc_r+0xfc>
 8004038:	f000 f868 	bl	800410c <__malloc_lock>
 800403c:	f8d8 3000 	ldr.w	r3, [r8]
 8004040:	461c      	mov	r4, r3
 8004042:	bb5c      	cbnz	r4, 800409c <_malloc_r+0x90>
 8004044:	4629      	mov	r1, r5
 8004046:	4638      	mov	r0, r7
 8004048:	f7ff ffc0 	bl	8003fcc <sbrk_aligned>
 800404c:	1c43      	adds	r3, r0, #1
 800404e:	4604      	mov	r4, r0
 8004050:	d155      	bne.n	80040fe <_malloc_r+0xf2>
 8004052:	f8d8 4000 	ldr.w	r4, [r8]
 8004056:	4626      	mov	r6, r4
 8004058:	2e00      	cmp	r6, #0
 800405a:	d145      	bne.n	80040e8 <_malloc_r+0xdc>
 800405c:	2c00      	cmp	r4, #0
 800405e:	d048      	beq.n	80040f2 <_malloc_r+0xe6>
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	4631      	mov	r1, r6
 8004064:	4638      	mov	r0, r7
 8004066:	eb04 0903 	add.w	r9, r4, r3
 800406a:	f000 fc73 	bl	8004954 <_sbrk_r>
 800406e:	4581      	cmp	r9, r0
 8004070:	d13f      	bne.n	80040f2 <_malloc_r+0xe6>
 8004072:	6821      	ldr	r1, [r4, #0]
 8004074:	1a6d      	subs	r5, r5, r1
 8004076:	4629      	mov	r1, r5
 8004078:	4638      	mov	r0, r7
 800407a:	f7ff ffa7 	bl	8003fcc <sbrk_aligned>
 800407e:	3001      	adds	r0, #1
 8004080:	d037      	beq.n	80040f2 <_malloc_r+0xe6>
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	442b      	add	r3, r5
 8004086:	6023      	str	r3, [r4, #0]
 8004088:	f8d8 3000 	ldr.w	r3, [r8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d038      	beq.n	8004102 <_malloc_r+0xf6>
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	42a2      	cmp	r2, r4
 8004094:	d12b      	bne.n	80040ee <_malloc_r+0xe2>
 8004096:	2200      	movs	r2, #0
 8004098:	605a      	str	r2, [r3, #4]
 800409a:	e00f      	b.n	80040bc <_malloc_r+0xb0>
 800409c:	6822      	ldr	r2, [r4, #0]
 800409e:	1b52      	subs	r2, r2, r5
 80040a0:	d41f      	bmi.n	80040e2 <_malloc_r+0xd6>
 80040a2:	2a0b      	cmp	r2, #11
 80040a4:	d917      	bls.n	80040d6 <_malloc_r+0xca>
 80040a6:	1961      	adds	r1, r4, r5
 80040a8:	42a3      	cmp	r3, r4
 80040aa:	6025      	str	r5, [r4, #0]
 80040ac:	bf18      	it	ne
 80040ae:	6059      	strne	r1, [r3, #4]
 80040b0:	6863      	ldr	r3, [r4, #4]
 80040b2:	bf08      	it	eq
 80040b4:	f8c8 1000 	streq.w	r1, [r8]
 80040b8:	5162      	str	r2, [r4, r5]
 80040ba:	604b      	str	r3, [r1, #4]
 80040bc:	4638      	mov	r0, r7
 80040be:	f104 060b 	add.w	r6, r4, #11
 80040c2:	f000 f829 	bl	8004118 <__malloc_unlock>
 80040c6:	f026 0607 	bic.w	r6, r6, #7
 80040ca:	1d23      	adds	r3, r4, #4
 80040cc:	1af2      	subs	r2, r6, r3
 80040ce:	d0ae      	beq.n	800402e <_malloc_r+0x22>
 80040d0:	1b9b      	subs	r3, r3, r6
 80040d2:	50a3      	str	r3, [r4, r2]
 80040d4:	e7ab      	b.n	800402e <_malloc_r+0x22>
 80040d6:	42a3      	cmp	r3, r4
 80040d8:	6862      	ldr	r2, [r4, #4]
 80040da:	d1dd      	bne.n	8004098 <_malloc_r+0x8c>
 80040dc:	f8c8 2000 	str.w	r2, [r8]
 80040e0:	e7ec      	b.n	80040bc <_malloc_r+0xb0>
 80040e2:	4623      	mov	r3, r4
 80040e4:	6864      	ldr	r4, [r4, #4]
 80040e6:	e7ac      	b.n	8004042 <_malloc_r+0x36>
 80040e8:	4634      	mov	r4, r6
 80040ea:	6876      	ldr	r6, [r6, #4]
 80040ec:	e7b4      	b.n	8004058 <_malloc_r+0x4c>
 80040ee:	4613      	mov	r3, r2
 80040f0:	e7cc      	b.n	800408c <_malloc_r+0x80>
 80040f2:	230c      	movs	r3, #12
 80040f4:	603b      	str	r3, [r7, #0]
 80040f6:	4638      	mov	r0, r7
 80040f8:	f000 f80e 	bl	8004118 <__malloc_unlock>
 80040fc:	e797      	b.n	800402e <_malloc_r+0x22>
 80040fe:	6025      	str	r5, [r4, #0]
 8004100:	e7dc      	b.n	80040bc <_malloc_r+0xb0>
 8004102:	605b      	str	r3, [r3, #4]
 8004104:	deff      	udf	#255	; 0xff
 8004106:	bf00      	nop
 8004108:	200002f0 	.word	0x200002f0

0800410c <__malloc_lock>:
 800410c:	4801      	ldr	r0, [pc, #4]	; (8004114 <__malloc_lock+0x8>)
 800410e:	f7ff bf0e 	b.w	8003f2e <__retarget_lock_acquire_recursive>
 8004112:	bf00      	nop
 8004114:	200002ec 	.word	0x200002ec

08004118 <__malloc_unlock>:
 8004118:	4801      	ldr	r0, [pc, #4]	; (8004120 <__malloc_unlock+0x8>)
 800411a:	f7ff bf09 	b.w	8003f30 <__retarget_lock_release_recursive>
 800411e:	bf00      	nop
 8004120:	200002ec 	.word	0x200002ec

08004124 <__sfputc_r>:
 8004124:	6893      	ldr	r3, [r2, #8]
 8004126:	3b01      	subs	r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	b410      	push	{r4}
 800412c:	6093      	str	r3, [r2, #8]
 800412e:	da08      	bge.n	8004142 <__sfputc_r+0x1e>
 8004130:	6994      	ldr	r4, [r2, #24]
 8004132:	42a3      	cmp	r3, r4
 8004134:	db01      	blt.n	800413a <__sfputc_r+0x16>
 8004136:	290a      	cmp	r1, #10
 8004138:	d103      	bne.n	8004142 <__sfputc_r+0x1e>
 800413a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800413e:	f000 bb73 	b.w	8004828 <__swbuf_r>
 8004142:	6813      	ldr	r3, [r2, #0]
 8004144:	1c58      	adds	r0, r3, #1
 8004146:	6010      	str	r0, [r2, #0]
 8004148:	7019      	strb	r1, [r3, #0]
 800414a:	4608      	mov	r0, r1
 800414c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004150:	4770      	bx	lr

08004152 <__sfputs_r>:
 8004152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004154:	4606      	mov	r6, r0
 8004156:	460f      	mov	r7, r1
 8004158:	4614      	mov	r4, r2
 800415a:	18d5      	adds	r5, r2, r3
 800415c:	42ac      	cmp	r4, r5
 800415e:	d101      	bne.n	8004164 <__sfputs_r+0x12>
 8004160:	2000      	movs	r0, #0
 8004162:	e007      	b.n	8004174 <__sfputs_r+0x22>
 8004164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004168:	463a      	mov	r2, r7
 800416a:	4630      	mov	r0, r6
 800416c:	f7ff ffda 	bl	8004124 <__sfputc_r>
 8004170:	1c43      	adds	r3, r0, #1
 8004172:	d1f3      	bne.n	800415c <__sfputs_r+0xa>
 8004174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004178 <_vfiprintf_r>:
 8004178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800417c:	460d      	mov	r5, r1
 800417e:	b09d      	sub	sp, #116	; 0x74
 8004180:	4614      	mov	r4, r2
 8004182:	4698      	mov	r8, r3
 8004184:	4606      	mov	r6, r0
 8004186:	b118      	cbz	r0, 8004190 <_vfiprintf_r+0x18>
 8004188:	6a03      	ldr	r3, [r0, #32]
 800418a:	b90b      	cbnz	r3, 8004190 <_vfiprintf_r+0x18>
 800418c:	f7ff fdca 	bl	8003d24 <__sinit>
 8004190:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004192:	07d9      	lsls	r1, r3, #31
 8004194:	d405      	bmi.n	80041a2 <_vfiprintf_r+0x2a>
 8004196:	89ab      	ldrh	r3, [r5, #12]
 8004198:	059a      	lsls	r2, r3, #22
 800419a:	d402      	bmi.n	80041a2 <_vfiprintf_r+0x2a>
 800419c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800419e:	f7ff fec6 	bl	8003f2e <__retarget_lock_acquire_recursive>
 80041a2:	89ab      	ldrh	r3, [r5, #12]
 80041a4:	071b      	lsls	r3, r3, #28
 80041a6:	d501      	bpl.n	80041ac <_vfiprintf_r+0x34>
 80041a8:	692b      	ldr	r3, [r5, #16]
 80041aa:	b99b      	cbnz	r3, 80041d4 <_vfiprintf_r+0x5c>
 80041ac:	4629      	mov	r1, r5
 80041ae:	4630      	mov	r0, r6
 80041b0:	f000 fb78 	bl	80048a4 <__swsetup_r>
 80041b4:	b170      	cbz	r0, 80041d4 <_vfiprintf_r+0x5c>
 80041b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041b8:	07dc      	lsls	r4, r3, #31
 80041ba:	d504      	bpl.n	80041c6 <_vfiprintf_r+0x4e>
 80041bc:	f04f 30ff 	mov.w	r0, #4294967295
 80041c0:	b01d      	add	sp, #116	; 0x74
 80041c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c6:	89ab      	ldrh	r3, [r5, #12]
 80041c8:	0598      	lsls	r0, r3, #22
 80041ca:	d4f7      	bmi.n	80041bc <_vfiprintf_r+0x44>
 80041cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041ce:	f7ff feaf 	bl	8003f30 <__retarget_lock_release_recursive>
 80041d2:	e7f3      	b.n	80041bc <_vfiprintf_r+0x44>
 80041d4:	2300      	movs	r3, #0
 80041d6:	9309      	str	r3, [sp, #36]	; 0x24
 80041d8:	2320      	movs	r3, #32
 80041da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041de:	f8cd 800c 	str.w	r8, [sp, #12]
 80041e2:	2330      	movs	r3, #48	; 0x30
 80041e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004398 <_vfiprintf_r+0x220>
 80041e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041ec:	f04f 0901 	mov.w	r9, #1
 80041f0:	4623      	mov	r3, r4
 80041f2:	469a      	mov	sl, r3
 80041f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041f8:	b10a      	cbz	r2, 80041fe <_vfiprintf_r+0x86>
 80041fa:	2a25      	cmp	r2, #37	; 0x25
 80041fc:	d1f9      	bne.n	80041f2 <_vfiprintf_r+0x7a>
 80041fe:	ebba 0b04 	subs.w	fp, sl, r4
 8004202:	d00b      	beq.n	800421c <_vfiprintf_r+0xa4>
 8004204:	465b      	mov	r3, fp
 8004206:	4622      	mov	r2, r4
 8004208:	4629      	mov	r1, r5
 800420a:	4630      	mov	r0, r6
 800420c:	f7ff ffa1 	bl	8004152 <__sfputs_r>
 8004210:	3001      	adds	r0, #1
 8004212:	f000 80a9 	beq.w	8004368 <_vfiprintf_r+0x1f0>
 8004216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004218:	445a      	add	r2, fp
 800421a:	9209      	str	r2, [sp, #36]	; 0x24
 800421c:	f89a 3000 	ldrb.w	r3, [sl]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80a1 	beq.w	8004368 <_vfiprintf_r+0x1f0>
 8004226:	2300      	movs	r3, #0
 8004228:	f04f 32ff 	mov.w	r2, #4294967295
 800422c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004230:	f10a 0a01 	add.w	sl, sl, #1
 8004234:	9304      	str	r3, [sp, #16]
 8004236:	9307      	str	r3, [sp, #28]
 8004238:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800423c:	931a      	str	r3, [sp, #104]	; 0x68
 800423e:	4654      	mov	r4, sl
 8004240:	2205      	movs	r2, #5
 8004242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004246:	4854      	ldr	r0, [pc, #336]	; (8004398 <_vfiprintf_r+0x220>)
 8004248:	f7fb ffc2 	bl	80001d0 <memchr>
 800424c:	9a04      	ldr	r2, [sp, #16]
 800424e:	b9d8      	cbnz	r0, 8004288 <_vfiprintf_r+0x110>
 8004250:	06d1      	lsls	r1, r2, #27
 8004252:	bf44      	itt	mi
 8004254:	2320      	movmi	r3, #32
 8004256:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800425a:	0713      	lsls	r3, r2, #28
 800425c:	bf44      	itt	mi
 800425e:	232b      	movmi	r3, #43	; 0x2b
 8004260:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004264:	f89a 3000 	ldrb.w	r3, [sl]
 8004268:	2b2a      	cmp	r3, #42	; 0x2a
 800426a:	d015      	beq.n	8004298 <_vfiprintf_r+0x120>
 800426c:	9a07      	ldr	r2, [sp, #28]
 800426e:	4654      	mov	r4, sl
 8004270:	2000      	movs	r0, #0
 8004272:	f04f 0c0a 	mov.w	ip, #10
 8004276:	4621      	mov	r1, r4
 8004278:	f811 3b01 	ldrb.w	r3, [r1], #1
 800427c:	3b30      	subs	r3, #48	; 0x30
 800427e:	2b09      	cmp	r3, #9
 8004280:	d94d      	bls.n	800431e <_vfiprintf_r+0x1a6>
 8004282:	b1b0      	cbz	r0, 80042b2 <_vfiprintf_r+0x13a>
 8004284:	9207      	str	r2, [sp, #28]
 8004286:	e014      	b.n	80042b2 <_vfiprintf_r+0x13a>
 8004288:	eba0 0308 	sub.w	r3, r0, r8
 800428c:	fa09 f303 	lsl.w	r3, r9, r3
 8004290:	4313      	orrs	r3, r2
 8004292:	9304      	str	r3, [sp, #16]
 8004294:	46a2      	mov	sl, r4
 8004296:	e7d2      	b.n	800423e <_vfiprintf_r+0xc6>
 8004298:	9b03      	ldr	r3, [sp, #12]
 800429a:	1d19      	adds	r1, r3, #4
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	9103      	str	r1, [sp, #12]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	bfbb      	ittet	lt
 80042a4:	425b      	neglt	r3, r3
 80042a6:	f042 0202 	orrlt.w	r2, r2, #2
 80042aa:	9307      	strge	r3, [sp, #28]
 80042ac:	9307      	strlt	r3, [sp, #28]
 80042ae:	bfb8      	it	lt
 80042b0:	9204      	strlt	r2, [sp, #16]
 80042b2:	7823      	ldrb	r3, [r4, #0]
 80042b4:	2b2e      	cmp	r3, #46	; 0x2e
 80042b6:	d10c      	bne.n	80042d2 <_vfiprintf_r+0x15a>
 80042b8:	7863      	ldrb	r3, [r4, #1]
 80042ba:	2b2a      	cmp	r3, #42	; 0x2a
 80042bc:	d134      	bne.n	8004328 <_vfiprintf_r+0x1b0>
 80042be:	9b03      	ldr	r3, [sp, #12]
 80042c0:	1d1a      	adds	r2, r3, #4
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	9203      	str	r2, [sp, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	bfb8      	it	lt
 80042ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80042ce:	3402      	adds	r4, #2
 80042d0:	9305      	str	r3, [sp, #20]
 80042d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80043a8 <_vfiprintf_r+0x230>
 80042d6:	7821      	ldrb	r1, [r4, #0]
 80042d8:	2203      	movs	r2, #3
 80042da:	4650      	mov	r0, sl
 80042dc:	f7fb ff78 	bl	80001d0 <memchr>
 80042e0:	b138      	cbz	r0, 80042f2 <_vfiprintf_r+0x17a>
 80042e2:	9b04      	ldr	r3, [sp, #16]
 80042e4:	eba0 000a 	sub.w	r0, r0, sl
 80042e8:	2240      	movs	r2, #64	; 0x40
 80042ea:	4082      	lsls	r2, r0
 80042ec:	4313      	orrs	r3, r2
 80042ee:	3401      	adds	r4, #1
 80042f0:	9304      	str	r3, [sp, #16]
 80042f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042f6:	4829      	ldr	r0, [pc, #164]	; (800439c <_vfiprintf_r+0x224>)
 80042f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042fc:	2206      	movs	r2, #6
 80042fe:	f7fb ff67 	bl	80001d0 <memchr>
 8004302:	2800      	cmp	r0, #0
 8004304:	d03f      	beq.n	8004386 <_vfiprintf_r+0x20e>
 8004306:	4b26      	ldr	r3, [pc, #152]	; (80043a0 <_vfiprintf_r+0x228>)
 8004308:	bb1b      	cbnz	r3, 8004352 <_vfiprintf_r+0x1da>
 800430a:	9b03      	ldr	r3, [sp, #12]
 800430c:	3307      	adds	r3, #7
 800430e:	f023 0307 	bic.w	r3, r3, #7
 8004312:	3308      	adds	r3, #8
 8004314:	9303      	str	r3, [sp, #12]
 8004316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004318:	443b      	add	r3, r7
 800431a:	9309      	str	r3, [sp, #36]	; 0x24
 800431c:	e768      	b.n	80041f0 <_vfiprintf_r+0x78>
 800431e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004322:	460c      	mov	r4, r1
 8004324:	2001      	movs	r0, #1
 8004326:	e7a6      	b.n	8004276 <_vfiprintf_r+0xfe>
 8004328:	2300      	movs	r3, #0
 800432a:	3401      	adds	r4, #1
 800432c:	9305      	str	r3, [sp, #20]
 800432e:	4619      	mov	r1, r3
 8004330:	f04f 0c0a 	mov.w	ip, #10
 8004334:	4620      	mov	r0, r4
 8004336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800433a:	3a30      	subs	r2, #48	; 0x30
 800433c:	2a09      	cmp	r2, #9
 800433e:	d903      	bls.n	8004348 <_vfiprintf_r+0x1d0>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0c6      	beq.n	80042d2 <_vfiprintf_r+0x15a>
 8004344:	9105      	str	r1, [sp, #20]
 8004346:	e7c4      	b.n	80042d2 <_vfiprintf_r+0x15a>
 8004348:	fb0c 2101 	mla	r1, ip, r1, r2
 800434c:	4604      	mov	r4, r0
 800434e:	2301      	movs	r3, #1
 8004350:	e7f0      	b.n	8004334 <_vfiprintf_r+0x1bc>
 8004352:	ab03      	add	r3, sp, #12
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	462a      	mov	r2, r5
 8004358:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <_vfiprintf_r+0x22c>)
 800435a:	a904      	add	r1, sp, #16
 800435c:	4630      	mov	r0, r6
 800435e:	f3af 8000 	nop.w
 8004362:	4607      	mov	r7, r0
 8004364:	1c78      	adds	r0, r7, #1
 8004366:	d1d6      	bne.n	8004316 <_vfiprintf_r+0x19e>
 8004368:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800436a:	07d9      	lsls	r1, r3, #31
 800436c:	d405      	bmi.n	800437a <_vfiprintf_r+0x202>
 800436e:	89ab      	ldrh	r3, [r5, #12]
 8004370:	059a      	lsls	r2, r3, #22
 8004372:	d402      	bmi.n	800437a <_vfiprintf_r+0x202>
 8004374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004376:	f7ff fddb 	bl	8003f30 <__retarget_lock_release_recursive>
 800437a:	89ab      	ldrh	r3, [r5, #12]
 800437c:	065b      	lsls	r3, r3, #25
 800437e:	f53f af1d 	bmi.w	80041bc <_vfiprintf_r+0x44>
 8004382:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004384:	e71c      	b.n	80041c0 <_vfiprintf_r+0x48>
 8004386:	ab03      	add	r3, sp, #12
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	462a      	mov	r2, r5
 800438c:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <_vfiprintf_r+0x22c>)
 800438e:	a904      	add	r1, sp, #16
 8004390:	4630      	mov	r0, r6
 8004392:	f000 f879 	bl	8004488 <_printf_i>
 8004396:	e7e4      	b.n	8004362 <_vfiprintf_r+0x1ea>
 8004398:	08004c25 	.word	0x08004c25
 800439c:	08004c2f 	.word	0x08004c2f
 80043a0:	00000000 	.word	0x00000000
 80043a4:	08004153 	.word	0x08004153
 80043a8:	08004c2b 	.word	0x08004c2b

080043ac <_printf_common>:
 80043ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043b0:	4616      	mov	r6, r2
 80043b2:	4699      	mov	r9, r3
 80043b4:	688a      	ldr	r2, [r1, #8]
 80043b6:	690b      	ldr	r3, [r1, #16]
 80043b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043bc:	4293      	cmp	r3, r2
 80043be:	bfb8      	it	lt
 80043c0:	4613      	movlt	r3, r2
 80043c2:	6033      	str	r3, [r6, #0]
 80043c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043c8:	4607      	mov	r7, r0
 80043ca:	460c      	mov	r4, r1
 80043cc:	b10a      	cbz	r2, 80043d2 <_printf_common+0x26>
 80043ce:	3301      	adds	r3, #1
 80043d0:	6033      	str	r3, [r6, #0]
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	0699      	lsls	r1, r3, #26
 80043d6:	bf42      	ittt	mi
 80043d8:	6833      	ldrmi	r3, [r6, #0]
 80043da:	3302      	addmi	r3, #2
 80043dc:	6033      	strmi	r3, [r6, #0]
 80043de:	6825      	ldr	r5, [r4, #0]
 80043e0:	f015 0506 	ands.w	r5, r5, #6
 80043e4:	d106      	bne.n	80043f4 <_printf_common+0x48>
 80043e6:	f104 0a19 	add.w	sl, r4, #25
 80043ea:	68e3      	ldr	r3, [r4, #12]
 80043ec:	6832      	ldr	r2, [r6, #0]
 80043ee:	1a9b      	subs	r3, r3, r2
 80043f0:	42ab      	cmp	r3, r5
 80043f2:	dc26      	bgt.n	8004442 <_printf_common+0x96>
 80043f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043f8:	1e13      	subs	r3, r2, #0
 80043fa:	6822      	ldr	r2, [r4, #0]
 80043fc:	bf18      	it	ne
 80043fe:	2301      	movne	r3, #1
 8004400:	0692      	lsls	r2, r2, #26
 8004402:	d42b      	bmi.n	800445c <_printf_common+0xb0>
 8004404:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004408:	4649      	mov	r1, r9
 800440a:	4638      	mov	r0, r7
 800440c:	47c0      	blx	r8
 800440e:	3001      	adds	r0, #1
 8004410:	d01e      	beq.n	8004450 <_printf_common+0xa4>
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	6922      	ldr	r2, [r4, #16]
 8004416:	f003 0306 	and.w	r3, r3, #6
 800441a:	2b04      	cmp	r3, #4
 800441c:	bf02      	ittt	eq
 800441e:	68e5      	ldreq	r5, [r4, #12]
 8004420:	6833      	ldreq	r3, [r6, #0]
 8004422:	1aed      	subeq	r5, r5, r3
 8004424:	68a3      	ldr	r3, [r4, #8]
 8004426:	bf0c      	ite	eq
 8004428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800442c:	2500      	movne	r5, #0
 800442e:	4293      	cmp	r3, r2
 8004430:	bfc4      	itt	gt
 8004432:	1a9b      	subgt	r3, r3, r2
 8004434:	18ed      	addgt	r5, r5, r3
 8004436:	2600      	movs	r6, #0
 8004438:	341a      	adds	r4, #26
 800443a:	42b5      	cmp	r5, r6
 800443c:	d11a      	bne.n	8004474 <_printf_common+0xc8>
 800443e:	2000      	movs	r0, #0
 8004440:	e008      	b.n	8004454 <_printf_common+0xa8>
 8004442:	2301      	movs	r3, #1
 8004444:	4652      	mov	r2, sl
 8004446:	4649      	mov	r1, r9
 8004448:	4638      	mov	r0, r7
 800444a:	47c0      	blx	r8
 800444c:	3001      	adds	r0, #1
 800444e:	d103      	bne.n	8004458 <_printf_common+0xac>
 8004450:	f04f 30ff 	mov.w	r0, #4294967295
 8004454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004458:	3501      	adds	r5, #1
 800445a:	e7c6      	b.n	80043ea <_printf_common+0x3e>
 800445c:	18e1      	adds	r1, r4, r3
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	2030      	movs	r0, #48	; 0x30
 8004462:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004466:	4422      	add	r2, r4
 8004468:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800446c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004470:	3302      	adds	r3, #2
 8004472:	e7c7      	b.n	8004404 <_printf_common+0x58>
 8004474:	2301      	movs	r3, #1
 8004476:	4622      	mov	r2, r4
 8004478:	4649      	mov	r1, r9
 800447a:	4638      	mov	r0, r7
 800447c:	47c0      	blx	r8
 800447e:	3001      	adds	r0, #1
 8004480:	d0e6      	beq.n	8004450 <_printf_common+0xa4>
 8004482:	3601      	adds	r6, #1
 8004484:	e7d9      	b.n	800443a <_printf_common+0x8e>
	...

08004488 <_printf_i>:
 8004488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800448c:	7e0f      	ldrb	r7, [r1, #24]
 800448e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004490:	2f78      	cmp	r7, #120	; 0x78
 8004492:	4691      	mov	r9, r2
 8004494:	4680      	mov	r8, r0
 8004496:	460c      	mov	r4, r1
 8004498:	469a      	mov	sl, r3
 800449a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800449e:	d807      	bhi.n	80044b0 <_printf_i+0x28>
 80044a0:	2f62      	cmp	r7, #98	; 0x62
 80044a2:	d80a      	bhi.n	80044ba <_printf_i+0x32>
 80044a4:	2f00      	cmp	r7, #0
 80044a6:	f000 80d4 	beq.w	8004652 <_printf_i+0x1ca>
 80044aa:	2f58      	cmp	r7, #88	; 0x58
 80044ac:	f000 80c0 	beq.w	8004630 <_printf_i+0x1a8>
 80044b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044b8:	e03a      	b.n	8004530 <_printf_i+0xa8>
 80044ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044be:	2b15      	cmp	r3, #21
 80044c0:	d8f6      	bhi.n	80044b0 <_printf_i+0x28>
 80044c2:	a101      	add	r1, pc, #4	; (adr r1, 80044c8 <_printf_i+0x40>)
 80044c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044c8:	08004521 	.word	0x08004521
 80044cc:	08004535 	.word	0x08004535
 80044d0:	080044b1 	.word	0x080044b1
 80044d4:	080044b1 	.word	0x080044b1
 80044d8:	080044b1 	.word	0x080044b1
 80044dc:	080044b1 	.word	0x080044b1
 80044e0:	08004535 	.word	0x08004535
 80044e4:	080044b1 	.word	0x080044b1
 80044e8:	080044b1 	.word	0x080044b1
 80044ec:	080044b1 	.word	0x080044b1
 80044f0:	080044b1 	.word	0x080044b1
 80044f4:	08004639 	.word	0x08004639
 80044f8:	08004561 	.word	0x08004561
 80044fc:	080045f3 	.word	0x080045f3
 8004500:	080044b1 	.word	0x080044b1
 8004504:	080044b1 	.word	0x080044b1
 8004508:	0800465b 	.word	0x0800465b
 800450c:	080044b1 	.word	0x080044b1
 8004510:	08004561 	.word	0x08004561
 8004514:	080044b1 	.word	0x080044b1
 8004518:	080044b1 	.word	0x080044b1
 800451c:	080045fb 	.word	0x080045fb
 8004520:	682b      	ldr	r3, [r5, #0]
 8004522:	1d1a      	adds	r2, r3, #4
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	602a      	str	r2, [r5, #0]
 8004528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800452c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004530:	2301      	movs	r3, #1
 8004532:	e09f      	b.n	8004674 <_printf_i+0x1ec>
 8004534:	6820      	ldr	r0, [r4, #0]
 8004536:	682b      	ldr	r3, [r5, #0]
 8004538:	0607      	lsls	r7, r0, #24
 800453a:	f103 0104 	add.w	r1, r3, #4
 800453e:	6029      	str	r1, [r5, #0]
 8004540:	d501      	bpl.n	8004546 <_printf_i+0xbe>
 8004542:	681e      	ldr	r6, [r3, #0]
 8004544:	e003      	b.n	800454e <_printf_i+0xc6>
 8004546:	0646      	lsls	r6, r0, #25
 8004548:	d5fb      	bpl.n	8004542 <_printf_i+0xba>
 800454a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800454e:	2e00      	cmp	r6, #0
 8004550:	da03      	bge.n	800455a <_printf_i+0xd2>
 8004552:	232d      	movs	r3, #45	; 0x2d
 8004554:	4276      	negs	r6, r6
 8004556:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800455a:	485a      	ldr	r0, [pc, #360]	; (80046c4 <_printf_i+0x23c>)
 800455c:	230a      	movs	r3, #10
 800455e:	e012      	b.n	8004586 <_printf_i+0xfe>
 8004560:	682b      	ldr	r3, [r5, #0]
 8004562:	6820      	ldr	r0, [r4, #0]
 8004564:	1d19      	adds	r1, r3, #4
 8004566:	6029      	str	r1, [r5, #0]
 8004568:	0605      	lsls	r5, r0, #24
 800456a:	d501      	bpl.n	8004570 <_printf_i+0xe8>
 800456c:	681e      	ldr	r6, [r3, #0]
 800456e:	e002      	b.n	8004576 <_printf_i+0xee>
 8004570:	0641      	lsls	r1, r0, #25
 8004572:	d5fb      	bpl.n	800456c <_printf_i+0xe4>
 8004574:	881e      	ldrh	r6, [r3, #0]
 8004576:	4853      	ldr	r0, [pc, #332]	; (80046c4 <_printf_i+0x23c>)
 8004578:	2f6f      	cmp	r7, #111	; 0x6f
 800457a:	bf0c      	ite	eq
 800457c:	2308      	moveq	r3, #8
 800457e:	230a      	movne	r3, #10
 8004580:	2100      	movs	r1, #0
 8004582:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004586:	6865      	ldr	r5, [r4, #4]
 8004588:	60a5      	str	r5, [r4, #8]
 800458a:	2d00      	cmp	r5, #0
 800458c:	bfa2      	ittt	ge
 800458e:	6821      	ldrge	r1, [r4, #0]
 8004590:	f021 0104 	bicge.w	r1, r1, #4
 8004594:	6021      	strge	r1, [r4, #0]
 8004596:	b90e      	cbnz	r6, 800459c <_printf_i+0x114>
 8004598:	2d00      	cmp	r5, #0
 800459a:	d04b      	beq.n	8004634 <_printf_i+0x1ac>
 800459c:	4615      	mov	r5, r2
 800459e:	fbb6 f1f3 	udiv	r1, r6, r3
 80045a2:	fb03 6711 	mls	r7, r3, r1, r6
 80045a6:	5dc7      	ldrb	r7, [r0, r7]
 80045a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045ac:	4637      	mov	r7, r6
 80045ae:	42bb      	cmp	r3, r7
 80045b0:	460e      	mov	r6, r1
 80045b2:	d9f4      	bls.n	800459e <_printf_i+0x116>
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d10b      	bne.n	80045d0 <_printf_i+0x148>
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	07de      	lsls	r6, r3, #31
 80045bc:	d508      	bpl.n	80045d0 <_printf_i+0x148>
 80045be:	6923      	ldr	r3, [r4, #16]
 80045c0:	6861      	ldr	r1, [r4, #4]
 80045c2:	4299      	cmp	r1, r3
 80045c4:	bfde      	ittt	le
 80045c6:	2330      	movle	r3, #48	; 0x30
 80045c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045d0:	1b52      	subs	r2, r2, r5
 80045d2:	6122      	str	r2, [r4, #16]
 80045d4:	f8cd a000 	str.w	sl, [sp]
 80045d8:	464b      	mov	r3, r9
 80045da:	aa03      	add	r2, sp, #12
 80045dc:	4621      	mov	r1, r4
 80045de:	4640      	mov	r0, r8
 80045e0:	f7ff fee4 	bl	80043ac <_printf_common>
 80045e4:	3001      	adds	r0, #1
 80045e6:	d14a      	bne.n	800467e <_printf_i+0x1f6>
 80045e8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ec:	b004      	add	sp, #16
 80045ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	f043 0320 	orr.w	r3, r3, #32
 80045f8:	6023      	str	r3, [r4, #0]
 80045fa:	4833      	ldr	r0, [pc, #204]	; (80046c8 <_printf_i+0x240>)
 80045fc:	2778      	movs	r7, #120	; 0x78
 80045fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	6829      	ldr	r1, [r5, #0]
 8004606:	061f      	lsls	r7, r3, #24
 8004608:	f851 6b04 	ldr.w	r6, [r1], #4
 800460c:	d402      	bmi.n	8004614 <_printf_i+0x18c>
 800460e:	065f      	lsls	r7, r3, #25
 8004610:	bf48      	it	mi
 8004612:	b2b6      	uxthmi	r6, r6
 8004614:	07df      	lsls	r7, r3, #31
 8004616:	bf48      	it	mi
 8004618:	f043 0320 	orrmi.w	r3, r3, #32
 800461c:	6029      	str	r1, [r5, #0]
 800461e:	bf48      	it	mi
 8004620:	6023      	strmi	r3, [r4, #0]
 8004622:	b91e      	cbnz	r6, 800462c <_printf_i+0x1a4>
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	f023 0320 	bic.w	r3, r3, #32
 800462a:	6023      	str	r3, [r4, #0]
 800462c:	2310      	movs	r3, #16
 800462e:	e7a7      	b.n	8004580 <_printf_i+0xf8>
 8004630:	4824      	ldr	r0, [pc, #144]	; (80046c4 <_printf_i+0x23c>)
 8004632:	e7e4      	b.n	80045fe <_printf_i+0x176>
 8004634:	4615      	mov	r5, r2
 8004636:	e7bd      	b.n	80045b4 <_printf_i+0x12c>
 8004638:	682b      	ldr	r3, [r5, #0]
 800463a:	6826      	ldr	r6, [r4, #0]
 800463c:	6961      	ldr	r1, [r4, #20]
 800463e:	1d18      	adds	r0, r3, #4
 8004640:	6028      	str	r0, [r5, #0]
 8004642:	0635      	lsls	r5, r6, #24
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	d501      	bpl.n	800464c <_printf_i+0x1c4>
 8004648:	6019      	str	r1, [r3, #0]
 800464a:	e002      	b.n	8004652 <_printf_i+0x1ca>
 800464c:	0670      	lsls	r0, r6, #25
 800464e:	d5fb      	bpl.n	8004648 <_printf_i+0x1c0>
 8004650:	8019      	strh	r1, [r3, #0]
 8004652:	2300      	movs	r3, #0
 8004654:	6123      	str	r3, [r4, #16]
 8004656:	4615      	mov	r5, r2
 8004658:	e7bc      	b.n	80045d4 <_printf_i+0x14c>
 800465a:	682b      	ldr	r3, [r5, #0]
 800465c:	1d1a      	adds	r2, r3, #4
 800465e:	602a      	str	r2, [r5, #0]
 8004660:	681d      	ldr	r5, [r3, #0]
 8004662:	6862      	ldr	r2, [r4, #4]
 8004664:	2100      	movs	r1, #0
 8004666:	4628      	mov	r0, r5
 8004668:	f7fb fdb2 	bl	80001d0 <memchr>
 800466c:	b108      	cbz	r0, 8004672 <_printf_i+0x1ea>
 800466e:	1b40      	subs	r0, r0, r5
 8004670:	6060      	str	r0, [r4, #4]
 8004672:	6863      	ldr	r3, [r4, #4]
 8004674:	6123      	str	r3, [r4, #16]
 8004676:	2300      	movs	r3, #0
 8004678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800467c:	e7aa      	b.n	80045d4 <_printf_i+0x14c>
 800467e:	6923      	ldr	r3, [r4, #16]
 8004680:	462a      	mov	r2, r5
 8004682:	4649      	mov	r1, r9
 8004684:	4640      	mov	r0, r8
 8004686:	47d0      	blx	sl
 8004688:	3001      	adds	r0, #1
 800468a:	d0ad      	beq.n	80045e8 <_printf_i+0x160>
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	079b      	lsls	r3, r3, #30
 8004690:	d413      	bmi.n	80046ba <_printf_i+0x232>
 8004692:	68e0      	ldr	r0, [r4, #12]
 8004694:	9b03      	ldr	r3, [sp, #12]
 8004696:	4298      	cmp	r0, r3
 8004698:	bfb8      	it	lt
 800469a:	4618      	movlt	r0, r3
 800469c:	e7a6      	b.n	80045ec <_printf_i+0x164>
 800469e:	2301      	movs	r3, #1
 80046a0:	4632      	mov	r2, r6
 80046a2:	4649      	mov	r1, r9
 80046a4:	4640      	mov	r0, r8
 80046a6:	47d0      	blx	sl
 80046a8:	3001      	adds	r0, #1
 80046aa:	d09d      	beq.n	80045e8 <_printf_i+0x160>
 80046ac:	3501      	adds	r5, #1
 80046ae:	68e3      	ldr	r3, [r4, #12]
 80046b0:	9903      	ldr	r1, [sp, #12]
 80046b2:	1a5b      	subs	r3, r3, r1
 80046b4:	42ab      	cmp	r3, r5
 80046b6:	dcf2      	bgt.n	800469e <_printf_i+0x216>
 80046b8:	e7eb      	b.n	8004692 <_printf_i+0x20a>
 80046ba:	2500      	movs	r5, #0
 80046bc:	f104 0619 	add.w	r6, r4, #25
 80046c0:	e7f5      	b.n	80046ae <_printf_i+0x226>
 80046c2:	bf00      	nop
 80046c4:	08004c36 	.word	0x08004c36
 80046c8:	08004c47 	.word	0x08004c47

080046cc <__sflush_r>:
 80046cc:	898a      	ldrh	r2, [r1, #12]
 80046ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046d2:	4605      	mov	r5, r0
 80046d4:	0710      	lsls	r0, r2, #28
 80046d6:	460c      	mov	r4, r1
 80046d8:	d458      	bmi.n	800478c <__sflush_r+0xc0>
 80046da:	684b      	ldr	r3, [r1, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	dc05      	bgt.n	80046ec <__sflush_r+0x20>
 80046e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	dc02      	bgt.n	80046ec <__sflush_r+0x20>
 80046e6:	2000      	movs	r0, #0
 80046e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046ee:	2e00      	cmp	r6, #0
 80046f0:	d0f9      	beq.n	80046e6 <__sflush_r+0x1a>
 80046f2:	2300      	movs	r3, #0
 80046f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80046f8:	682f      	ldr	r7, [r5, #0]
 80046fa:	6a21      	ldr	r1, [r4, #32]
 80046fc:	602b      	str	r3, [r5, #0]
 80046fe:	d032      	beq.n	8004766 <__sflush_r+0x9a>
 8004700:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004702:	89a3      	ldrh	r3, [r4, #12]
 8004704:	075a      	lsls	r2, r3, #29
 8004706:	d505      	bpl.n	8004714 <__sflush_r+0x48>
 8004708:	6863      	ldr	r3, [r4, #4]
 800470a:	1ac0      	subs	r0, r0, r3
 800470c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800470e:	b10b      	cbz	r3, 8004714 <__sflush_r+0x48>
 8004710:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004712:	1ac0      	subs	r0, r0, r3
 8004714:	2300      	movs	r3, #0
 8004716:	4602      	mov	r2, r0
 8004718:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800471a:	6a21      	ldr	r1, [r4, #32]
 800471c:	4628      	mov	r0, r5
 800471e:	47b0      	blx	r6
 8004720:	1c43      	adds	r3, r0, #1
 8004722:	89a3      	ldrh	r3, [r4, #12]
 8004724:	d106      	bne.n	8004734 <__sflush_r+0x68>
 8004726:	6829      	ldr	r1, [r5, #0]
 8004728:	291d      	cmp	r1, #29
 800472a:	d82b      	bhi.n	8004784 <__sflush_r+0xb8>
 800472c:	4a29      	ldr	r2, [pc, #164]	; (80047d4 <__sflush_r+0x108>)
 800472e:	410a      	asrs	r2, r1
 8004730:	07d6      	lsls	r6, r2, #31
 8004732:	d427      	bmi.n	8004784 <__sflush_r+0xb8>
 8004734:	2200      	movs	r2, #0
 8004736:	6062      	str	r2, [r4, #4]
 8004738:	04d9      	lsls	r1, r3, #19
 800473a:	6922      	ldr	r2, [r4, #16]
 800473c:	6022      	str	r2, [r4, #0]
 800473e:	d504      	bpl.n	800474a <__sflush_r+0x7e>
 8004740:	1c42      	adds	r2, r0, #1
 8004742:	d101      	bne.n	8004748 <__sflush_r+0x7c>
 8004744:	682b      	ldr	r3, [r5, #0]
 8004746:	b903      	cbnz	r3, 800474a <__sflush_r+0x7e>
 8004748:	6560      	str	r0, [r4, #84]	; 0x54
 800474a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800474c:	602f      	str	r7, [r5, #0]
 800474e:	2900      	cmp	r1, #0
 8004750:	d0c9      	beq.n	80046e6 <__sflush_r+0x1a>
 8004752:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004756:	4299      	cmp	r1, r3
 8004758:	d002      	beq.n	8004760 <__sflush_r+0x94>
 800475a:	4628      	mov	r0, r5
 800475c:	f7ff fbea 	bl	8003f34 <_free_r>
 8004760:	2000      	movs	r0, #0
 8004762:	6360      	str	r0, [r4, #52]	; 0x34
 8004764:	e7c0      	b.n	80046e8 <__sflush_r+0x1c>
 8004766:	2301      	movs	r3, #1
 8004768:	4628      	mov	r0, r5
 800476a:	47b0      	blx	r6
 800476c:	1c41      	adds	r1, r0, #1
 800476e:	d1c8      	bne.n	8004702 <__sflush_r+0x36>
 8004770:	682b      	ldr	r3, [r5, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0c5      	beq.n	8004702 <__sflush_r+0x36>
 8004776:	2b1d      	cmp	r3, #29
 8004778:	d001      	beq.n	800477e <__sflush_r+0xb2>
 800477a:	2b16      	cmp	r3, #22
 800477c:	d101      	bne.n	8004782 <__sflush_r+0xb6>
 800477e:	602f      	str	r7, [r5, #0]
 8004780:	e7b1      	b.n	80046e6 <__sflush_r+0x1a>
 8004782:	89a3      	ldrh	r3, [r4, #12]
 8004784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004788:	81a3      	strh	r3, [r4, #12]
 800478a:	e7ad      	b.n	80046e8 <__sflush_r+0x1c>
 800478c:	690f      	ldr	r7, [r1, #16]
 800478e:	2f00      	cmp	r7, #0
 8004790:	d0a9      	beq.n	80046e6 <__sflush_r+0x1a>
 8004792:	0793      	lsls	r3, r2, #30
 8004794:	680e      	ldr	r6, [r1, #0]
 8004796:	bf08      	it	eq
 8004798:	694b      	ldreq	r3, [r1, #20]
 800479a:	600f      	str	r7, [r1, #0]
 800479c:	bf18      	it	ne
 800479e:	2300      	movne	r3, #0
 80047a0:	eba6 0807 	sub.w	r8, r6, r7
 80047a4:	608b      	str	r3, [r1, #8]
 80047a6:	f1b8 0f00 	cmp.w	r8, #0
 80047aa:	dd9c      	ble.n	80046e6 <__sflush_r+0x1a>
 80047ac:	6a21      	ldr	r1, [r4, #32]
 80047ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80047b0:	4643      	mov	r3, r8
 80047b2:	463a      	mov	r2, r7
 80047b4:	4628      	mov	r0, r5
 80047b6:	47b0      	blx	r6
 80047b8:	2800      	cmp	r0, #0
 80047ba:	dc06      	bgt.n	80047ca <__sflush_r+0xfe>
 80047bc:	89a3      	ldrh	r3, [r4, #12]
 80047be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047c2:	81a3      	strh	r3, [r4, #12]
 80047c4:	f04f 30ff 	mov.w	r0, #4294967295
 80047c8:	e78e      	b.n	80046e8 <__sflush_r+0x1c>
 80047ca:	4407      	add	r7, r0
 80047cc:	eba8 0800 	sub.w	r8, r8, r0
 80047d0:	e7e9      	b.n	80047a6 <__sflush_r+0xda>
 80047d2:	bf00      	nop
 80047d4:	dfbffffe 	.word	0xdfbffffe

080047d8 <_fflush_r>:
 80047d8:	b538      	push	{r3, r4, r5, lr}
 80047da:	690b      	ldr	r3, [r1, #16]
 80047dc:	4605      	mov	r5, r0
 80047de:	460c      	mov	r4, r1
 80047e0:	b913      	cbnz	r3, 80047e8 <_fflush_r+0x10>
 80047e2:	2500      	movs	r5, #0
 80047e4:	4628      	mov	r0, r5
 80047e6:	bd38      	pop	{r3, r4, r5, pc}
 80047e8:	b118      	cbz	r0, 80047f2 <_fflush_r+0x1a>
 80047ea:	6a03      	ldr	r3, [r0, #32]
 80047ec:	b90b      	cbnz	r3, 80047f2 <_fflush_r+0x1a>
 80047ee:	f7ff fa99 	bl	8003d24 <__sinit>
 80047f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0f3      	beq.n	80047e2 <_fflush_r+0xa>
 80047fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80047fc:	07d0      	lsls	r0, r2, #31
 80047fe:	d404      	bmi.n	800480a <_fflush_r+0x32>
 8004800:	0599      	lsls	r1, r3, #22
 8004802:	d402      	bmi.n	800480a <_fflush_r+0x32>
 8004804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004806:	f7ff fb92 	bl	8003f2e <__retarget_lock_acquire_recursive>
 800480a:	4628      	mov	r0, r5
 800480c:	4621      	mov	r1, r4
 800480e:	f7ff ff5d 	bl	80046cc <__sflush_r>
 8004812:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004814:	07da      	lsls	r2, r3, #31
 8004816:	4605      	mov	r5, r0
 8004818:	d4e4      	bmi.n	80047e4 <_fflush_r+0xc>
 800481a:	89a3      	ldrh	r3, [r4, #12]
 800481c:	059b      	lsls	r3, r3, #22
 800481e:	d4e1      	bmi.n	80047e4 <_fflush_r+0xc>
 8004820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004822:	f7ff fb85 	bl	8003f30 <__retarget_lock_release_recursive>
 8004826:	e7dd      	b.n	80047e4 <_fflush_r+0xc>

08004828 <__swbuf_r>:
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482a:	460e      	mov	r6, r1
 800482c:	4614      	mov	r4, r2
 800482e:	4605      	mov	r5, r0
 8004830:	b118      	cbz	r0, 800483a <__swbuf_r+0x12>
 8004832:	6a03      	ldr	r3, [r0, #32]
 8004834:	b90b      	cbnz	r3, 800483a <__swbuf_r+0x12>
 8004836:	f7ff fa75 	bl	8003d24 <__sinit>
 800483a:	69a3      	ldr	r3, [r4, #24]
 800483c:	60a3      	str	r3, [r4, #8]
 800483e:	89a3      	ldrh	r3, [r4, #12]
 8004840:	071a      	lsls	r2, r3, #28
 8004842:	d525      	bpl.n	8004890 <__swbuf_r+0x68>
 8004844:	6923      	ldr	r3, [r4, #16]
 8004846:	b31b      	cbz	r3, 8004890 <__swbuf_r+0x68>
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	6922      	ldr	r2, [r4, #16]
 800484c:	1a98      	subs	r0, r3, r2
 800484e:	6963      	ldr	r3, [r4, #20]
 8004850:	b2f6      	uxtb	r6, r6
 8004852:	4283      	cmp	r3, r0
 8004854:	4637      	mov	r7, r6
 8004856:	dc04      	bgt.n	8004862 <__swbuf_r+0x3a>
 8004858:	4621      	mov	r1, r4
 800485a:	4628      	mov	r0, r5
 800485c:	f7ff ffbc 	bl	80047d8 <_fflush_r>
 8004860:	b9e0      	cbnz	r0, 800489c <__swbuf_r+0x74>
 8004862:	68a3      	ldr	r3, [r4, #8]
 8004864:	3b01      	subs	r3, #1
 8004866:	60a3      	str	r3, [r4, #8]
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	6022      	str	r2, [r4, #0]
 800486e:	701e      	strb	r6, [r3, #0]
 8004870:	6962      	ldr	r2, [r4, #20]
 8004872:	1c43      	adds	r3, r0, #1
 8004874:	429a      	cmp	r2, r3
 8004876:	d004      	beq.n	8004882 <__swbuf_r+0x5a>
 8004878:	89a3      	ldrh	r3, [r4, #12]
 800487a:	07db      	lsls	r3, r3, #31
 800487c:	d506      	bpl.n	800488c <__swbuf_r+0x64>
 800487e:	2e0a      	cmp	r6, #10
 8004880:	d104      	bne.n	800488c <__swbuf_r+0x64>
 8004882:	4621      	mov	r1, r4
 8004884:	4628      	mov	r0, r5
 8004886:	f7ff ffa7 	bl	80047d8 <_fflush_r>
 800488a:	b938      	cbnz	r0, 800489c <__swbuf_r+0x74>
 800488c:	4638      	mov	r0, r7
 800488e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004890:	4621      	mov	r1, r4
 8004892:	4628      	mov	r0, r5
 8004894:	f000 f806 	bl	80048a4 <__swsetup_r>
 8004898:	2800      	cmp	r0, #0
 800489a:	d0d5      	beq.n	8004848 <__swbuf_r+0x20>
 800489c:	f04f 37ff 	mov.w	r7, #4294967295
 80048a0:	e7f4      	b.n	800488c <__swbuf_r+0x64>
	...

080048a4 <__swsetup_r>:
 80048a4:	b538      	push	{r3, r4, r5, lr}
 80048a6:	4b2a      	ldr	r3, [pc, #168]	; (8004950 <__swsetup_r+0xac>)
 80048a8:	4605      	mov	r5, r0
 80048aa:	6818      	ldr	r0, [r3, #0]
 80048ac:	460c      	mov	r4, r1
 80048ae:	b118      	cbz	r0, 80048b8 <__swsetup_r+0x14>
 80048b0:	6a03      	ldr	r3, [r0, #32]
 80048b2:	b90b      	cbnz	r3, 80048b8 <__swsetup_r+0x14>
 80048b4:	f7ff fa36 	bl	8003d24 <__sinit>
 80048b8:	89a3      	ldrh	r3, [r4, #12]
 80048ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048be:	0718      	lsls	r0, r3, #28
 80048c0:	d422      	bmi.n	8004908 <__swsetup_r+0x64>
 80048c2:	06d9      	lsls	r1, r3, #27
 80048c4:	d407      	bmi.n	80048d6 <__swsetup_r+0x32>
 80048c6:	2309      	movs	r3, #9
 80048c8:	602b      	str	r3, [r5, #0]
 80048ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80048ce:	81a3      	strh	r3, [r4, #12]
 80048d0:	f04f 30ff 	mov.w	r0, #4294967295
 80048d4:	e034      	b.n	8004940 <__swsetup_r+0x9c>
 80048d6:	0758      	lsls	r0, r3, #29
 80048d8:	d512      	bpl.n	8004900 <__swsetup_r+0x5c>
 80048da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048dc:	b141      	cbz	r1, 80048f0 <__swsetup_r+0x4c>
 80048de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048e2:	4299      	cmp	r1, r3
 80048e4:	d002      	beq.n	80048ec <__swsetup_r+0x48>
 80048e6:	4628      	mov	r0, r5
 80048e8:	f7ff fb24 	bl	8003f34 <_free_r>
 80048ec:	2300      	movs	r3, #0
 80048ee:	6363      	str	r3, [r4, #52]	; 0x34
 80048f0:	89a3      	ldrh	r3, [r4, #12]
 80048f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80048f6:	81a3      	strh	r3, [r4, #12]
 80048f8:	2300      	movs	r3, #0
 80048fa:	6063      	str	r3, [r4, #4]
 80048fc:	6923      	ldr	r3, [r4, #16]
 80048fe:	6023      	str	r3, [r4, #0]
 8004900:	89a3      	ldrh	r3, [r4, #12]
 8004902:	f043 0308 	orr.w	r3, r3, #8
 8004906:	81a3      	strh	r3, [r4, #12]
 8004908:	6923      	ldr	r3, [r4, #16]
 800490a:	b94b      	cbnz	r3, 8004920 <__swsetup_r+0x7c>
 800490c:	89a3      	ldrh	r3, [r4, #12]
 800490e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004916:	d003      	beq.n	8004920 <__swsetup_r+0x7c>
 8004918:	4621      	mov	r1, r4
 800491a:	4628      	mov	r0, r5
 800491c:	f000 f850 	bl	80049c0 <__smakebuf_r>
 8004920:	89a0      	ldrh	r0, [r4, #12]
 8004922:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004926:	f010 0301 	ands.w	r3, r0, #1
 800492a:	d00a      	beq.n	8004942 <__swsetup_r+0x9e>
 800492c:	2300      	movs	r3, #0
 800492e:	60a3      	str	r3, [r4, #8]
 8004930:	6963      	ldr	r3, [r4, #20]
 8004932:	425b      	negs	r3, r3
 8004934:	61a3      	str	r3, [r4, #24]
 8004936:	6923      	ldr	r3, [r4, #16]
 8004938:	b943      	cbnz	r3, 800494c <__swsetup_r+0xa8>
 800493a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800493e:	d1c4      	bne.n	80048ca <__swsetup_r+0x26>
 8004940:	bd38      	pop	{r3, r4, r5, pc}
 8004942:	0781      	lsls	r1, r0, #30
 8004944:	bf58      	it	pl
 8004946:	6963      	ldrpl	r3, [r4, #20]
 8004948:	60a3      	str	r3, [r4, #8]
 800494a:	e7f4      	b.n	8004936 <__swsetup_r+0x92>
 800494c:	2000      	movs	r0, #0
 800494e:	e7f7      	b.n	8004940 <__swsetup_r+0x9c>
 8004950:	20000064 	.word	0x20000064

08004954 <_sbrk_r>:
 8004954:	b538      	push	{r3, r4, r5, lr}
 8004956:	4d06      	ldr	r5, [pc, #24]	; (8004970 <_sbrk_r+0x1c>)
 8004958:	2300      	movs	r3, #0
 800495a:	4604      	mov	r4, r0
 800495c:	4608      	mov	r0, r1
 800495e:	602b      	str	r3, [r5, #0]
 8004960:	f7fc f9ee 	bl	8000d40 <_sbrk>
 8004964:	1c43      	adds	r3, r0, #1
 8004966:	d102      	bne.n	800496e <_sbrk_r+0x1a>
 8004968:	682b      	ldr	r3, [r5, #0]
 800496a:	b103      	cbz	r3, 800496e <_sbrk_r+0x1a>
 800496c:	6023      	str	r3, [r4, #0]
 800496e:	bd38      	pop	{r3, r4, r5, pc}
 8004970:	200002e8 	.word	0x200002e8

08004974 <__swhatbuf_r>:
 8004974:	b570      	push	{r4, r5, r6, lr}
 8004976:	460c      	mov	r4, r1
 8004978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800497c:	2900      	cmp	r1, #0
 800497e:	b096      	sub	sp, #88	; 0x58
 8004980:	4615      	mov	r5, r2
 8004982:	461e      	mov	r6, r3
 8004984:	da0d      	bge.n	80049a2 <__swhatbuf_r+0x2e>
 8004986:	89a3      	ldrh	r3, [r4, #12]
 8004988:	f013 0f80 	tst.w	r3, #128	; 0x80
 800498c:	f04f 0100 	mov.w	r1, #0
 8004990:	bf0c      	ite	eq
 8004992:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004996:	2340      	movne	r3, #64	; 0x40
 8004998:	2000      	movs	r0, #0
 800499a:	6031      	str	r1, [r6, #0]
 800499c:	602b      	str	r3, [r5, #0]
 800499e:	b016      	add	sp, #88	; 0x58
 80049a0:	bd70      	pop	{r4, r5, r6, pc}
 80049a2:	466a      	mov	r2, sp
 80049a4:	f000 f848 	bl	8004a38 <_fstat_r>
 80049a8:	2800      	cmp	r0, #0
 80049aa:	dbec      	blt.n	8004986 <__swhatbuf_r+0x12>
 80049ac:	9901      	ldr	r1, [sp, #4]
 80049ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80049b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80049b6:	4259      	negs	r1, r3
 80049b8:	4159      	adcs	r1, r3
 80049ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049be:	e7eb      	b.n	8004998 <__swhatbuf_r+0x24>

080049c0 <__smakebuf_r>:
 80049c0:	898b      	ldrh	r3, [r1, #12]
 80049c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049c4:	079d      	lsls	r5, r3, #30
 80049c6:	4606      	mov	r6, r0
 80049c8:	460c      	mov	r4, r1
 80049ca:	d507      	bpl.n	80049dc <__smakebuf_r+0x1c>
 80049cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	6123      	str	r3, [r4, #16]
 80049d4:	2301      	movs	r3, #1
 80049d6:	6163      	str	r3, [r4, #20]
 80049d8:	b002      	add	sp, #8
 80049da:	bd70      	pop	{r4, r5, r6, pc}
 80049dc:	ab01      	add	r3, sp, #4
 80049de:	466a      	mov	r2, sp
 80049e0:	f7ff ffc8 	bl	8004974 <__swhatbuf_r>
 80049e4:	9900      	ldr	r1, [sp, #0]
 80049e6:	4605      	mov	r5, r0
 80049e8:	4630      	mov	r0, r6
 80049ea:	f7ff fb0f 	bl	800400c <_malloc_r>
 80049ee:	b948      	cbnz	r0, 8004a04 <__smakebuf_r+0x44>
 80049f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049f4:	059a      	lsls	r2, r3, #22
 80049f6:	d4ef      	bmi.n	80049d8 <__smakebuf_r+0x18>
 80049f8:	f023 0303 	bic.w	r3, r3, #3
 80049fc:	f043 0302 	orr.w	r3, r3, #2
 8004a00:	81a3      	strh	r3, [r4, #12]
 8004a02:	e7e3      	b.n	80049cc <__smakebuf_r+0xc>
 8004a04:	89a3      	ldrh	r3, [r4, #12]
 8004a06:	6020      	str	r0, [r4, #0]
 8004a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a0c:	81a3      	strh	r3, [r4, #12]
 8004a0e:	9b00      	ldr	r3, [sp, #0]
 8004a10:	6163      	str	r3, [r4, #20]
 8004a12:	9b01      	ldr	r3, [sp, #4]
 8004a14:	6120      	str	r0, [r4, #16]
 8004a16:	b15b      	cbz	r3, 8004a30 <__smakebuf_r+0x70>
 8004a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a1c:	4630      	mov	r0, r6
 8004a1e:	f000 f81d 	bl	8004a5c <_isatty_r>
 8004a22:	b128      	cbz	r0, 8004a30 <__smakebuf_r+0x70>
 8004a24:	89a3      	ldrh	r3, [r4, #12]
 8004a26:	f023 0303 	bic.w	r3, r3, #3
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	81a3      	strh	r3, [r4, #12]
 8004a30:	89a3      	ldrh	r3, [r4, #12]
 8004a32:	431d      	orrs	r5, r3
 8004a34:	81a5      	strh	r5, [r4, #12]
 8004a36:	e7cf      	b.n	80049d8 <__smakebuf_r+0x18>

08004a38 <_fstat_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	4d07      	ldr	r5, [pc, #28]	; (8004a58 <_fstat_r+0x20>)
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	4604      	mov	r4, r0
 8004a40:	4608      	mov	r0, r1
 8004a42:	4611      	mov	r1, r2
 8004a44:	602b      	str	r3, [r5, #0]
 8004a46:	f7fc f952 	bl	8000cee <_fstat>
 8004a4a:	1c43      	adds	r3, r0, #1
 8004a4c:	d102      	bne.n	8004a54 <_fstat_r+0x1c>
 8004a4e:	682b      	ldr	r3, [r5, #0]
 8004a50:	b103      	cbz	r3, 8004a54 <_fstat_r+0x1c>
 8004a52:	6023      	str	r3, [r4, #0]
 8004a54:	bd38      	pop	{r3, r4, r5, pc}
 8004a56:	bf00      	nop
 8004a58:	200002e8 	.word	0x200002e8

08004a5c <_isatty_r>:
 8004a5c:	b538      	push	{r3, r4, r5, lr}
 8004a5e:	4d06      	ldr	r5, [pc, #24]	; (8004a78 <_isatty_r+0x1c>)
 8004a60:	2300      	movs	r3, #0
 8004a62:	4604      	mov	r4, r0
 8004a64:	4608      	mov	r0, r1
 8004a66:	602b      	str	r3, [r5, #0]
 8004a68:	f7fc f951 	bl	8000d0e <_isatty>
 8004a6c:	1c43      	adds	r3, r0, #1
 8004a6e:	d102      	bne.n	8004a76 <_isatty_r+0x1a>
 8004a70:	682b      	ldr	r3, [r5, #0]
 8004a72:	b103      	cbz	r3, 8004a76 <_isatty_r+0x1a>
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	bd38      	pop	{r3, r4, r5, pc}
 8004a78:	200002e8 	.word	0x200002e8

08004a7c <_init>:
 8004a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7e:	bf00      	nop
 8004a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a82:	bc08      	pop	{r3}
 8004a84:	469e      	mov	lr, r3
 8004a86:	4770      	bx	lr

08004a88 <_fini>:
 8004a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8a:	bf00      	nop
 8004a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8e:	bc08      	pop	{r3}
 8004a90:	469e      	mov	lr, r3
 8004a92:	4770      	bx	lr
