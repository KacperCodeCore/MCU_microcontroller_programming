
dioda5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fcc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  0800515c  0800515c  0001515c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005364  08005364  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005364  08005364  00015364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800536c  0800536c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800536c  0800536c  0001536c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000068  080053dc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  080053dc  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c5b9  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001df2  00000000  00000000  0002c694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac0  00000000  00000000  0002e488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000082e  00000000  00000000  0002ef48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027589  00000000  00000000  0002f776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d600  00000000  00000000  00056cff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efd7c  00000000  00000000  000642ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003358  00000000  00000000  0015407c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  001573d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005144 	.word	0x08005144

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005144 	.word	0x08005144

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <led_set_1>:
int number = 0;
int current_minute = 0;
int current_secound = 0;

void led_set_1(int led, bool turn_on)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	460b      	mov	r3, r1
 8000576:	70fb      	strb	r3, [r7, #3]
 GPIO_PinState state = (turn_on) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000578:	78fb      	ldrb	r3, [r7, #3]
 800057a:	73fb      	strb	r3, [r7, #15]
 switch (led) {
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3b01      	subs	r3, #1
 8000580:	2b04      	cmp	r3, #4
 8000582:	d833      	bhi.n	80005ec <led_set_1+0x80>
 8000584:	a201      	add	r2, pc, #4	; (adr r2, 800058c <led_set_1+0x20>)
 8000586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058a:	bf00      	nop
 800058c:	080005a1 	.word	0x080005a1
 8000590:	080005b1 	.word	0x080005b1
 8000594:	080005c1 	.word	0x080005c1
 8000598:	080005cf 	.word	0x080005cf
 800059c:	080005dd 	.word	0x080005dd
 case 1:
 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, state);
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	461a      	mov	r2, r3
 80005a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a8:	4813      	ldr	r0, [pc, #76]	; (80005f8 <led_set_1+0x8c>)
 80005aa:	f001 f90b 	bl	80017c4 <HAL_GPIO_WritePin>
 break;
 80005ae:	e01e      	b.n	80005ee <led_set_1+0x82>
 case 2:
 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, state);
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	461a      	mov	r2, r3
 80005b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b8:	4810      	ldr	r0, [pc, #64]	; (80005fc <led_set_1+0x90>)
 80005ba:	f001 f903 	bl	80017c4 <HAL_GPIO_WritePin>
 break;
 80005be:	e016      	b.n	80005ee <led_set_1+0x82>
 case 3:
 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, state);
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	461a      	mov	r2, r3
 80005c4:	2120      	movs	r1, #32
 80005c6:	480d      	ldr	r0, [pc, #52]	; (80005fc <led_set_1+0x90>)
 80005c8:	f001 f8fc 	bl	80017c4 <HAL_GPIO_WritePin>
 break;
 80005cc:	e00f      	b.n	80005ee <led_set_1+0x82>
 case 4:
 HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, state);
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	461a      	mov	r2, r3
 80005d2:	2140      	movs	r1, #64	; 0x40
 80005d4:	4809      	ldr	r0, [pc, #36]	; (80005fc <led_set_1+0x90>)
 80005d6:	f001 f8f5 	bl	80017c4 <HAL_GPIO_WritePin>
 break;
 80005da:	e008      	b.n	80005ee <led_set_1+0x82>
 case 5:
 HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, state);
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	461a      	mov	r2, r3
 80005e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e4:	4805      	ldr	r0, [pc, #20]	; (80005fc <led_set_1+0x90>)
 80005e6:	f001 f8ed 	bl	80017c4 <HAL_GPIO_WritePin>
 break;
 80005ea:	e000      	b.n	80005ee <led_set_1+0x82>
 default:
 break;
 80005ec:	bf00      	nop
 }
}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	48000400 	.word	0x48000400
 80005fc:	48000800 	.word	0x48000800

08000600 <__io_putchar>:

int __io_putchar(int ch)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 if (ch == '\n') {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b0a      	cmp	r3, #10
 800060c:	d109      	bne.n	8000622 <__io_putchar+0x22>
 uint8_t ch2 = '\r';
 800060e:	230d      	movs	r3, #13
 8000610:	73fb      	strb	r3, [r7, #15]
 HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8000612:	f107 010f 	add.w	r1, r7, #15
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	2201      	movs	r2, #1
 800061c:	4807      	ldr	r0, [pc, #28]	; (800063c <__io_putchar+0x3c>)
 800061e:	f002 ff6f 	bl	8003500 <HAL_UART_Transmit>
 }
 HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000622:	1d39      	adds	r1, r7, #4
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	2201      	movs	r2, #1
 800062a:	4804      	ldr	r0, [pc, #16]	; (800063c <__io_putchar+0x3c>)
 800062c:	f002 ff68 	bl	8003500 <HAL_UART_Transmit>
 return 1;
 8000630:	2301      	movs	r3, #1
}
 8000632:	4618      	mov	r0, r3
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200000b8 	.word	0x200000b8

08000640 <is_user_button_pressed>:

bool is_user_button_pressed(int button) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  switch (button) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d003      	beq.n	8000656 <is_user_button_pressed+0x16>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d00c      	beq.n	800066e <is_user_button_pressed+0x2e>
 8000654:	e017      	b.n	8000686 <is_user_button_pressed+0x46>
  case 0:
    if (HAL_GPIO_ReadPin(USER_BUTTON3_GPIO_Port, USER_BUTTON3_Pin) == GPIO_PIN_RESET) {
 8000656:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065a:	480d      	ldr	r0, [pc, #52]	; (8000690 <is_user_button_pressed+0x50>)
 800065c:	f001 f89a 	bl	8001794 <HAL_GPIO_ReadPin>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d101      	bne.n	800066a <is_user_button_pressed+0x2a>
      return true;
 8000666:	2301      	movs	r3, #1
 8000668:	e00e      	b.n	8000688 <is_user_button_pressed+0x48>
    } else {
      return false;
 800066a:	2300      	movs	r3, #0
 800066c:	e00c      	b.n	8000688 <is_user_button_pressed+0x48>
    }
  case 1:
    if (HAL_GPIO_ReadPin(USER_BUTTON2_GPIO_Port, USER_BUTTON2_Pin) == GPIO_PIN_RESET) {
 800066e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000672:	4807      	ldr	r0, [pc, #28]	; (8000690 <is_user_button_pressed+0x50>)
 8000674:	f001 f88e 	bl	8001794 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d101      	bne.n	8000682 <is_user_button_pressed+0x42>
      return true;
 800067e:	2301      	movs	r3, #1
 8000680:	e002      	b.n	8000688 <is_user_button_pressed+0x48>
    } else {
      return false;
 8000682:	2300      	movs	r3, #0
 8000684:	e000      	b.n	8000688 <is_user_button_pressed+0x48>
    }

  default:
    return false;
 8000686:	2300      	movs	r3, #0
  }
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	48000400 	.word	0x48000400

08000694 <is_button_pressed>:

bool is_button_pressed(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
 if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET) {
 8000698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069c:	4805      	ldr	r0, [pc, #20]	; (80006b4 <is_button_pressed+0x20>)
 800069e:	f001 f879 	bl	8001794 <HAL_GPIO_ReadPin>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d101      	bne.n	80006ac <is_button_pressed+0x18>
 return true;
 80006a8:	2301      	movs	r3, #1
 80006aa:	e000      	b.n	80006ae <is_button_pressed+0x1a>
 } else {
 return false;
 80006ac:	2300      	movs	r3, #0
 }
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	48000800 	.word	0x48000800

080006b8 <line_append>:

#define LINE_MAX_LENGTH 80
static char line_buffer[LINE_MAX_LENGTH + 1];
static uint32_t line_length;
void line_append(uint8_t value)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
 if (value == '\r' || value == '\n') {
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b0d      	cmp	r3, #13
 80006c6:	d002      	beq.n	80006ce <line_append+0x16>
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	2b0a      	cmp	r3, #10
 80006cc:	d119      	bne.n	8000702 <line_append+0x4a>
 // odebraliśmy znak końca linii
 if (line_length > 0) {
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <line_append+0x74>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d025      	beq.n	8000722 <line_append+0x6a>
 // jeśli bufor nie jest pusty to dodajemy
 // 0 na końcu linii
 line_buffer[line_length] = '\0';
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <line_append+0x74>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a15      	ldr	r2, [pc, #84]	; (8000730 <line_append+0x78>)
 80006dc:	2100      	movs	r1, #0
 80006de:	54d1      	strb	r1, [r2, r3]
 enter_pressed = true;
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <line_append+0x7c>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	701a      	strb	r2, [r3, #0]
 // przetwarzamy dane

 printf("%s", line_buffer);
 80006e6:	4912      	ldr	r1, [pc, #72]	; (8000730 <line_append+0x78>)
 80006e8:	4813      	ldr	r0, [pc, #76]	; (8000738 <line_append+0x80>)
 80006ea:	f003 fe79 	bl	80043e0 <iprintf>
 received_number = atoi(line_buffer);
 80006ee:	4810      	ldr	r0, [pc, #64]	; (8000730 <line_append+0x78>)
 80006f0:	f003 fd23 	bl	800413a <atoi>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4a11      	ldr	r2, [pc, #68]	; (800073c <line_append+0x84>)
 80006f8:	6013      	str	r3, [r2, #0]

 // zaczynamy zbieranie danych od nowa
 line_length = 0;
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <line_append+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 if (line_length > 0) {
 8000700:	e00f      	b.n	8000722 <line_append+0x6a>
 }
 }
 else {
 if (line_length >= LINE_MAX_LENGTH) {
 8000702:	4b0a      	ldr	r3, [pc, #40]	; (800072c <line_append+0x74>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2b4f      	cmp	r3, #79	; 0x4f
 8000708:	d902      	bls.n	8000710 <line_append+0x58>
 // za dużo danych, usuwamy wszystko co
 // odebraliśmy
 line_length = 0;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <line_append+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 }
 // dopisujemy wartość do bufora
 line_buffer[line_length++] = value;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <line_append+0x74>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	1c5a      	adds	r2, r3, #1
 8000716:	4905      	ldr	r1, [pc, #20]	; (800072c <line_append+0x74>)
 8000718:	600a      	str	r2, [r1, #0]
 800071a:	4905      	ldr	r1, [pc, #20]	; (8000730 <line_append+0x78>)
 800071c:	79fa      	ldrb	r2, [r7, #7]
 800071e:	54ca      	strb	r2, [r1, r3]
 }
}
 8000720:	bf00      	nop
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200001e4 	.word	0x200001e4
 8000730:	20000190 	.word	0x20000190
 8000734:	2000014a 	.word	0x2000014a
 8000738:	0800515c 	.word	0x0800515c
 800073c:	20000140 	.word	0x20000140

08000740 <print_alarms>:

int hours = 0;
int minutes = 0;

void print_alarms(){
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b085      	sub	sp, #20
 8000744:	af02      	add	r7, sp, #8
	  printf("\n");
 8000746:	200a      	movs	r0, #10
 8000748:	f003 fe5c 	bl	8004404 <putchar>
	  int i;
	  for (i = 0; i < 5; i++) {
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	e017      	b.n	8000782 <print_alarms+0x42>
		  printf("%01d Alarmu %02d:%02d ->stan:%01d\n", i+1, alarms_time[0][i], alarms_time[1][i], alarms_time[2][i]);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	1c59      	adds	r1, r3, #1
 8000756:	4a10      	ldr	r2, [pc, #64]	; (8000798 <print_alarms+0x58>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800075e:	480e      	ldr	r0, [pc, #56]	; (8000798 <print_alarms+0x58>)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3305      	adds	r3, #5
 8000764:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8000768:	4c0b      	ldr	r4, [pc, #44]	; (8000798 <print_alarms+0x58>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	330a      	adds	r3, #10
 800076e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	4603      	mov	r3, r0
 8000776:	4809      	ldr	r0, [pc, #36]	; (800079c <print_alarms+0x5c>)
 8000778:	f003 fe32 	bl	80043e0 <iprintf>
	  for (i = 0; i < 5; i++) {
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3301      	adds	r3, #1
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2b04      	cmp	r3, #4
 8000786:	dde4      	ble.n	8000752 <print_alarms+0x12>
	  }
	  printf("\n");
 8000788:	200a      	movs	r0, #10
 800078a:	f003 fe3b 	bl	8004404 <putchar>
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	bd90      	pop	{r4, r7, pc}
 8000796:	bf00      	nop
 8000798:	2000014c 	.word	0x2000014c
 800079c:	08005160 	.word	0x08005160

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	b096      	sub	sp, #88	; 0x58
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a6:	f000 fccc 	bl	8001142 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007aa:	f000 f9b9 	bl	8000b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ae:	f000 fa75 	bl	8000c9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007b2:	f000 fa43 	bl	8000c3c <MX_USART2_UART_Init>
  MX_RTC_Init();
 80007b6:	f000 fa19 	bl	8000bec <MX_RTC_Init>
  MX_IWDG_Init();
 80007ba:	f000 f9f9 	bl	8000bb0 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  int i;
  for (i = 0; i < 10; i++){
 80007be:	2300      	movs	r3, #0
 80007c0:	657b      	str	r3, [r7, #84]	; 0x54
 80007c2:	e00a      	b.n	80007da <main+0x3a>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007c4:	2120      	movs	r1, #32
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ca:	f001 f813 	bl	80017f4 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80007ce:	2064      	movs	r0, #100	; 0x64
 80007d0:	f000 fd2c 	bl	800122c <HAL_Delay>
  for (i = 0; i < 10; i++){
 80007d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007d6:	3301      	adds	r3, #1
 80007d8:	657b      	str	r3, [r7, #84]	; 0x54
 80007da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007dc:	2b09      	cmp	r3, #9
 80007de:	ddf1      	ble.n	80007c4 <main+0x24>
  }
  uint32_t last_ms = HAL_GetTick();
 80007e0:	f000 fd18 	bl	8001214 <HAL_GetTick>
 80007e4:	6538      	str	r0, [r7, #80]	; 0x50
//  line_buffer = 5;
//  line_append(value);



	  const char message[] = "Set alarms time!\r\n";
 80007e6:	4ba8      	ldr	r3, [pc, #672]	; (8000a88 <main+0x2e8>)
 80007e8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80007ec:	461d      	mov	r5, r3
 80007ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f2:	682b      	ldr	r3, [r5, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	8022      	strh	r2, [r4, #0]
 80007f8:	3402      	adds	r4, #2
 80007fa:	0c1b      	lsrs	r3, r3, #16
 80007fc:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80007fe:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
 8000806:	2212      	movs	r2, #18
 8000808:	48a0      	ldr	r0, [pc, #640]	; (8000a8c <main+0x2ec>)
 800080a:	f002 fe79 	bl	8003500 <HAL_UART_Transmit>

	  	  	  // zerowanie czasu
	  		   RTC_TimeTypeDef new_time = {0};
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]
	  		   new_time.Hours = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	f887 3020 	strb.w	r3, [r7, #32]
	  		   new_time.Minutes = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	  		   new_time.Seconds = 30;
 800082a:	231e      	movs	r3, #30
 800082c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  		   HAL_RTC_SetTime(&hrtc, &new_time, RTC_FORMAT_BIN);
 8000830:	f107 0320 	add.w	r3, r7, #32
 8000834:	2200      	movs	r2, #0
 8000836:	4619      	mov	r1, r3
 8000838:	4895      	ldr	r0, [pc, #596]	; (8000a90 <main+0x2f0>)
 800083a:	f002 fbfd 	bl	8003038 <HAL_RTC_SetTime>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Watchdog
	  HAL_IWDG_Refresh(&hiwdg);
 800083e:	4895      	ldr	r0, [pc, #596]	; (8000a94 <main+0x2f4>)
 8000840:	f001 f841 	bl	80018c6 <HAL_IWDG_Refresh>
	  uint32_t now = HAL_GetTick();
 8000844:	f000 fce6 	bl	8001214 <HAL_GetTick>
 8000848:	64b8      	str	r0, [r7, #72]	; 0x48
	  if(now - last_ms >= 500){
 800084a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800084c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000854:	d307      	bcc.n	8000866 <main+0xc6>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000856:	2120      	movs	r1, #32
 8000858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085c:	f000 ffca 	bl	80017f4 <HAL_GPIO_TogglePin>
		  last_ms = HAL_GetTick();
 8000860:	f000 fcd8 	bl	8001214 <HAL_GetTick>
 8000864:	6538      	str	r0, [r7, #80]	; 0x50
//		  while(1){}
//	  }


	  // ustalanie godziny i minut alarmu
	  if (is_user_button_pressed(0)) {
 8000866:	2000      	movs	r0, #0
 8000868:	f7ff feea 	bl	8000640 <is_user_button_pressed>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d023      	beq.n	80008ba <main+0x11a>
		  if(user_button_pressed == false){
 8000872:	4b89      	ldr	r3, [pc, #548]	; (8000a98 <main+0x2f8>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	f083 0301 	eor.w	r3, r3, #1
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	f000 8084 	beq.w	800098a <main+0x1ea>
			  user_button_pressed = true;
 8000882:	4b85      	ldr	r3, [pc, #532]	; (8000a98 <main+0x2f8>)
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]
		  	led_set_1(2, true);
 8000888:	2101      	movs	r1, #1
 800088a:	2002      	movs	r0, #2
 800088c:	f7ff fe6e 	bl	800056c <led_set_1>
		  	hours ++;
 8000890:	4b82      	ldr	r3, [pc, #520]	; (8000a9c <main+0x2fc>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	4a81      	ldr	r2, [pc, #516]	; (8000a9c <main+0x2fc>)
 8000898:	6013      	str	r3, [r2, #0]
		  	if (hours >= 24){
 800089a:	4b80      	ldr	r3, [pc, #512]	; (8000a9c <main+0x2fc>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b17      	cmp	r3, #23
 80008a0:	dd02      	ble.n	80008a8 <main+0x108>
			  	hours = 0;
 80008a2:	4b7e      	ldr	r3, [pc, #504]	; (8000a9c <main+0x2fc>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
		  	}
		  	printf("Czas alarmu: %02d:%02d\n", hours, minutes);
 80008a8:	4b7c      	ldr	r3, [pc, #496]	; (8000a9c <main+0x2fc>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a7c      	ldr	r2, [pc, #496]	; (8000aa0 <main+0x300>)
 80008ae:	6812      	ldr	r2, [r2, #0]
 80008b0:	4619      	mov	r1, r3
 80008b2:	487c      	ldr	r0, [pc, #496]	; (8000aa4 <main+0x304>)
 80008b4:	f003 fd94 	bl	80043e0 <iprintf>
 80008b8:	e067      	b.n	800098a <main+0x1ea>
		  }
	  }
	  else if (is_user_button_pressed(1)) {
 80008ba:	2001      	movs	r0, #1
 80008bc:	f7ff fec0 	bl	8000640 <is_user_button_pressed>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d022      	beq.n	800090c <main+0x16c>
		  if(user_button_pressed == false){
 80008c6:	4b74      	ldr	r3, [pc, #464]	; (8000a98 <main+0x2f8>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	f083 0301 	eor.w	r3, r3, #1
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d05a      	beq.n	800098a <main+0x1ea>
			  user_button_pressed = true;
 80008d4:	4b70      	ldr	r3, [pc, #448]	; (8000a98 <main+0x2f8>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
			  led_set_1(1, true);
 80008da:	2101      	movs	r1, #1
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff fe45 	bl	800056c <led_set_1>
			  minutes++;
 80008e2:	4b6f      	ldr	r3, [pc, #444]	; (8000aa0 <main+0x300>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	3301      	adds	r3, #1
 80008e8:	4a6d      	ldr	r2, [pc, #436]	; (8000aa0 <main+0x300>)
 80008ea:	6013      	str	r3, [r2, #0]
			  if (minutes >= 60){
 80008ec:	4b6c      	ldr	r3, [pc, #432]	; (8000aa0 <main+0x300>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b3b      	cmp	r3, #59	; 0x3b
 80008f2:	dd02      	ble.n	80008fa <main+0x15a>
	 		 	minutes = 0;
 80008f4:	4b6a      	ldr	r3, [pc, #424]	; (8000aa0 <main+0x300>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
			  }
			  printf("Czas alarmu: %02d:%02d\n", hours, minutes);
 80008fa:	4b68      	ldr	r3, [pc, #416]	; (8000a9c <main+0x2fc>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a68      	ldr	r2, [pc, #416]	; (8000aa0 <main+0x300>)
 8000900:	6812      	ldr	r2, [r2, #0]
 8000902:	4619      	mov	r1, r3
 8000904:	4867      	ldr	r0, [pc, #412]	; (8000aa4 <main+0x304>)
 8000906:	f003 fd6b 	bl	80043e0 <iprintf>
 800090a:	e03e      	b.n	800098a <main+0x1ea>
		  }
	  }
	  else if (is_button_pressed()) {
 800090c:	f7ff fec2 	bl	8000694 <is_button_pressed>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d02e      	beq.n	8000974 <main+0x1d4>
		  if(user_button_pressed == false){
 8000916:	4b60      	ldr	r3, [pc, #384]	; (8000a98 <main+0x2f8>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	f083 0301 	eor.w	r3, r3, #1
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	d032      	beq.n	800098a <main+0x1ea>
			  user_button_pressed = true;
 8000924:	4b5c      	ldr	r3, [pc, #368]	; (8000a98 <main+0x2f8>)
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]
			  printf("\n");
 800092a:	200a      	movs	r0, #10
 800092c:	f003 fd6a 	bl	8004404 <putchar>
			  led_set_1(2, true);
 8000930:	2101      	movs	r1, #1
 8000932:	2002      	movs	r0, #2
 8000934:	f7ff fe1a 	bl	800056c <led_set_1>

			  if (alarm_number > 5){
 8000938:	4b5b      	ldr	r3, [pc, #364]	; (8000aa8 <main+0x308>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b05      	cmp	r3, #5
 800093e:	dd02      	ble.n	8000946 <main+0x1a6>
				  alarm_number = 1;
 8000940:	4b59      	ldr	r3, [pc, #356]	; (8000aa8 <main+0x308>)
 8000942:	2201      	movs	r2, #1
 8000944:	601a      	str	r2, [r3, #0]
			  }
			  alarms_time[0][alarm_number] = hours;
 8000946:	4b58      	ldr	r3, [pc, #352]	; (8000aa8 <main+0x308>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a54      	ldr	r2, [pc, #336]	; (8000a9c <main+0x2fc>)
 800094c:	6812      	ldr	r2, [r2, #0]
 800094e:	4957      	ldr	r1, [pc, #348]	; (8000aac <main+0x30c>)
 8000950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  alarms_time[1][alarm_number] = minutes;
 8000954:	4b54      	ldr	r3, [pc, #336]	; (8000aa8 <main+0x308>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a51      	ldr	r2, [pc, #324]	; (8000aa0 <main+0x300>)
 800095a:	6812      	ldr	r2, [r2, #0]
 800095c:	4953      	ldr	r1, [pc, #332]	; (8000aac <main+0x30c>)
 800095e:	3305      	adds	r3, #5
 8000960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			  print_alarms();
 8000964:	f7ff feec 	bl	8000740 <print_alarms>
			  alarm_number++;
 8000968:	4b4f      	ldr	r3, [pc, #316]	; (8000aa8 <main+0x308>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	3301      	adds	r3, #1
 800096e:	4a4e      	ldr	r2, [pc, #312]	; (8000aa8 <main+0x308>)
 8000970:	6013      	str	r3, [r2, #0]
 8000972:	e00a      	b.n	800098a <main+0x1ea>
		  }
	  }
	  else{
		  user_button_pressed = false;
 8000974:	4b48      	ldr	r3, [pc, #288]	; (8000a98 <main+0x2f8>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
		  led_set_1(1, false);
 800097a:	2100      	movs	r1, #0
 800097c:	2001      	movs	r0, #1
 800097e:	f7ff fdf5 	bl	800056c <led_set_1>
		  led_set_1(2, false);
 8000982:	2100      	movs	r1, #0
 8000984:	2002      	movs	r0, #2
 8000986:	f7ff fdf1 	bl	800056c <led_set_1>

	  // aktualny czas + wyswietlanie
	  RTC_TimeTypeDef time;
	  RTC_DateTypeDef date;
	  //wyświetlanie czasu
	   HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800098a:	f107 030c 	add.w	r3, r7, #12
 800098e:	2200      	movs	r2, #0
 8000990:	4619      	mov	r1, r3
 8000992:	483f      	ldr	r0, [pc, #252]	; (8000a90 <main+0x2f0>)
 8000994:	f002 fbed 	bl	8003172 <HAL_RTC_GetTime>
	   HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000998:	f107 0308 	add.w	r3, r7, #8
 800099c:	2200      	movs	r2, #0
 800099e:	4619      	mov	r1, r3
 80009a0:	483b      	ldr	r0, [pc, #236]	; (8000a90 <main+0x2f0>)
 80009a2:	f002 fc42 	bl	800322a <HAL_RTC_GetDate>
//		   printf("Aktualny czas: %02d:%02d:%02d\n", time.Hours, time.Minutes, time.Seconds);
//	   }



	   if(current_minute != time.Minutes){
 80009a6:	7b7b      	ldrb	r3, [r7, #13]
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b41      	ldr	r3, [pc, #260]	; (8000ab0 <main+0x310>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d03f      	beq.n	8000a32 <main+0x292>
		   current_minute = time.Minutes;
 80009b2:	7b7b      	ldrb	r3, [r7, #13]
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b3e      	ldr	r3, [pc, #248]	; (8000ab0 <main+0x310>)
 80009b8:	601a      	str	r2, [r3, #0]
		   print_alarms();
 80009ba:	f7ff fec1 	bl	8000740 <print_alarms>
		   //porównanie alarmu z czasem
//		   printf("-> checking alarms \n");
//		   printf("-> alarms_time[0][i] Hours: %d - %d \n", alarms_time[0][i],time.Hours);
//		   printf("-> alarms_time[1][i] Minutes: %d - %d \n", alarms_time[1][i],time.Minutes);
		   int i;
		   for (i = 0; i < 5; i++) {
 80009be:	2300      	movs	r3, #0
 80009c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009c2:	e030      	b.n	8000a26 <main+0x286>

			  if(alarms_time[0][i] == time.Hours && alarms_time[1][i] == time.Minutes){
 80009c4:	4a39      	ldr	r2, [pc, #228]	; (8000aac <main+0x30c>)
 80009c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009cc:	7b3a      	ldrb	r2, [r7, #12]
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d126      	bne.n	8000a20 <main+0x280>
 80009d2:	4a36      	ldr	r2, [pc, #216]	; (8000aac <main+0x30c>)
 80009d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009d6:	3305      	adds	r3, #5
 80009d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009dc:	7b7a      	ldrb	r2, [r7, #13]
 80009de:	4293      	cmp	r3, r2
 80009e0:	d11e      	bne.n	8000a20 <main+0x280>
				  printf("\n");
 80009e2:	200a      	movs	r0, #10
 80009e4:	f003 fd0e 	bl	8004404 <putchar>

				  if(alarms_time[2][i] == 1)
 80009e8:	4a30      	ldr	r2, [pc, #192]	; (8000aac <main+0x30c>)
 80009ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009ec:	330a      	adds	r3, #10
 80009ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d10a      	bne.n	8000a0c <main+0x26c>
				  {
					  led_set_1(3, true);
 80009f6:	2101      	movs	r1, #1
 80009f8:	2003      	movs	r0, #3
 80009fa:	f7ff fdb7 	bl	800056c <led_set_1>
					  printf("-> Alarm: %d, dioda: on\n", i+1);
 80009fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a00:	3301      	adds	r3, #1
 8000a02:	4619      	mov	r1, r3
 8000a04:	482b      	ldr	r0, [pc, #172]	; (8000ab4 <main+0x314>)
 8000a06:	f003 fceb 	bl	80043e0 <iprintf>
 8000a0a:	e009      	b.n	8000a20 <main+0x280>
				  }
				  else{
					  led_set_1(3, false);
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	2003      	movs	r0, #3
 8000a10:	f7ff fdac 	bl	800056c <led_set_1>
					  printf("!!! Alarm: %d, dioda: off\n", i+1);
 8000a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a16:	3301      	adds	r3, #1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4827      	ldr	r0, [pc, #156]	; (8000ab8 <main+0x318>)
 8000a1c:	f003 fce0 	bl	80043e0 <iprintf>
		   for (i = 0; i < 5; i++) {
 8000a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a22:	3301      	adds	r3, #1
 8000a24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a28:	2b04      	cmp	r3, #4
 8000a2a:	ddcb      	ble.n	80009c4 <main+0x224>
				  }
			  }
		   }
		   printf("\n");
 8000a2c:	200a      	movs	r0, #10
 8000a2e:	f003 fce9 	bl	8004404 <putchar>




	  uint8_t value;
	  if (HAL_UART_Receive(&huart2, &value, 1, 0) == HAL_OK)
 8000a32:	1df9      	adds	r1, r7, #7
 8000a34:	2300      	movs	r3, #0
 8000a36:	2201      	movs	r2, #1
 8000a38:	4814      	ldr	r0, [pc, #80]	; (8000a8c <main+0x2ec>)
 8000a3a:	f002 fdeb 	bl	8003614 <HAL_UART_Receive>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d103      	bne.n	8000a4c <main+0x2ac>
	  {
	      line_append(value);
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fe36 	bl	80006b8 <line_append>
	  }

	  if(enter_pressed){
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <main+0x31c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	f43f aef4 	beq.w	800083e <main+0x9e>
		  enter_pressed = false;
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <main+0x31c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
//	    	  printf("off ");
//	      }else{
//	    	  printf("on ");
//	      }
//	      printf("%d\n",received_number);
		  received_number = received_number - 1;
 8000a5c:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <main+0x320>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	3b01      	subs	r3, #1
 8000a62:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <main+0x320>)
 8000a64:	6013      	str	r3, [r2, #0]

	      if(alarms_time[2][received_number] == 0){
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <main+0x320>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a10      	ldr	r2, [pc, #64]	; (8000aac <main+0x30c>)
 8000a6c:	330a      	adds	r3, #10
 8000a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d126      	bne.n	8000ac4 <main+0x324>
	    	  alarms_time[2][received_number] = 1;
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <main+0x320>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a0c      	ldr	r2, [pc, #48]	; (8000aac <main+0x30c>)
 8000a7c:	330a      	adds	r3, #10
 8000a7e:	2101      	movs	r1, #1
 8000a80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a84:	e025      	b.n	8000ad2 <main+0x332>
 8000a86:	bf00      	nop
 8000a88:	080051d4 	.word	0x080051d4
 8000a8c:	200000b8 	.word	0x200000b8
 8000a90:	20000094 	.word	0x20000094
 8000a94:	20000084 	.word	0x20000084
 8000a98:	2000014b 	.word	0x2000014b
 8000a9c:	200001e8 	.word	0x200001e8
 8000aa0:	200001ec 	.word	0x200001ec
 8000aa4:	08005184 	.word	0x08005184
 8000aa8:	20000188 	.word	0x20000188
 8000aac:	2000014c 	.word	0x2000014c
 8000ab0:	2000018c 	.word	0x2000018c
 8000ab4:	0800519c 	.word	0x0800519c
 8000ab8:	080051b8 	.word	0x080051b8
 8000abc:	2000014a 	.word	0x2000014a
 8000ac0:	20000140 	.word	0x20000140
	      }else{
	    	  alarms_time[2][received_number] = 0;
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <main+0x374>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a13      	ldr	r2, [pc, #76]	; (8000b18 <main+0x378>)
 8000aca:	330a      	adds	r3, #10
 8000acc:	2100      	movs	r1, #0
 8000ace:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	      }

	      print_alarms();
 8000ad2:	f7ff fe35 	bl	8000740 <print_alarms>

	      led_states[received_number] = !led_states[received_number];
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <main+0x374>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a10      	ldr	r2, [pc, #64]	; (8000b1c <main+0x37c>)
 8000adc:	5cd3      	ldrb	r3, [r2, r3]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	bf14      	ite	ne
 8000ae2:	2301      	movne	r3, #1
 8000ae4:	2300      	moveq	r3, #0
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	f083 0301 	eor.w	r3, r3, #1
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	461a      	mov	r2, r3
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <main+0x374>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f002 0201 	and.w	r2, r2, #1
 8000af8:	b2d1      	uxtb	r1, r2
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <main+0x37c>)
 8000afc:	54d1      	strb	r1, [r2, r3]
	      led_set_1(received_number, led_states[received_number]);
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <main+0x374>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <main+0x374>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4905      	ldr	r1, [pc, #20]	; (8000b1c <main+0x37c>)
 8000b08:	5ccb      	ldrb	r3, [r1, r3]
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4610      	mov	r0, r2
 8000b0e:	f7ff fd2d 	bl	800056c <led_set_1>
  {
 8000b12:	e694      	b.n	800083e <main+0x9e>
 8000b14:	20000140 	.word	0x20000140
 8000b18:	2000014c 	.word	0x2000014c
 8000b1c:	20000144 	.word	0x20000144

08000b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b096      	sub	sp, #88	; 0x58
 8000b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	2244      	movs	r2, #68	; 0x44
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f003 fcb3 	bl	800449a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b34:	463b      	mov	r3, r7
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b42:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b46:	f000 fedd 	bl	8001904 <HAL_PWREx_ControlVoltageScaling>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b50:	f000 f936 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000b54:	2318      	movs	r3, #24
 8000b56:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b64:	2360      	movs	r3, #96	; 0x60
 8000b66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 ff1d 	bl	80019b0 <HAL_RCC_OscConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000b7c:	f000 f920 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b80:	230f      	movs	r3, #15
 8000b82:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b94:	463b      	mov	r3, r7
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f001 fae5 	bl	8002168 <HAL_RCC_ClockConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000ba4:	f000 f90c 	bl	8000dc0 <Error_Handler>
  }
}
 8000ba8:	bf00      	nop
 8000baa:	3758      	adds	r7, #88	; 0x58
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <MX_IWDG_Init+0x34>)
 8000bb6:	4a0c      	ldr	r2, [pc, #48]	; (8000be8 <MX_IWDG_Init+0x38>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8000bba:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <MX_IWDG_Init+0x34>)
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <MX_IWDG_Init+0x34>)
 8000bc2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000bc6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_IWDG_Init+0x34>)
 8000bca:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000bce:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000bd0:	4804      	ldr	r0, [pc, #16]	; (8000be4 <MX_IWDG_Init+0x34>)
 8000bd2:	f000 fe29 	bl	8001828 <HAL_IWDG_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000bdc:	f000 f8f0 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000084 	.word	0x20000084
 8000be8:	40003000 	.word	0x40003000

08000bec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <MX_RTC_Init+0x48>)
 8000bf2:	4a11      	ldr	r2, [pc, #68]	; (8000c38 <MX_RTC_Init+0x4c>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_RTC_Init+0x48>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <MX_RTC_Init+0x48>)
 8000bfe:	227f      	movs	r2, #127	; 0x7f
 8000c00:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_RTC_Init+0x48>)
 8000c04:	22ff      	movs	r2, #255	; 0xff
 8000c06:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <MX_RTC_Init+0x48>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_RTC_Init+0x48>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <MX_RTC_Init+0x48>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_RTC_Init+0x48>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_RTC_Init+0x48>)
 8000c22:	f002 f981 	bl	8002f28 <HAL_RTC_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000c2c:	f000 f8c8 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000094 	.word	0x20000094
 8000c38:	40002800 	.word	0x40002800

08000c3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c42:	4a15      	ldr	r2, [pc, #84]	; (8000c98 <MX_USART2_UART_Init+0x5c>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c80:	f002 fbf0 	bl	8003464 <HAL_UART_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c8a:	f000 f899 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200000b8 	.word	0x200000b8
 8000c98:	40004400 	.word	0x40004400

08000c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 030c 	add.w	r3, r7, #12
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	4b40      	ldr	r3, [pc, #256]	; (8000db4 <MX_GPIO_Init+0x118>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	4a3f      	ldr	r2, [pc, #252]	; (8000db4 <MX_GPIO_Init+0x118>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbe:	4b3d      	ldr	r3, [pc, #244]	; (8000db4 <MX_GPIO_Init+0x118>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b3a      	ldr	r3, [pc, #232]	; (8000db4 <MX_GPIO_Init+0x118>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	4a39      	ldr	r2, [pc, #228]	; (8000db4 <MX_GPIO_Init+0x118>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd6:	4b37      	ldr	r3, [pc, #220]	; (8000db4 <MX_GPIO_Init+0x118>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	4b34      	ldr	r3, [pc, #208]	; (8000db4 <MX_GPIO_Init+0x118>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	4a33      	ldr	r2, [pc, #204]	; (8000db4 <MX_GPIO_Init+0x118>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cee:	4b31      	ldr	r3, [pc, #196]	; (8000db4 <MX_GPIO_Init+0x118>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2120      	movs	r1, #32
 8000cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d02:	f000 fd5f 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED3_Pin|LED4_Pin|LED5_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 7158 	mov.w	r1, #864	; 0x360
 8000d0c:	482a      	ldr	r0, [pc, #168]	; (8000db8 <MX_GPIO_Init+0x11c>)
 8000d0e:	f000 fd59 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d18:	4828      	ldr	r0, [pc, #160]	; (8000dbc <MX_GPIO_Init+0x120>)
 8000d1a:	f000 fd53 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000d1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	4619      	mov	r1, r3
 8000d32:	4821      	ldr	r0, [pc, #132]	; (8000db8 <MX_GPIO_Init+0x11c>)
 8000d34:	f000 fb84 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d38:	2320      	movs	r3, #32
 8000d3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d52:	f000 fb75 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED5_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED5_Pin|LED2_Pin;
 8000d56:	f44f 7358 	mov.w	r3, #864	; 0x360
 8000d5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4812      	ldr	r0, [pc, #72]	; (8000db8 <MX_GPIO_Init+0x11c>)
 8000d70:	f000 fb66 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_BUTTON2_Pin USER_BUTTON3_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON2_Pin|USER_BUTTON3_Pin;
 8000d74:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	4619      	mov	r1, r3
 8000d88:	480c      	ldr	r0, [pc, #48]	; (8000dbc <MX_GPIO_Init+0x120>)
 8000d8a:	f000 fb59 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000d8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d94:	2301      	movs	r3, #1
 8000d96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	4619      	mov	r1, r3
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <MX_GPIO_Init+0x120>)
 8000da8:	f000 fb4a 	bl	8001440 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dac:	bf00      	nop
 8000dae:	3720      	adds	r7, #32
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40021000 	.word	0x40021000
 8000db8:	48000800 	.word	0x48000800
 8000dbc:	48000400 	.word	0x48000400

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <Error_Handler+0x8>
	...

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <HAL_MspInit+0x44>)
 8000dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd6:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <HAL_MspInit+0x44>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6613      	str	r3, [r2, #96]	; 0x60
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <HAL_MspInit+0x44>)
 8000de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_MspInit+0x44>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dee:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <HAL_MspInit+0x44>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df4:	6593      	str	r3, [r2, #88]	; 0x58
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_MspInit+0x44>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40021000 	.word	0x40021000

08000e14 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b0a4      	sub	sp, #144	; 0x90
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e1c:	f107 0308 	add.w	r3, r7, #8
 8000e20:	2288      	movs	r2, #136	; 0x88
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f003 fb38 	bl	800449a <memset>
  if(hrtc->Instance==RTC)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a10      	ldr	r2, [pc, #64]	; (8000e70 <HAL_RTC_MspInit+0x5c>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d118      	bne.n	8000e66 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e38:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 fbb2 	bl	80025b0 <HAL_RCCEx_PeriphCLKConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000e52:	f7ff ffb5 	bl	8000dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <HAL_RTC_MspInit+0x60>)
 8000e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e5c:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <HAL_RTC_MspInit+0x60>)
 8000e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e66:	bf00      	nop
 8000e68:	3790      	adds	r7, #144	; 0x90
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40002800 	.word	0x40002800
 8000e74:	40021000 	.word	0x40021000

08000e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b0ac      	sub	sp, #176	; 0xb0
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2288      	movs	r2, #136	; 0x88
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f003 fafe 	bl	800449a <memset>
  if(huart->Instance==USART2)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a21      	ldr	r2, [pc, #132]	; (8000f28 <HAL_UART_MspInit+0xb0>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d13b      	bne.n	8000f20 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f001 fb7b 	bl	80025b0 <HAL_RCCEx_PeriphCLKConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ec0:	f7ff ff7e 	bl	8000dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <HAL_UART_MspInit+0xb4>)
 8000ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec8:	4a18      	ldr	r2, [pc, #96]	; (8000f2c <HAL_UART_MspInit+0xb4>)
 8000eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ece:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <HAL_UART_MspInit+0xb4>)
 8000ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <HAL_UART_MspInit+0xb4>)
 8000ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee0:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <HAL_UART_MspInit+0xb4>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee8:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <HAL_UART_MspInit+0xb4>)
 8000eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ef4:	230c      	movs	r3, #12
 8000ef6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f0c:	2307      	movs	r3, #7
 8000f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f16:	4619      	mov	r1, r3
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1c:	f000 fa90 	bl	8001440 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f20:	bf00      	nop
 8000f22:	37b0      	adds	r7, #176	; 0xb0
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40004400 	.word	0x40004400
 8000f2c:	40021000 	.word	0x40021000

08000f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f34:	e7fe      	b.n	8000f34 <NMI_Handler+0x4>

08000f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <HardFault_Handler+0x4>

08000f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <MemManage_Handler+0x4>

08000f42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <BusFault_Handler+0x4>

08000f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <UsageFault_Handler+0x4>

08000f4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f7c:	f000 f936 	bl	80011ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	e00a      	b.n	8000fac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f96:	f3af 8000 	nop.w
 8000f9a:	4601      	mov	r1, r0
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	60ba      	str	r2, [r7, #8]
 8000fa2:	b2ca      	uxtb	r2, r1
 8000fa4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	dbf0      	blt.n	8000f96 <_read+0x12>
  }

  return len;
 8000fb4:	687b      	ldr	r3, [r7, #4]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	60f8      	str	r0, [r7, #12]
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	e009      	b.n	8000fe4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	60ba      	str	r2, [r7, #8]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fb11 	bl	8000600 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	dbf1      	blt.n	8000fd0 <_write+0x12>
  }
  return len;
 8000fec:	687b      	ldr	r3, [r7, #4]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_close>:

int _close(int file)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800101e:	605a      	str	r2, [r3, #4]
  return 0;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <_isatty>:

int _isatty(int file)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001068:	4a14      	ldr	r2, [pc, #80]	; (80010bc <_sbrk+0x5c>)
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <_sbrk+0x60>)
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <_sbrk+0x64>)
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <_sbrk+0x68>)
 8001080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	429a      	cmp	r2, r3
 800108e:	d207      	bcs.n	80010a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001090:	f003 fa52 	bl	8004538 <__errno>
 8001094:	4603      	mov	r3, r0
 8001096:	220c      	movs	r2, #12
 8001098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	e009      	b.n	80010b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a05      	ldr	r2, [pc, #20]	; (80010c4 <_sbrk+0x64>)
 80010b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20018000 	.word	0x20018000
 80010c0:	00000400 	.word	0x00000400
 80010c4:	200001f0 	.word	0x200001f0
 80010c8:	20000348 	.word	0x20000348

080010cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <SystemInit+0x20>)
 80010d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <SystemInit+0x20>)
 80010d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* Set stack pointer */
 80010f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001128 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010f4:	f7ff ffea 	bl	80010cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <LoopForever+0x6>)
  ldr r1, =_edata
 80010fa:	490d      	ldr	r1, [pc, #52]	; (8001130 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010fc:	4a0d      	ldr	r2, [pc, #52]	; (8001134 <LoopForever+0xe>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001100:	e002      	b.n	8001108 <LoopCopyDataInit>

08001102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001106:	3304      	adds	r3, #4

08001108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800110c:	d3f9      	bcc.n	8001102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001110:	4c0a      	ldr	r4, [pc, #40]	; (800113c <LoopForever+0x16>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001114:	e001      	b.n	800111a <LoopFillZerobss>

08001116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001118:	3204      	adds	r2, #4

0800111a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800111e:	f003 fa11 	bl	8004544 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001122:	f7ff fb3d 	bl	80007a0 <main>

08001126 <LoopForever>:

LoopForever:
    b LoopForever
 8001126:	e7fe      	b.n	8001126 <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* Set stack pointer */
 8001128:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800112c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001130:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001134:	08005374 	.word	0x08005374
  ldr r2, =_sbss
 8001138:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800113c:	20000344 	.word	0x20000344

08001140 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <ADC1_2_IRQHandler>

08001142 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114c:	2003      	movs	r0, #3
 800114e:	f000 f943 	bl	80013d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001152:	200f      	movs	r0, #15
 8001154:	f000 f80e 	bl	8001174 <HAL_InitTick>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d002      	beq.n	8001164 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	71fb      	strb	r3, [r7, #7]
 8001162:	e001      	b.n	8001168 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001164:	f7ff fe32 	bl	8000dcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001168:	79fb      	ldrb	r3, [r7, #7]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800117c:	2300      	movs	r3, #0
 800117e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <HAL_InitTick+0x6c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d023      	beq.n	80011d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <HAL_InitTick+0x70>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_InitTick+0x6c>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	fbb3 f3f1 	udiv	r3, r3, r1
 800119a:	fbb2 f3f3 	udiv	r3, r2, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f941 	bl	8001426 <HAL_SYSTICK_Config>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10f      	bne.n	80011ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	d809      	bhi.n	80011c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b0:	2200      	movs	r2, #0
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f000 f919 	bl	80013ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011bc:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <HAL_InitTick+0x74>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e007      	b.n	80011d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	e004      	b.n	80011d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	73fb      	strb	r3, [r7, #15]
 80011ce:	e001      	b.n	80011d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000004 	.word	0x20000004

080011ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_IncTick+0x20>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x24>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <HAL_IncTick+0x24>)
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008
 8001210:	200001f4 	.word	0x200001f4

08001214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return uwTick;
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_GetTick+0x14>)
 800121a:	681b      	ldr	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	200001f4 	.word	0x200001f4

0800122c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff ffee 	bl	8001214 <HAL_GetTick>
 8001238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001244:	d005      	beq.n	8001252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_Delay+0x44>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001252:	bf00      	nop
 8001254:	f7ff ffde 	bl	8001214 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	429a      	cmp	r2, r3
 8001262:	d8f7      	bhi.n	8001254 <HAL_Delay+0x28>
  {
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000008 	.word	0x20000008

08001274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001290:	4013      	ands	r3, r2
 8001292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800129c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a6:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	60d3      	str	r3, [r2, #12]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <__NVIC_GetPriorityGrouping+0x18>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	f003 0307 	and.w	r3, r3, #7
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	db0a      	blt.n	8001302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	490c      	ldr	r1, [pc, #48]	; (8001324 <__NVIC_SetPriority+0x4c>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	0112      	lsls	r2, r2, #4
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	440b      	add	r3, r1
 80012fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001300:	e00a      	b.n	8001318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4908      	ldr	r1, [pc, #32]	; (8001328 <__NVIC_SetPriority+0x50>)
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	3b04      	subs	r3, #4
 8001310:	0112      	lsls	r2, r2, #4
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	440b      	add	r3, r1
 8001316:	761a      	strb	r2, [r3, #24]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000e100 	.word	0xe000e100
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	; 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f1c3 0307 	rsb	r3, r3, #7
 8001346:	2b04      	cmp	r3, #4
 8001348:	bf28      	it	cs
 800134a:	2304      	movcs	r3, #4
 800134c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3304      	adds	r3, #4
 8001352:	2b06      	cmp	r3, #6
 8001354:	d902      	bls.n	800135c <NVIC_EncodePriority+0x30>
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3b03      	subs	r3, #3
 800135a:	e000      	b.n	800135e <NVIC_EncodePriority+0x32>
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	f04f 32ff 	mov.w	r2, #4294967295
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43da      	mvns	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	401a      	ands	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001374:	f04f 31ff 	mov.w	r1, #4294967295
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	43d9      	mvns	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	4313      	orrs	r3, r2
         );
}
 8001386:	4618      	mov	r0, r3
 8001388:	3724      	adds	r7, #36	; 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a4:	d301      	bcc.n	80013aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00f      	b.n	80013ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013aa:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <SysTick_Config+0x40>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b2:	210f      	movs	r1, #15
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f7ff ff8e 	bl	80012d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <SysTick_Config+0x40>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c2:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <SysTick_Config+0x40>)
 80013c4:	2207      	movs	r2, #7
 80013c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	e000e010 	.word	0xe000e010

080013d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff47 	bl	8001274 <__NVIC_SetPriorityGrouping>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001400:	f7ff ff5c 	bl	80012bc <__NVIC_GetPriorityGrouping>
 8001404:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f7ff ff8e 	bl	800132c <NVIC_EncodePriority>
 8001410:	4602      	mov	r2, r0
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff5d 	bl	80012d8 <__NVIC_SetPriority>
}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffb0 	bl	8001394 <SysTick_Config>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001440:	b480      	push	{r7}
 8001442:	b087      	sub	sp, #28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144e:	e17f      	b.n	8001750 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	2101      	movs	r1, #1
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	fa01 f303 	lsl.w	r3, r1, r3
 800145c:	4013      	ands	r3, r2
 800145e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 8171 	beq.w	800174a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	2b01      	cmp	r3, #1
 8001472:	d005      	beq.n	8001480 <HAL_GPIO_Init+0x40>
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d130      	bne.n	80014e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	2203      	movs	r2, #3
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b6:	2201      	movs	r2, #1
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	091b      	lsrs	r3, r3, #4
 80014cc:	f003 0201 	and.w	r2, r3, #1
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d118      	bne.n	8001520 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014f4:	2201      	movs	r2, #1
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	08db      	lsrs	r3, r3, #3
 800150a:	f003 0201 	and.w	r2, r3, #1
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	2b03      	cmp	r3, #3
 800152a:	d017      	beq.n	800155c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	2203      	movs	r2, #3
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d123      	bne.n	80015b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	08da      	lsrs	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3208      	adds	r2, #8
 8001570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	220f      	movs	r2, #15
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	08da      	lsrs	r2, r3, #3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3208      	adds	r2, #8
 80015aa:	6939      	ldr	r1, [r7, #16]
 80015ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	2203      	movs	r2, #3
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0203 	and.w	r2, r3, #3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80ac 	beq.w	800174a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f2:	4b5f      	ldr	r3, [pc, #380]	; (8001770 <HAL_GPIO_Init+0x330>)
 80015f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f6:	4a5e      	ldr	r2, [pc, #376]	; (8001770 <HAL_GPIO_Init+0x330>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6613      	str	r3, [r2, #96]	; 0x60
 80015fe:	4b5c      	ldr	r3, [pc, #368]	; (8001770 <HAL_GPIO_Init+0x330>)
 8001600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800160a:	4a5a      	ldr	r2, [pc, #360]	; (8001774 <HAL_GPIO_Init+0x334>)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	089b      	lsrs	r3, r3, #2
 8001610:	3302      	adds	r3, #2
 8001612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f003 0303 	and.w	r3, r3, #3
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	220f      	movs	r2, #15
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4013      	ands	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001634:	d025      	beq.n	8001682 <HAL_GPIO_Init+0x242>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a4f      	ldr	r2, [pc, #316]	; (8001778 <HAL_GPIO_Init+0x338>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d01f      	beq.n	800167e <HAL_GPIO_Init+0x23e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a4e      	ldr	r2, [pc, #312]	; (800177c <HAL_GPIO_Init+0x33c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d019      	beq.n	800167a <HAL_GPIO_Init+0x23a>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a4d      	ldr	r2, [pc, #308]	; (8001780 <HAL_GPIO_Init+0x340>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d013      	beq.n	8001676 <HAL_GPIO_Init+0x236>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a4c      	ldr	r2, [pc, #304]	; (8001784 <HAL_GPIO_Init+0x344>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d00d      	beq.n	8001672 <HAL_GPIO_Init+0x232>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4b      	ldr	r2, [pc, #300]	; (8001788 <HAL_GPIO_Init+0x348>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d007      	beq.n	800166e <HAL_GPIO_Init+0x22e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a4a      	ldr	r2, [pc, #296]	; (800178c <HAL_GPIO_Init+0x34c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d101      	bne.n	800166a <HAL_GPIO_Init+0x22a>
 8001666:	2306      	movs	r3, #6
 8001668:	e00c      	b.n	8001684 <HAL_GPIO_Init+0x244>
 800166a:	2307      	movs	r3, #7
 800166c:	e00a      	b.n	8001684 <HAL_GPIO_Init+0x244>
 800166e:	2305      	movs	r3, #5
 8001670:	e008      	b.n	8001684 <HAL_GPIO_Init+0x244>
 8001672:	2304      	movs	r3, #4
 8001674:	e006      	b.n	8001684 <HAL_GPIO_Init+0x244>
 8001676:	2303      	movs	r3, #3
 8001678:	e004      	b.n	8001684 <HAL_GPIO_Init+0x244>
 800167a:	2302      	movs	r3, #2
 800167c:	e002      	b.n	8001684 <HAL_GPIO_Init+0x244>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <HAL_GPIO_Init+0x244>
 8001682:	2300      	movs	r3, #0
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	f002 0203 	and.w	r2, r2, #3
 800168a:	0092      	lsls	r2, r2, #2
 800168c:	4093      	lsls	r3, r2
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001694:	4937      	ldr	r1, [pc, #220]	; (8001774 <HAL_GPIO_Init+0x334>)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	089b      	lsrs	r3, r3, #2
 800169a:	3302      	adds	r3, #2
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a2:	4b3b      	ldr	r3, [pc, #236]	; (8001790 <HAL_GPIO_Init+0x350>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c6:	4a32      	ldr	r2, [pc, #200]	; (8001790 <HAL_GPIO_Init+0x350>)
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016cc:	4b30      	ldr	r3, [pc, #192]	; (8001790 <HAL_GPIO_Init+0x350>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016f0:	4a27      	ldr	r2, [pc, #156]	; (8001790 <HAL_GPIO_Init+0x350>)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016f6:	4b26      	ldr	r3, [pc, #152]	; (8001790 <HAL_GPIO_Init+0x350>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	43db      	mvns	r3, r3
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800171a:	4a1d      	ldr	r2, [pc, #116]	; (8001790 <HAL_GPIO_Init+0x350>)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <HAL_GPIO_Init+0x350>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	43db      	mvns	r3, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001744:	4a12      	ldr	r2, [pc, #72]	; (8001790 <HAL_GPIO_Init+0x350>)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	3301      	adds	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa22 f303 	lsr.w	r3, r2, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	f47f ae78 	bne.w	8001450 <HAL_GPIO_Init+0x10>
  }
}
 8001760:	bf00      	nop
 8001762:	bf00      	nop
 8001764:	371c      	adds	r7, #28
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000
 8001774:	40010000 	.word	0x40010000
 8001778:	48000400 	.word	0x48000400
 800177c:	48000800 	.word	0x48000800
 8001780:	48000c00 	.word	0x48000c00
 8001784:	48001000 	.word	0x48001000
 8001788:	48001400 	.word	0x48001400
 800178c:	48001800 	.word	0x48001800
 8001790:	40010400 	.word	0x40010400

08001794 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691a      	ldr	r2, [r3, #16]
 80017a4:	887b      	ldrh	r3, [r7, #2]
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d002      	beq.n	80017b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
 80017b0:	e001      	b.n	80017b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
 80017d0:	4613      	mov	r3, r2
 80017d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d4:	787b      	ldrb	r3, [r7, #1]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017da:	887a      	ldrh	r2, [r7, #2]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017e0:	e002      	b.n	80017e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017e2:	887a      	ldrh	r2, [r7, #2]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001806:	887a      	ldrh	r2, [r7, #2]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4013      	ands	r3, r2
 800180c:	041a      	lsls	r2, r3, #16
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	43d9      	mvns	r1, r3
 8001812:	887b      	ldrh	r3, [r7, #2]
 8001814:	400b      	ands	r3, r1
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	619a      	str	r2, [r3, #24]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e041      	b.n	80018be <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001842:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f245 5255 	movw	r2, #21845	; 0x5555
 800184c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6852      	ldr	r2, [r2, #4]
 8001856:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6892      	ldr	r2, [r2, #8]
 8001860:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001862:	f7ff fcd7 	bl	8001214 <HAL_GetTick>
 8001866:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001868:	e00f      	b.n	800188a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800186a:	f7ff fcd3 	bl	8001214 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b31      	cmp	r3, #49	; 0x31
 8001876:	d908      	bls.n	800188a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e019      	b.n	80018be <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1e8      	bne.n	800186a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	691a      	ldr	r2, [r3, #16]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d005      	beq.n	80018b2 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68d2      	ldr	r2, [r2, #12]
 80018ae:	611a      	str	r2, [r3, #16]
 80018b0:	e004      	b.n	80018bc <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80018ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80018d6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <HAL_PWREx_GetVoltageRange+0x18>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40007000 	.word	0x40007000

08001904 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001912:	d130      	bne.n	8001976 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001914:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800191c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001920:	d038      	beq.n	8001994 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800192a:	4a1e      	ldr	r2, [pc, #120]	; (80019a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001930:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001932:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2232      	movs	r2, #50	; 0x32
 8001938:	fb02 f303 	mul.w	r3, r2, r3
 800193c:	4a1b      	ldr	r2, [pc, #108]	; (80019ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	0c9b      	lsrs	r3, r3, #18
 8001944:	3301      	adds	r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001948:	e002      	b.n	8001950 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	3b01      	subs	r3, #1
 800194e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001950:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800195c:	d102      	bne.n	8001964 <HAL_PWREx_ControlVoltageScaling+0x60>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f2      	bne.n	800194a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001970:	d110      	bne.n	8001994 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e00f      	b.n	8001996 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800197e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001982:	d007      	beq.n	8001994 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800198c:	4a05      	ldr	r2, [pc, #20]	; (80019a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800198e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001992:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40007000 	.word	0x40007000
 80019a8:	20000000 	.word	0x20000000
 80019ac:	431bde83 	.word	0x431bde83

080019b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e3ca      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019c2:	4b97      	ldr	r3, [pc, #604]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019cc:	4b94      	ldr	r3, [pc, #592]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 80e4 	beq.w	8001bac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <HAL_RCC_OscConfig+0x4a>
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	2b0c      	cmp	r3, #12
 80019ee:	f040 808b 	bne.w	8001b08 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	f040 8087 	bne.w	8001b08 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019fa:	4b89      	ldr	r3, [pc, #548]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d005      	beq.n	8001a12 <HAL_RCC_OscConfig+0x62>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e3a2      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a1a      	ldr	r2, [r3, #32]
 8001a16:	4b82      	ldr	r3, [pc, #520]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d004      	beq.n	8001a2c <HAL_RCC_OscConfig+0x7c>
 8001a22:	4b7f      	ldr	r3, [pc, #508]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a2a:	e005      	b.n	8001a38 <HAL_RCC_OscConfig+0x88>
 8001a2c:	4b7c      	ldr	r3, [pc, #496]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a32:	091b      	lsrs	r3, r3, #4
 8001a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d223      	bcs.n	8001a84 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 fd55 	bl	80024f0 <RCC_SetFlashLatencyFromMSIRange>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e383      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a50:	4b73      	ldr	r3, [pc, #460]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a72      	ldr	r2, [pc, #456]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a56:	f043 0308 	orr.w	r3, r3, #8
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	4b70      	ldr	r3, [pc, #448]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	496d      	ldr	r1, [pc, #436]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a6e:	4b6c      	ldr	r3, [pc, #432]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	4968      	ldr	r1, [pc, #416]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	604b      	str	r3, [r1, #4]
 8001a82:	e025      	b.n	8001ad0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a84:	4b66      	ldr	r3, [pc, #408]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a65      	ldr	r2, [pc, #404]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a8a:	f043 0308 	orr.w	r3, r3, #8
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4b63      	ldr	r3, [pc, #396]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	4960      	ldr	r1, [pc, #384]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aa2:	4b5f      	ldr	r3, [pc, #380]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	495b      	ldr	r1, [pc, #364]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d109      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 fd15 	bl	80024f0 <RCC_SetFlashLatencyFromMSIRange>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e343      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ad0:	f000 fc4a 	bl	8002368 <HAL_RCC_GetSysClockFreq>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	4b52      	ldr	r3, [pc, #328]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	091b      	lsrs	r3, r3, #4
 8001adc:	f003 030f 	and.w	r3, r3, #15
 8001ae0:	4950      	ldr	r1, [pc, #320]	; (8001c24 <HAL_RCC_OscConfig+0x274>)
 8001ae2:	5ccb      	ldrb	r3, [r1, r3]
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8001aec:	4a4e      	ldr	r2, [pc, #312]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001aee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001af0:	4b4e      	ldr	r3, [pc, #312]	; (8001c2c <HAL_RCC_OscConfig+0x27c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fb3d 	bl	8001174 <HAL_InitTick>
 8001afa:	4603      	mov	r3, r0
 8001afc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d052      	beq.n	8001baa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	e327      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d032      	beq.n	8001b76 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b10:	4b43      	ldr	r3, [pc, #268]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a42      	ldr	r2, [pc, #264]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fb7a 	bl	8001214 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b24:	f7ff fb76 	bl	8001214 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e310      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b36:	4b3a      	ldr	r3, [pc, #232]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b42:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a36      	ldr	r2, [pc, #216]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b48:	f043 0308 	orr.w	r3, r3, #8
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	4b34      	ldr	r3, [pc, #208]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	4931      	ldr	r1, [pc, #196]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b60:	4b2f      	ldr	r3, [pc, #188]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	492c      	ldr	r1, [pc, #176]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
 8001b74:	e01a      	b.n	8001bac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a29      	ldr	r2, [pc, #164]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	f023 0301 	bic.w	r3, r3, #1
 8001b80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b82:	f7ff fb47 	bl	8001214 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b8a:	f7ff fb43 	bl	8001214 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e2dd      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b9c:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f0      	bne.n	8001b8a <HAL_RCC_OscConfig+0x1da>
 8001ba8:	e000      	b.n	8001bac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001baa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d074      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d005      	beq.n	8001bca <HAL_RCC_OscConfig+0x21a>
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	2b0c      	cmp	r3, #12
 8001bc2:	d10e      	bne.n	8001be2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	d10b      	bne.n	8001be2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d064      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x2f0>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d160      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e2ba      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bea:	d106      	bne.n	8001bfa <HAL_RCC_OscConfig+0x24a>
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	e026      	b.n	8001c48 <HAL_RCC_OscConfig+0x298>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c02:	d115      	bne.n	8001c30 <HAL_RCC_OscConfig+0x280>
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001c0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a02      	ldr	r2, [pc, #8]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	e014      	b.n	8001c48 <HAL_RCC_OscConfig+0x298>
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000
 8001c24:	080051e8 	.word	0x080051e8
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	20000004 	.word	0x20000004
 8001c30:	4ba0      	ldr	r3, [pc, #640]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a9f      	ldr	r2, [pc, #636]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b9d      	ldr	r3, [pc, #628]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a9c      	ldr	r2, [pc, #624]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d013      	beq.n	8001c78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7ff fae0 	bl	8001214 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c58:	f7ff fadc 	bl	8001214 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	; 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e276      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c6a:	4b92      	ldr	r3, [pc, #584]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0x2a8>
 8001c76:	e014      	b.n	8001ca2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff facc 	bl	8001214 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff fac8 	bl	8001214 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e262      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c92:	4b88      	ldr	r3, [pc, #544]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x2d0>
 8001c9e:	e000      	b.n	8001ca2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d060      	beq.n	8001d70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x310>
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2b0c      	cmp	r3, #12
 8001cb8:	d119      	bne.n	8001cee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d116      	bne.n	8001cee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cc0:	4b7c      	ldr	r3, [pc, #496]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x328>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e23f      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd8:	4b76      	ldr	r3, [pc, #472]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	061b      	lsls	r3, r3, #24
 8001ce6:	4973      	ldr	r1, [pc, #460]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cec:	e040      	b.n	8001d70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d023      	beq.n	8001d3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf6:	4b6f      	ldr	r3, [pc, #444]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a6e      	ldr	r2, [pc, #440]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d02:	f7ff fa87 	bl	8001214 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d0a:	f7ff fa83 	bl	8001214 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e21d      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d1c:	4b65      	ldr	r3, [pc, #404]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d28:	4b62      	ldr	r3, [pc, #392]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	061b      	lsls	r3, r3, #24
 8001d36:	495f      	ldr	r1, [pc, #380]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
 8001d3c:	e018      	b.n	8001d70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3e:	4b5d      	ldr	r3, [pc, #372]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a5c      	ldr	r2, [pc, #368]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4a:	f7ff fa63 	bl	8001214 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d52:	f7ff fa5f 	bl	8001214 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e1f9      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d64:	4b53      	ldr	r3, [pc, #332]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1f0      	bne.n	8001d52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d03c      	beq.n	8001df6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d01c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d84:	4b4b      	ldr	r3, [pc, #300]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d8a:	4a4a      	ldr	r2, [pc, #296]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d94:	f7ff fa3e 	bl	8001214 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9c:	f7ff fa3a 	bl	8001214 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e1d4      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dae:	4b41      	ldr	r3, [pc, #260]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0ef      	beq.n	8001d9c <HAL_RCC_OscConfig+0x3ec>
 8001dbc:	e01b      	b.n	8001df6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dbe:	4b3d      	ldr	r3, [pc, #244]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc4:	4a3b      	ldr	r2, [pc, #236]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001dc6:	f023 0301 	bic.w	r3, r3, #1
 8001dca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dce:	f7ff fa21 	bl	8001214 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd6:	f7ff fa1d 	bl	8001214 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e1b7      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001de8:	4b32      	ldr	r3, [pc, #200]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1ef      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 80a6 	beq.w	8001f50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e04:	2300      	movs	r3, #0
 8001e06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e08:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10d      	bne.n	8001e30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e14:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e18:	4a26      	ldr	r2, [pc, #152]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e20:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e30:	4b21      	ldr	r3, [pc, #132]	; (8001eb8 <HAL_RCC_OscConfig+0x508>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d118      	bne.n	8001e6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e3c:	4b1e      	ldr	r3, [pc, #120]	; (8001eb8 <HAL_RCC_OscConfig+0x508>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a1d      	ldr	r2, [pc, #116]	; (8001eb8 <HAL_RCC_OscConfig+0x508>)
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e48:	f7ff f9e4 	bl	8001214 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e50:	f7ff f9e0 	bl	8001214 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e17a      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <HAL_RCC_OscConfig+0x508>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d108      	bne.n	8001e88 <HAL_RCC_OscConfig+0x4d8>
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e86:	e029      	b.n	8001edc <HAL_RCC_OscConfig+0x52c>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b05      	cmp	r3, #5
 8001e8e:	d115      	bne.n	8001ebc <HAL_RCC_OscConfig+0x50c>
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e96:	4a07      	ldr	r2, [pc, #28]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea6:	4a03      	ldr	r2, [pc, #12]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eb0:	e014      	b.n	8001edc <HAL_RCC_OscConfig+0x52c>
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40007000 	.word	0x40007000
 8001ebc:	4b9c      	ldr	r3, [pc, #624]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec2:	4a9b      	ldr	r2, [pc, #620]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ecc:	4b98      	ldr	r3, [pc, #608]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed2:	4a97      	ldr	r2, [pc, #604]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001ed4:	f023 0304 	bic.w	r3, r3, #4
 8001ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d016      	beq.n	8001f12 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee4:	f7ff f996 	bl	8001214 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eea:	e00a      	b.n	8001f02 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eec:	f7ff f992 	bl	8001214 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e12a      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f02:	4b8b      	ldr	r3, [pc, #556]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0ed      	beq.n	8001eec <HAL_RCC_OscConfig+0x53c>
 8001f10:	e015      	b.n	8001f3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f12:	f7ff f97f 	bl	8001214 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1a:	f7ff f97b 	bl	8001214 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e113      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f30:	4b7f      	ldr	r3, [pc, #508]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1ed      	bne.n	8001f1a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f3e:	7ffb      	ldrb	r3, [r7, #31]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d105      	bne.n	8001f50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f44:	4b7a      	ldr	r3, [pc, #488]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	4a79      	ldr	r2, [pc, #484]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80fe 	beq.w	8002156 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	f040 80d0 	bne.w	8002104 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f64:	4b72      	ldr	r3, [pc, #456]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f003 0203 	and.w	r2, r3, #3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d130      	bne.n	8001fda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	3b01      	subs	r3, #1
 8001f84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d127      	bne.n	8001fda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f94:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d11f      	bne.n	8001fda <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fa4:	2a07      	cmp	r2, #7
 8001fa6:	bf14      	ite	ne
 8001fa8:	2201      	movne	r2, #1
 8001faa:	2200      	moveq	r2, #0
 8001fac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d113      	bne.n	8001fda <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbc:	085b      	lsrs	r3, r3, #1
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d109      	bne.n	8001fda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	085b      	lsrs	r3, r3, #1
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d06e      	beq.n	80020b8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	2b0c      	cmp	r3, #12
 8001fde:	d069      	beq.n	80020b4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fe0:	4b53      	ldr	r3, [pc, #332]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d105      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fec:	4b50      	ldr	r3, [pc, #320]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0ad      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ffc:	4b4c      	ldr	r3, [pc, #304]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a4b      	ldr	r2, [pc, #300]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8002002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002006:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002008:	f7ff f904 	bl	8001214 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002010:	f7ff f900 	bl	8001214 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e09a      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002022:	4b43      	ldr	r3, [pc, #268]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800202e:	4b40      	ldr	r3, [pc, #256]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	4b40      	ldr	r3, [pc, #256]	; (8002134 <HAL_RCC_OscConfig+0x784>)
 8002034:	4013      	ands	r3, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800203e:	3a01      	subs	r2, #1
 8002040:	0112      	lsls	r2, r2, #4
 8002042:	4311      	orrs	r1, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002048:	0212      	lsls	r2, r2, #8
 800204a:	4311      	orrs	r1, r2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002050:	0852      	lsrs	r2, r2, #1
 8002052:	3a01      	subs	r2, #1
 8002054:	0552      	lsls	r2, r2, #21
 8002056:	4311      	orrs	r1, r2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800205c:	0852      	lsrs	r2, r2, #1
 800205e:	3a01      	subs	r2, #1
 8002060:	0652      	lsls	r2, r2, #25
 8002062:	4311      	orrs	r1, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002068:	0912      	lsrs	r2, r2, #4
 800206a:	0452      	lsls	r2, r2, #17
 800206c:	430a      	orrs	r2, r1
 800206e:	4930      	ldr	r1, [pc, #192]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8002070:	4313      	orrs	r3, r2
 8002072:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002074:	4b2e      	ldr	r3, [pc, #184]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a2d      	ldr	r2, [pc, #180]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 800207a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800207e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002080:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4a2a      	ldr	r2, [pc, #168]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8002086:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800208a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800208c:	f7ff f8c2 	bl	8001214 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002094:	f7ff f8be 	bl	8001214 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e058      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a6:	4b22      	ldr	r3, [pc, #136]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020b2:	e050      	b.n	8002156 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e04f      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d148      	bne.n	8002156 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020c4:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a19      	ldr	r2, [pc, #100]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 80020ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020d0:	4b17      	ldr	r3, [pc, #92]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4a16      	ldr	r2, [pc, #88]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 80020d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020dc:	f7ff f89a 	bl	8001214 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e4:	f7ff f896 	bl	8001214 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e030      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f6:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x734>
 8002102:	e028      	b.n	8002156 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	2b0c      	cmp	r3, #12
 8002108:	d023      	beq.n	8002152 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a08      	ldr	r2, [pc, #32]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8002110:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002116:	f7ff f87d 	bl	8001214 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800211c:	e00c      	b.n	8002138 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211e:	f7ff f879 	bl	8001214 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d905      	bls.n	8002138 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e013      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
 8002130:	40021000 	.word	0x40021000
 8002134:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002138:	4b09      	ldr	r3, [pc, #36]	; (8002160 <HAL_RCC_OscConfig+0x7b0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1ec      	bne.n	800211e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_RCC_OscConfig+0x7b0>)
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	4905      	ldr	r1, [pc, #20]	; (8002160 <HAL_RCC_OscConfig+0x7b0>)
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_RCC_OscConfig+0x7b4>)
 800214c:	4013      	ands	r3, r2
 800214e:	60cb      	str	r3, [r1, #12]
 8002150:	e001      	b.n	8002156 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3720      	adds	r7, #32
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	feeefffc 	.word	0xfeeefffc

08002168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0e7      	b.n	800234c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800217c:	4b75      	ldr	r3, [pc, #468]	; (8002354 <HAL_RCC_ClockConfig+0x1ec>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d910      	bls.n	80021ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218a:	4b72      	ldr	r3, [pc, #456]	; (8002354 <HAL_RCC_ClockConfig+0x1ec>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 0207 	bic.w	r2, r3, #7
 8002192:	4970      	ldr	r1, [pc, #448]	; (8002354 <HAL_RCC_ClockConfig+0x1ec>)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219a:	4b6e      	ldr	r3, [pc, #440]	; (8002354 <HAL_RCC_ClockConfig+0x1ec>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d001      	beq.n	80021ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0cf      	b.n	800234c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d010      	beq.n	80021da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	4b66      	ldr	r3, [pc, #408]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d908      	bls.n	80021da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c8:	4b63      	ldr	r3, [pc, #396]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	4960      	ldr	r1, [pc, #384]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d04c      	beq.n	8002280 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ee:	4b5a      	ldr	r3, [pc, #360]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d121      	bne.n	800223e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e0a6      	b.n	800234c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d107      	bne.n	8002216 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002206:	4b54      	ldr	r3, [pc, #336]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d115      	bne.n	800223e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e09a      	b.n	800234c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d107      	bne.n	800222e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800221e:	4b4e      	ldr	r3, [pc, #312]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d109      	bne.n	800223e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e08e      	b.n	800234c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800222e:	4b4a      	ldr	r3, [pc, #296]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e086      	b.n	800234c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800223e:	4b46      	ldr	r3, [pc, #280]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f023 0203 	bic.w	r2, r3, #3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	4943      	ldr	r1, [pc, #268]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 800224c:	4313      	orrs	r3, r2
 800224e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002250:	f7fe ffe0 	bl	8001214 <HAL_GetTick>
 8002254:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002256:	e00a      	b.n	800226e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002258:	f7fe ffdc 	bl	8001214 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	f241 3288 	movw	r2, #5000	; 0x1388
 8002266:	4293      	cmp	r3, r2
 8002268:	d901      	bls.n	800226e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e06e      	b.n	800234c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226e:	4b3a      	ldr	r3, [pc, #232]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 020c 	and.w	r2, r3, #12
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	429a      	cmp	r2, r3
 800227e:	d1eb      	bne.n	8002258 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d010      	beq.n	80022ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	4b31      	ldr	r3, [pc, #196]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002298:	429a      	cmp	r2, r3
 800229a:	d208      	bcs.n	80022ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229c:	4b2e      	ldr	r3, [pc, #184]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	492b      	ldr	r1, [pc, #172]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ae:	4b29      	ldr	r3, [pc, #164]	; (8002354 <HAL_RCC_ClockConfig+0x1ec>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d210      	bcs.n	80022de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022bc:	4b25      	ldr	r3, [pc, #148]	; (8002354 <HAL_RCC_ClockConfig+0x1ec>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f023 0207 	bic.w	r2, r3, #7
 80022c4:	4923      	ldr	r1, [pc, #140]	; (8002354 <HAL_RCC_ClockConfig+0x1ec>)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022cc:	4b21      	ldr	r3, [pc, #132]	; (8002354 <HAL_RCC_ClockConfig+0x1ec>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d001      	beq.n	80022de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e036      	b.n	800234c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d008      	beq.n	80022fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ea:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	4918      	ldr	r1, [pc, #96]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b00      	cmp	r3, #0
 8002306:	d009      	beq.n	800231c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002308:	4b13      	ldr	r3, [pc, #76]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4910      	ldr	r1, [pc, #64]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 8002318:	4313      	orrs	r3, r2
 800231a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800231c:	f000 f824 	bl	8002368 <HAL_RCC_GetSysClockFreq>
 8002320:	4602      	mov	r2, r0
 8002322:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	091b      	lsrs	r3, r3, #4
 8002328:	f003 030f 	and.w	r3, r3, #15
 800232c:	490b      	ldr	r1, [pc, #44]	; (800235c <HAL_RCC_ClockConfig+0x1f4>)
 800232e:	5ccb      	ldrb	r3, [r1, r3]
 8002330:	f003 031f 	and.w	r3, r3, #31
 8002334:	fa22 f303 	lsr.w	r3, r2, r3
 8002338:	4a09      	ldr	r2, [pc, #36]	; (8002360 <HAL_RCC_ClockConfig+0x1f8>)
 800233a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800233c:	4b09      	ldr	r3, [pc, #36]	; (8002364 <HAL_RCC_ClockConfig+0x1fc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe ff17 	bl	8001174 <HAL_InitTick>
 8002346:	4603      	mov	r3, r0
 8002348:	72fb      	strb	r3, [r7, #11]

  return status;
 800234a:	7afb      	ldrb	r3, [r7, #11]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40022000 	.word	0x40022000
 8002358:	40021000 	.word	0x40021000
 800235c:	080051e8 	.word	0x080051e8
 8002360:	20000000 	.word	0x20000000
 8002364:	20000004 	.word	0x20000004

08002368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	2300      	movs	r3, #0
 8002374:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002376:	4b3e      	ldr	r3, [pc, #248]	; (8002470 <HAL_RCC_GetSysClockFreq+0x108>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 030c 	and.w	r3, r3, #12
 800237e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002380:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <HAL_RCC_GetSysClockFreq+0x108>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_RCC_GetSysClockFreq+0x34>
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	2b0c      	cmp	r3, #12
 8002394:	d121      	bne.n	80023da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d11e      	bne.n	80023da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800239c:	4b34      	ldr	r3, [pc, #208]	; (8002470 <HAL_RCC_GetSysClockFreq+0x108>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d107      	bne.n	80023b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023a8:	4b31      	ldr	r3, [pc, #196]	; (8002470 <HAL_RCC_GetSysClockFreq+0x108>)
 80023aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ae:	0a1b      	lsrs	r3, r3, #8
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	e005      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023b8:	4b2d      	ldr	r3, [pc, #180]	; (8002470 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023c4:	4a2b      	ldr	r2, [pc, #172]	; (8002474 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10d      	bne.n	80023f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023d8:	e00a      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d102      	bne.n	80023e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023e0:	4b25      	ldr	r3, [pc, #148]	; (8002478 <HAL_RCC_GetSysClockFreq+0x110>)
 80023e2:	61bb      	str	r3, [r7, #24]
 80023e4:	e004      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023ec:	4b23      	ldr	r3, [pc, #140]	; (800247c <HAL_RCC_GetSysClockFreq+0x114>)
 80023ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	2b0c      	cmp	r3, #12
 80023f4:	d134      	bne.n	8002460 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023f6:	4b1e      	ldr	r3, [pc, #120]	; (8002470 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d003      	beq.n	800240e <HAL_RCC_GetSysClockFreq+0xa6>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d003      	beq.n	8002414 <HAL_RCC_GetSysClockFreq+0xac>
 800240c:	e005      	b.n	800241a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800240e:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <HAL_RCC_GetSysClockFreq+0x110>)
 8002410:	617b      	str	r3, [r7, #20]
      break;
 8002412:	e005      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002414:	4b19      	ldr	r3, [pc, #100]	; (800247c <HAL_RCC_GetSysClockFreq+0x114>)
 8002416:	617b      	str	r3, [r7, #20]
      break;
 8002418:	e002      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	617b      	str	r3, [r7, #20]
      break;
 800241e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002420:	4b13      	ldr	r3, [pc, #76]	; (8002470 <HAL_RCC_GetSysClockFreq+0x108>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	3301      	adds	r3, #1
 800242c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <HAL_RCC_GetSysClockFreq+0x108>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	0a1b      	lsrs	r3, r3, #8
 8002434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	fb03 f202 	mul.w	r2, r3, r2
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	fbb2 f3f3 	udiv	r3, r2, r3
 8002444:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <HAL_RCC_GetSysClockFreq+0x108>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	0e5b      	lsrs	r3, r3, #25
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	3301      	adds	r3, #1
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	fbb2 f3f3 	udiv	r3, r2, r3
 800245e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002460:	69bb      	ldr	r3, [r7, #24]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3724      	adds	r7, #36	; 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000
 8002474:	08005200 	.word	0x08005200
 8002478:	00f42400 	.word	0x00f42400
 800247c:	007a1200 	.word	0x007a1200

08002480 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <HAL_RCC_GetHCLKFreq+0x14>)
 8002486:	681b      	ldr	r3, [r3, #0]
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20000000 	.word	0x20000000

08002498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800249c:	f7ff fff0 	bl	8002480 <HAL_RCC_GetHCLKFreq>
 80024a0:	4602      	mov	r2, r0
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	4904      	ldr	r1, [pc, #16]	; (80024c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024ae:	5ccb      	ldrb	r3, [r1, r3]
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000
 80024c0:	080051f8 	.word	0x080051f8

080024c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024c8:	f7ff ffda 	bl	8002480 <HAL_RCC_GetHCLKFreq>
 80024cc:	4602      	mov	r2, r0
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	0adb      	lsrs	r3, r3, #11
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	4904      	ldr	r1, [pc, #16]	; (80024ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80024da:	5ccb      	ldrb	r3, [r1, r3]
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000
 80024ec:	080051f8 	.word	0x080051f8

080024f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024f8:	2300      	movs	r3, #0
 80024fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024fc:	4b2a      	ldr	r3, [pc, #168]	; (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002508:	f7ff f9ee 	bl	80018e8 <HAL_PWREx_GetVoltageRange>
 800250c:	6178      	str	r0, [r7, #20]
 800250e:	e014      	b.n	800253a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002510:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002514:	4a24      	ldr	r2, [pc, #144]	; (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251a:	6593      	str	r3, [r2, #88]	; 0x58
 800251c:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002528:	f7ff f9de 	bl	80018e8 <HAL_PWREx_GetVoltageRange>
 800252c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800252e:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002532:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002538:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002540:	d10b      	bne.n	800255a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b80      	cmp	r3, #128	; 0x80
 8002546:	d919      	bls.n	800257c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2ba0      	cmp	r3, #160	; 0xa0
 800254c:	d902      	bls.n	8002554 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800254e:	2302      	movs	r3, #2
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	e013      	b.n	800257c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002554:	2301      	movs	r3, #1
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	e010      	b.n	800257c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b80      	cmp	r3, #128	; 0x80
 800255e:	d902      	bls.n	8002566 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002560:	2303      	movs	r3, #3
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	e00a      	b.n	800257c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b80      	cmp	r3, #128	; 0x80
 800256a:	d102      	bne.n	8002572 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800256c:	2302      	movs	r3, #2
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	e004      	b.n	800257c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b70      	cmp	r3, #112	; 0x70
 8002576:	d101      	bne.n	800257c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002578:	2301      	movs	r3, #1
 800257a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 0207 	bic.w	r2, r3, #7
 8002584:	4909      	ldr	r1, [pc, #36]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800258c:	4b07      	ldr	r3, [pc, #28]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	429a      	cmp	r2, r3
 8002598:	d001      	beq.n	800259e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40022000 	.word	0x40022000

080025b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025b8:	2300      	movs	r3, #0
 80025ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025bc:	2300      	movs	r3, #0
 80025be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d041      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025d4:	d02a      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025da:	d824      	bhi.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025e0:	d008      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025e6:	d81e      	bhi.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00a      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025f0:	d010      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025f2:	e018      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025f4:	4b86      	ldr	r3, [pc, #536]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a85      	ldr	r2, [pc, #532]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002600:	e015      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3304      	adds	r3, #4
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f000 fabb 	bl	8002b84 <RCCEx_PLLSAI1_Config>
 800260e:	4603      	mov	r3, r0
 8002610:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002612:	e00c      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3320      	adds	r3, #32
 8002618:	2100      	movs	r1, #0
 800261a:	4618      	mov	r0, r3
 800261c:	f000 fba6 	bl	8002d6c <RCCEx_PLLSAI2_Config>
 8002620:	4603      	mov	r3, r0
 8002622:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002624:	e003      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	74fb      	strb	r3, [r7, #19]
      break;
 800262a:	e000      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800262c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800262e:	7cfb      	ldrb	r3, [r7, #19]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10b      	bne.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002634:	4b76      	ldr	r3, [pc, #472]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002642:	4973      	ldr	r1, [pc, #460]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800264a:	e001      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800264c:	7cfb      	ldrb	r3, [r7, #19]
 800264e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d041      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002660:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002664:	d02a      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002666:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800266a:	d824      	bhi.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800266c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002670:	d008      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002672:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002676:	d81e      	bhi.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800267c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002680:	d010      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002682:	e018      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002684:	4b62      	ldr	r3, [pc, #392]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4a61      	ldr	r2, [pc, #388]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002690:	e015      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3304      	adds	r3, #4
 8002696:	2100      	movs	r1, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f000 fa73 	bl	8002b84 <RCCEx_PLLSAI1_Config>
 800269e:	4603      	mov	r3, r0
 80026a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026a2:	e00c      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3320      	adds	r3, #32
 80026a8:	2100      	movs	r1, #0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fb5e 	bl	8002d6c <RCCEx_PLLSAI2_Config>
 80026b0:	4603      	mov	r3, r0
 80026b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026b4:	e003      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	74fb      	strb	r3, [r7, #19]
      break;
 80026ba:	e000      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80026bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026be:	7cfb      	ldrb	r3, [r7, #19]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10b      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026c4:	4b52      	ldr	r3, [pc, #328]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026d2:	494f      	ldr	r1, [pc, #316]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026da:	e001      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026dc:	7cfb      	ldrb	r3, [r7, #19]
 80026de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80a0 	beq.w	800282e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ee:	2300      	movs	r3, #0
 80026f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026f2:	4b47      	ldr	r3, [pc, #284]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002702:	2300      	movs	r3, #0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00d      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002708:	4b41      	ldr	r3, [pc, #260]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270c:	4a40      	ldr	r2, [pc, #256]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002712:	6593      	str	r3, [r2, #88]	; 0x58
 8002714:	4b3e      	ldr	r3, [pc, #248]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002720:	2301      	movs	r3, #1
 8002722:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002724:	4b3b      	ldr	r3, [pc, #236]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a3a      	ldr	r2, [pc, #232]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800272a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002730:	f7fe fd70 	bl	8001214 <HAL_GetTick>
 8002734:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002736:	e009      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002738:	f7fe fd6c 	bl	8001214 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d902      	bls.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	74fb      	strb	r3, [r7, #19]
        break;
 800274a:	e005      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800274c:	4b31      	ldr	r3, [pc, #196]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0ef      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002758:	7cfb      	ldrb	r3, [r7, #19]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d15c      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800275e:	4b2c      	ldr	r3, [pc, #176]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002768:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d01f      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	429a      	cmp	r2, r3
 800277a:	d019      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800277c:	4b24      	ldr	r3, [pc, #144]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002786:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002788:	4b21      	ldr	r3, [pc, #132]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278e:	4a20      	ldr	r2, [pc, #128]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002798:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279e:	4a1c      	ldr	r2, [pc, #112]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027a8:	4a19      	ldr	r2, [pc, #100]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d016      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ba:	f7fe fd2b 	bl	8001214 <HAL_GetTick>
 80027be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c0:	e00b      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c2:	f7fe fd27 	bl	8001214 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d902      	bls.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	74fb      	strb	r3, [r7, #19]
            break;
 80027d8:	e006      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027da:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0ec      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027e8:	7cfb      	ldrb	r3, [r7, #19]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10c      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ee:	4b08      	ldr	r3, [pc, #32]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027fe:	4904      	ldr	r1, [pc, #16]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002806:	e009      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002808:	7cfb      	ldrb	r3, [r7, #19]
 800280a:	74bb      	strb	r3, [r7, #18]
 800280c:	e006      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800280e:	bf00      	nop
 8002810:	40021000 	.word	0x40021000
 8002814:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002818:	7cfb      	ldrb	r3, [r7, #19]
 800281a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800281c:	7c7b      	ldrb	r3, [r7, #17]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d105      	bne.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002822:	4b9e      	ldr	r3, [pc, #632]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	4a9d      	ldr	r2, [pc, #628]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800283a:	4b98      	ldr	r3, [pc, #608]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	f023 0203 	bic.w	r2, r3, #3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002848:	4994      	ldr	r1, [pc, #592]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800285c:	4b8f      	ldr	r3, [pc, #572]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002862:	f023 020c 	bic.w	r2, r3, #12
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286a:	498c      	ldr	r1, [pc, #560]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800287e:	4b87      	ldr	r3, [pc, #540]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002884:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	4983      	ldr	r1, [pc, #524]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028a0:	4b7e      	ldr	r3, [pc, #504]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	497b      	ldr	r1, [pc, #492]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028c2:	4b76      	ldr	r3, [pc, #472]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d0:	4972      	ldr	r1, [pc, #456]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0320 	and.w	r3, r3, #32
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028e4:	4b6d      	ldr	r3, [pc, #436]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f2:	496a      	ldr	r1, [pc, #424]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002906:	4b65      	ldr	r3, [pc, #404]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002914:	4961      	ldr	r1, [pc, #388]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002928:	4b5c      	ldr	r3, [pc, #368]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002936:	4959      	ldr	r1, [pc, #356]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800294a:	4b54      	ldr	r3, [pc, #336]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002950:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002958:	4950      	ldr	r1, [pc, #320]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00a      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800296c:	4b4b      	ldr	r3, [pc, #300]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297a:	4948      	ldr	r1, [pc, #288]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00a      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800298e:	4b43      	ldr	r3, [pc, #268]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002994:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299c:	493f      	ldr	r1, [pc, #252]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d028      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029b0:	4b3a      	ldr	r3, [pc, #232]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029be:	4937      	ldr	r1, [pc, #220]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029ce:	d106      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d0:	4b32      	ldr	r3, [pc, #200]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4a31      	ldr	r2, [pc, #196]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029da:	60d3      	str	r3, [r2, #12]
 80029dc:	e011      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029e6:	d10c      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3304      	adds	r3, #4
 80029ec:	2101      	movs	r1, #1
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 f8c8 	bl	8002b84 <RCCEx_PLLSAI1_Config>
 80029f4:	4603      	mov	r3, r0
 80029f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029f8:	7cfb      	ldrb	r3, [r7, #19]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80029fe:	7cfb      	ldrb	r3, [r7, #19]
 8002a00:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d028      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a0e:	4b23      	ldr	r3, [pc, #140]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1c:	491f      	ldr	r1, [pc, #124]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a2c:	d106      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a2e:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	4a1a      	ldr	r2, [pc, #104]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a38:	60d3      	str	r3, [r2, #12]
 8002a3a:	e011      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a44:	d10c      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3304      	adds	r3, #4
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 f899 	bl	8002b84 <RCCEx_PLLSAI1_Config>
 8002a52:	4603      	mov	r3, r0
 8002a54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a56:	7cfb      	ldrb	r3, [r7, #19]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a5c:	7cfb      	ldrb	r3, [r7, #19]
 8002a5e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d02b      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7a:	4908      	ldr	r1, [pc, #32]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a8a:	d109      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4a02      	ldr	r2, [pc, #8]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a96:	60d3      	str	r3, [r2, #12]
 8002a98:	e014      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3304      	adds	r3, #4
 8002aae:	2101      	movs	r1, #1
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 f867 	bl	8002b84 <RCCEx_PLLSAI1_Config>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aba:	7cfb      	ldrb	r3, [r7, #19]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ac0:	7cfb      	ldrb	r3, [r7, #19]
 8002ac2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d02f      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ad0:	4b2b      	ldr	r3, [pc, #172]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ade:	4928      	ldr	r1, [pc, #160]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002aee:	d10d      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3304      	adds	r3, #4
 8002af4:	2102      	movs	r1, #2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 f844 	bl	8002b84 <RCCEx_PLLSAI1_Config>
 8002afc:	4603      	mov	r3, r0
 8002afe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b00:	7cfb      	ldrb	r3, [r7, #19]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d014      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b06:	7cfb      	ldrb	r3, [r7, #19]
 8002b08:	74bb      	strb	r3, [r7, #18]
 8002b0a:	e011      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b14:	d10c      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3320      	adds	r3, #32
 8002b1a:	2102      	movs	r1, #2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 f925 	bl	8002d6c <RCCEx_PLLSAI2_Config>
 8002b22:	4603      	mov	r3, r0
 8002b24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b26:	7cfb      	ldrb	r3, [r7, #19]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b2c:	7cfb      	ldrb	r3, [r7, #19]
 8002b2e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b3c:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b42:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b4a:	490d      	ldr	r1, [pc, #52]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00b      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b6e:	4904      	ldr	r1, [pc, #16]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b76:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40021000 	.word	0x40021000

08002b84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b92:	4b75      	ldr	r3, [pc, #468]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d018      	beq.n	8002bd0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b9e:	4b72      	ldr	r3, [pc, #456]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f003 0203 	and.w	r2, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d10d      	bne.n	8002bca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
       ||
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bb6:	4b6c      	ldr	r3, [pc, #432]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
       ||
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d047      	beq.n	8002c5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
 8002bce:	e044      	b.n	8002c5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d018      	beq.n	8002c0a <RCCEx_PLLSAI1_Config+0x86>
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d825      	bhi.n	8002c28 <RCCEx_PLLSAI1_Config+0xa4>
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d002      	beq.n	8002be6 <RCCEx_PLLSAI1_Config+0x62>
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d009      	beq.n	8002bf8 <RCCEx_PLLSAI1_Config+0x74>
 8002be4:	e020      	b.n	8002c28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002be6:	4b60      	ldr	r3, [pc, #384]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d11d      	bne.n	8002c2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bf6:	e01a      	b.n	8002c2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bf8:	4b5b      	ldr	r3, [pc, #364]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d116      	bne.n	8002c32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c08:	e013      	b.n	8002c32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c0a:	4b57      	ldr	r3, [pc, #348]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10f      	bne.n	8002c36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c16:	4b54      	ldr	r3, [pc, #336]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c26:	e006      	b.n	8002c36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c2c:	e004      	b.n	8002c38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c2e:	bf00      	nop
 8002c30:	e002      	b.n	8002c38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c32:	bf00      	nop
 8002c34:	e000      	b.n	8002c38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c36:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10d      	bne.n	8002c5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c3e:	4b4a      	ldr	r3, [pc, #296]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6819      	ldr	r1, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	430b      	orrs	r3, r1
 8002c54:	4944      	ldr	r1, [pc, #272]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d17d      	bne.n	8002d5c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c60:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a40      	ldr	r2, [pc, #256]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c6c:	f7fe fad2 	bl	8001214 <HAL_GetTick>
 8002c70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c72:	e009      	b.n	8002c88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c74:	f7fe face 	bl	8001214 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d902      	bls.n	8002c88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	73fb      	strb	r3, [r7, #15]
        break;
 8002c86:	e005      	b.n	8002c94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c88:	4b37      	ldr	r3, [pc, #220]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1ef      	bne.n	8002c74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d160      	bne.n	8002d5c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d111      	bne.n	8002cc4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ca0:	4b31      	ldr	r3, [pc, #196]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6892      	ldr	r2, [r2, #8]
 8002cb0:	0211      	lsls	r1, r2, #8
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68d2      	ldr	r2, [r2, #12]
 8002cb6:	0912      	lsrs	r2, r2, #4
 8002cb8:	0452      	lsls	r2, r2, #17
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	492a      	ldr	r1, [pc, #168]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	610b      	str	r3, [r1, #16]
 8002cc2:	e027      	b.n	8002d14 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d112      	bne.n	8002cf0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cca:	4b27      	ldr	r3, [pc, #156]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002cd2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6892      	ldr	r2, [r2, #8]
 8002cda:	0211      	lsls	r1, r2, #8
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6912      	ldr	r2, [r2, #16]
 8002ce0:	0852      	lsrs	r2, r2, #1
 8002ce2:	3a01      	subs	r2, #1
 8002ce4:	0552      	lsls	r2, r2, #21
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	491f      	ldr	r1, [pc, #124]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	610b      	str	r3, [r1, #16]
 8002cee:	e011      	b.n	8002d14 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002cf8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6892      	ldr	r2, [r2, #8]
 8002d00:	0211      	lsls	r1, r2, #8
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6952      	ldr	r2, [r2, #20]
 8002d06:	0852      	lsrs	r2, r2, #1
 8002d08:	3a01      	subs	r2, #1
 8002d0a:	0652      	lsls	r2, r2, #25
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	4916      	ldr	r1, [pc, #88]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d14:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a13      	ldr	r2, [pc, #76]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d20:	f7fe fa78 	bl	8001214 <HAL_GetTick>
 8002d24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d26:	e009      	b.n	8002d3c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d28:	f7fe fa74 	bl	8001214 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d902      	bls.n	8002d3c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	73fb      	strb	r3, [r7, #15]
          break;
 8002d3a:	e005      	b.n	8002d48 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d3c:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0ef      	beq.n	8002d28 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d50:	691a      	ldr	r2, [r3, #16]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	4904      	ldr	r1, [pc, #16]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40021000 	.word	0x40021000

08002d6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d7a:	4b6a      	ldr	r3, [pc, #424]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d018      	beq.n	8002db8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d86:	4b67      	ldr	r3, [pc, #412]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f003 0203 	and.w	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d10d      	bne.n	8002db2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
       ||
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d9e:	4b61      	ldr	r3, [pc, #388]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
       ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d047      	beq.n	8002e42 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
 8002db6:	e044      	b.n	8002e42 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d018      	beq.n	8002df2 <RCCEx_PLLSAI2_Config+0x86>
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d825      	bhi.n	8002e10 <RCCEx_PLLSAI2_Config+0xa4>
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d002      	beq.n	8002dce <RCCEx_PLLSAI2_Config+0x62>
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d009      	beq.n	8002de0 <RCCEx_PLLSAI2_Config+0x74>
 8002dcc:	e020      	b.n	8002e10 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dce:	4b55      	ldr	r3, [pc, #340]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d11d      	bne.n	8002e16 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dde:	e01a      	b.n	8002e16 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002de0:	4b50      	ldr	r3, [pc, #320]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d116      	bne.n	8002e1a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002df0:	e013      	b.n	8002e1a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002df2:	4b4c      	ldr	r3, [pc, #304]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10f      	bne.n	8002e1e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dfe:	4b49      	ldr	r3, [pc, #292]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e0e:	e006      	b.n	8002e1e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
      break;
 8002e14:	e004      	b.n	8002e20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e16:	bf00      	nop
 8002e18:	e002      	b.n	8002e20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e1a:	bf00      	nop
 8002e1c:	e000      	b.n	8002e20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10d      	bne.n	8002e42 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e26:	4b3f      	ldr	r3, [pc, #252]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6819      	ldr	r1, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	430b      	orrs	r3, r1
 8002e3c:	4939      	ldr	r1, [pc, #228]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d167      	bne.n	8002f18 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e48:	4b36      	ldr	r3, [pc, #216]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a35      	ldr	r2, [pc, #212]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e54:	f7fe f9de 	bl	8001214 <HAL_GetTick>
 8002e58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e5a:	e009      	b.n	8002e70 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e5c:	f7fe f9da 	bl	8001214 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d902      	bls.n	8002e70 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	73fb      	strb	r3, [r7, #15]
        break;
 8002e6e:	e005      	b.n	8002e7c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e70:	4b2c      	ldr	r3, [pc, #176]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1ef      	bne.n	8002e5c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d14a      	bne.n	8002f18 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d111      	bne.n	8002eac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e88:	4b26      	ldr	r3, [pc, #152]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6892      	ldr	r2, [r2, #8]
 8002e98:	0211      	lsls	r1, r2, #8
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68d2      	ldr	r2, [r2, #12]
 8002e9e:	0912      	lsrs	r2, r2, #4
 8002ea0:	0452      	lsls	r2, r2, #17
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	491f      	ldr	r1, [pc, #124]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	614b      	str	r3, [r1, #20]
 8002eaa:	e011      	b.n	8002ed0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eac:	4b1d      	ldr	r3, [pc, #116]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002eb4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6892      	ldr	r2, [r2, #8]
 8002ebc:	0211      	lsls	r1, r2, #8
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6912      	ldr	r2, [r2, #16]
 8002ec2:	0852      	lsrs	r2, r2, #1
 8002ec4:	3a01      	subs	r2, #1
 8002ec6:	0652      	lsls	r2, r2, #25
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	4916      	ldr	r1, [pc, #88]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ed0:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002edc:	f7fe f99a 	bl	8001214 <HAL_GetTick>
 8002ee0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ee2:	e009      	b.n	8002ef8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ee4:	f7fe f996 	bl	8001214 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d902      	bls.n	8002ef8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ef6:	e005      	b.n	8002f04 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ef8:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0ef      	beq.n	8002ee4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f0a:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0c:	695a      	ldr	r2, [r3, #20]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	4904      	ldr	r1, [pc, #16]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40021000 	.word	0x40021000

08002f28 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d079      	beq.n	800302e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fd ff60 	bl	8000e14 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b10      	cmp	r3, #16
 8002f68:	d058      	beq.n	800301c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	22ca      	movs	r2, #202	; 0xca
 8002f70:	625a      	str	r2, [r3, #36]	; 0x24
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2253      	movs	r2, #83	; 0x53
 8002f78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f9c6 	bl	800330c <RTC_EnterInitMode>
 8002f80:	4603      	mov	r3, r0
 8002f82:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d127      	bne.n	8002fda <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f9c:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6899      	ldr	r1, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	68d2      	ldr	r2, [r2, #12]
 8002fc4:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6919      	ldr	r1, [r3, #16]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	041a      	lsls	r2, r3, #16
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f9ca 	bl	8003374 <RTC_ExitInitMode>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d113      	bne.n	8003012 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0203 	bic.w	r2, r2, #3
 8002ff8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69da      	ldr	r2, [r3, #28]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	22ff      	movs	r2, #255	; 0xff
 8003018:	625a      	str	r2, [r3, #36]	; 0x24
 800301a:	e001      	b.n	8003020 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d103      	bne.n	800302e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 800302e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003038:	b590      	push	{r4, r7, lr}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f893 3020 	ldrb.w	r3, [r3, #32]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d101      	bne.n	8003052 <HAL_RTC_SetTime+0x1a>
 800304e:	2302      	movs	r3, #2
 8003050:	e08b      	b.n	800316a <HAL_RTC_SetTime+0x132>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2202      	movs	r2, #2
 800305e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	22ca      	movs	r2, #202	; 0xca
 8003068:	625a      	str	r2, [r3, #36]	; 0x24
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2253      	movs	r2, #83	; 0x53
 8003070:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 f94a 	bl	800330c <RTC_EnterInitMode>
 8003078:	4603      	mov	r3, r0
 800307a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800307c:	7cfb      	ldrb	r3, [r7, #19]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d163      	bne.n	800314a <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d126      	bne.n	80030d6 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003092:	2b00      	cmp	r3, #0
 8003094:	d102      	bne.n	800309c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2200      	movs	r2, #0
 800309a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 f9a5 	bl	80033f0 <RTC_ByteToBcd2>
 80030a6:	4603      	mov	r3, r0
 80030a8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	785b      	ldrb	r3, [r3, #1]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f99e 	bl	80033f0 <RTC_ByteToBcd2>
 80030b4:	4603      	mov	r3, r0
 80030b6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030b8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	789b      	ldrb	r3, [r3, #2]
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 f996 	bl	80033f0 <RTC_ByteToBcd2>
 80030c4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030c6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	78db      	ldrb	r3, [r3, #3]
 80030ce:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	e018      	b.n	8003108 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2200      	movs	r2, #0
 80030e8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	785b      	ldrb	r3, [r3, #1]
 80030f4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030f6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030fc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	78db      	ldrb	r3, [r3, #3]
 8003102:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003112:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003116:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003126:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6899      	ldr	r1, [r3, #8]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	431a      	orrs	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 f917 	bl	8003374 <RTC_ExitInitMode>
 8003146:	4603      	mov	r3, r0
 8003148:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	22ff      	movs	r2, #255	; 0xff
 8003150:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003152:	7cfb      	ldrb	r3, [r7, #19]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d103      	bne.n	8003160 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003168:	7cfb      	ldrb	r3, [r7, #19]
}
 800316a:	4618      	mov	r0, r3
 800316c:	371c      	adds	r7, #28
 800316e:	46bd      	mov	sp, r7
 8003170:	bd90      	pop	{r4, r7, pc}

08003172 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b086      	sub	sp, #24
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80031a0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80031a4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	0c1b      	lsrs	r3, r3, #16
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	0a1b      	lsrs	r3, r3, #8
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	0d9b      	lsrs	r3, r3, #22
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d11a      	bne.n	8003220 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 f91e 	bl	8003430 <RTC_Bcd2ToByte>
 80031f4:	4603      	mov	r3, r0
 80031f6:	461a      	mov	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	785b      	ldrb	r3, [r3, #1]
 8003200:	4618      	mov	r0, r3
 8003202:	f000 f915 	bl	8003430 <RTC_Bcd2ToByte>
 8003206:	4603      	mov	r3, r0
 8003208:	461a      	mov	r2, r3
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	789b      	ldrb	r3, [r3, #2]
 8003212:	4618      	mov	r0, r3
 8003214:	f000 f90c 	bl	8003430 <RTC_Bcd2ToByte>
 8003218:	4603      	mov	r3, r0
 800321a:	461a      	mov	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b086      	sub	sp, #24
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003240:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003244:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	0c1b      	lsrs	r3, r3, #16
 800324a:	b2da      	uxtb	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	0a1b      	lsrs	r3, r3, #8
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f003 031f 	and.w	r3, r3, #31
 800325a:	b2da      	uxtb	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	b2db      	uxtb	r3, r3
 8003264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003268:	b2da      	uxtb	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	0b5b      	lsrs	r3, r3, #13
 8003272:	b2db      	uxtb	r3, r3
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	b2da      	uxtb	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d11a      	bne.n	80032ba <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	78db      	ldrb	r3, [r3, #3]
 8003288:	4618      	mov	r0, r3
 800328a:	f000 f8d1 	bl	8003430 <RTC_Bcd2ToByte>
 800328e:	4603      	mov	r3, r0
 8003290:	461a      	mov	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	785b      	ldrb	r3, [r3, #1]
 800329a:	4618      	mov	r0, r3
 800329c:	f000 f8c8 	bl	8003430 <RTC_Bcd2ToByte>
 80032a0:	4603      	mov	r3, r0
 80032a2:	461a      	mov	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	789b      	ldrb	r3, [r3, #2]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 f8bf 	bl	8003430 <RTC_Bcd2ToByte>
 80032b2:	4603      	mov	r3, r0
 80032b4:	461a      	mov	r2, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0d      	ldr	r2, [pc, #52]	; (8003308 <HAL_RTC_WaitForSynchro+0x44>)
 80032d2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80032d4:	f7fd ff9e 	bl	8001214 <HAL_GetTick>
 80032d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80032da:	e009      	b.n	80032f0 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032dc:	f7fd ff9a 	bl	8001214 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ea:	d901      	bls.n	80032f0 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e007      	b.n	8003300 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0ee      	beq.n	80032dc <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	0003ff5f 	.word	0x0003ff5f

0800330c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d120      	bne.n	8003368 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f04f 32ff 	mov.w	r2, #4294967295
 800332e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003330:	f7fd ff70 	bl	8001214 <HAL_GetTick>
 8003334:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003336:	e00d      	b.n	8003354 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003338:	f7fd ff6c 	bl	8001214 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003346:	d905      	bls.n	8003354 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2203      	movs	r2, #3
 8003350:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d102      	bne.n	8003368 <RTC_EnterInitMode+0x5c>
 8003362:	7bfb      	ldrb	r3, [r7, #15]
 8003364:	2b03      	cmp	r3, #3
 8003366:	d1e7      	bne.n	8003338 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003368:	7bfb      	ldrb	r3, [r7, #15]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003380:	4b1a      	ldr	r3, [pc, #104]	; (80033ec <RTC_ExitInitMode+0x78>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	4a19      	ldr	r2, [pc, #100]	; (80033ec <RTC_ExitInitMode+0x78>)
 8003386:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800338a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800338c:	4b17      	ldr	r3, [pc, #92]	; (80033ec <RTC_ExitInitMode+0x78>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 0320 	and.w	r3, r3, #32
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10c      	bne.n	80033b2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff ff93 	bl	80032c4 <HAL_RTC_WaitForSynchro>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d01e      	beq.n	80033e2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2203      	movs	r2, #3
 80033a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	73fb      	strb	r3, [r7, #15]
 80033b0:	e017      	b.n	80033e2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80033b2:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <RTC_ExitInitMode+0x78>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	4a0d      	ldr	r2, [pc, #52]	; (80033ec <RTC_ExitInitMode+0x78>)
 80033b8:	f023 0320 	bic.w	r3, r3, #32
 80033bc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff ff80 	bl	80032c4 <HAL_RTC_WaitForSynchro>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2203      	movs	r2, #3
 80033ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80033d6:	4b05      	ldr	r3, [pc, #20]	; (80033ec <RTC_ExitInitMode+0x78>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	4a04      	ldr	r2, [pc, #16]	; (80033ec <RTC_ExitInitMode+0x78>)
 80033dc:	f043 0320 	orr.w	r3, r3, #32
 80033e0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40002800 	.word	0x40002800

080033f0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003402:	e005      	b.n	8003410 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	3301      	adds	r3, #1
 8003408:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800340a:	7afb      	ldrb	r3, [r7, #11]
 800340c:	3b0a      	subs	r3, #10
 800340e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003410:	7afb      	ldrb	r3, [r7, #11]
 8003412:	2b09      	cmp	r3, #9
 8003414:	d8f6      	bhi.n	8003404 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	b2da      	uxtb	r2, r3
 800341e:	7afb      	ldrb	r3, [r7, #11]
 8003420:	4313      	orrs	r3, r2
 8003422:	b2db      	uxtb	r3, r3
}
 8003424:	4618      	mov	r0, r3
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	091b      	lsrs	r3, r3, #4
 800343e:	b2db      	uxtb	r3, r3
 8003440:	461a      	mov	r2, r3
 8003442:	0092      	lsls	r2, r2, #2
 8003444:	4413      	add	r3, r2
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	b2da      	uxtb	r2, r3
 8003452:	7bfb      	ldrb	r3, [r7, #15]
 8003454:	4413      	add	r3, r2
 8003456:	b2db      	uxtb	r3, r3
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e040      	b.n	80034f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fd fcf6 	bl	8000e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2224      	movs	r2, #36	; 0x24
 8003490:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0201 	bic.w	r2, r2, #1
 80034a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fc30 	bl	8003d10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f979 	bl	80037a8 <UART_SetConfig>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e01b      	b.n	80034f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fcaf 	bl	8003e54 <UART_CheckIdleState>
 80034f6:	4603      	mov	r3, r0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08a      	sub	sp, #40	; 0x28
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003514:	2b20      	cmp	r3, #32
 8003516:	d178      	bne.n	800360a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_UART_Transmit+0x24>
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e071      	b.n	800360c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2221      	movs	r2, #33	; 0x21
 8003534:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003536:	f7fd fe6d 	bl	8001214 <HAL_GetTick>
 800353a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	88fa      	ldrh	r2, [r7, #6]
 8003540:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	88fa      	ldrh	r2, [r7, #6]
 8003548:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003554:	d108      	bne.n	8003568 <HAL_UART_Transmit+0x68>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d104      	bne.n	8003568 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	e003      	b.n	8003570 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800356c:	2300      	movs	r3, #0
 800356e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003570:	e030      	b.n	80035d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2200      	movs	r2, #0
 800357a:	2180      	movs	r1, #128	; 0x80
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 fd11 	bl	8003fa4 <UART_WaitOnFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d004      	beq.n	8003592 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e03c      	b.n	800360c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10b      	bne.n	80035b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	881a      	ldrh	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035a4:	b292      	uxth	r2, r2
 80035a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	3302      	adds	r3, #2
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	e008      	b.n	80035c2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	781a      	ldrb	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	b292      	uxth	r2, r2
 80035ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	3301      	adds	r3, #1
 80035c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1c8      	bne.n	8003572 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2200      	movs	r2, #0
 80035e8:	2140      	movs	r1, #64	; 0x40
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 fcda 	bl	8003fa4 <UART_WaitOnFlagUntilTimeout>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d004      	beq.n	8003600 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e005      	b.n	800360c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2220      	movs	r2, #32
 8003604:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	e000      	b.n	800360c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800360a:	2302      	movs	r3, #2
  }
}
 800360c:	4618      	mov	r0, r3
 800360e:	3720      	adds	r7, #32
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	; 0x28
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	4613      	mov	r3, r2
 8003622:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800362a:	2b20      	cmp	r3, #32
 800362c:	f040 80b6 	bne.w	800379c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <HAL_UART_Receive+0x28>
 8003636:	88fb      	ldrh	r3, [r7, #6]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0ae      	b.n	800379e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2222      	movs	r2, #34	; 0x22
 800364c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003656:	f7fd fddd 	bl	8001214 <HAL_GetTick>
 800365a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	88fa      	ldrh	r2, [r7, #6]
 8003660:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	88fa      	ldrh	r2, [r7, #6]
 8003668:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003674:	d10e      	bne.n	8003694 <HAL_UART_Receive+0x80>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d105      	bne.n	800368a <HAL_UART_Receive+0x76>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003684:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003688:	e02d      	b.n	80036e6 <HAL_UART_Receive+0xd2>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	22ff      	movs	r2, #255	; 0xff
 800368e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003692:	e028      	b.n	80036e6 <HAL_UART_Receive+0xd2>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10d      	bne.n	80036b8 <HAL_UART_Receive+0xa4>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d104      	bne.n	80036ae <HAL_UART_Receive+0x9a>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	22ff      	movs	r2, #255	; 0xff
 80036a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036ac:	e01b      	b.n	80036e6 <HAL_UART_Receive+0xd2>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	227f      	movs	r2, #127	; 0x7f
 80036b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036b6:	e016      	b.n	80036e6 <HAL_UART_Receive+0xd2>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036c0:	d10d      	bne.n	80036de <HAL_UART_Receive+0xca>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d104      	bne.n	80036d4 <HAL_UART_Receive+0xc0>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	227f      	movs	r2, #127	; 0x7f
 80036ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036d2:	e008      	b.n	80036e6 <HAL_UART_Receive+0xd2>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	223f      	movs	r2, #63	; 0x3f
 80036d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036dc:	e003      	b.n	80036e6 <HAL_UART_Receive+0xd2>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80036ec:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f6:	d108      	bne.n	800370a <HAL_UART_Receive+0xf6>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d104      	bne.n	800370a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003700:	2300      	movs	r3, #0
 8003702:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	61bb      	str	r3, [r7, #24]
 8003708:	e003      	b.n	8003712 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800370e:	2300      	movs	r3, #0
 8003710:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003712:	e037      	b.n	8003784 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2200      	movs	r2, #0
 800371c:	2120      	movs	r1, #32
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fc40 	bl	8003fa4 <UART_WaitOnFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2220      	movs	r2, #32
 800372e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e033      	b.n	800379e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10c      	bne.n	8003756 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003742:	b29a      	uxth	r2, r3
 8003744:	8a7b      	ldrh	r3, [r7, #18]
 8003746:	4013      	ands	r3, r2
 8003748:	b29a      	uxth	r2, r3
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	3302      	adds	r3, #2
 8003752:	61bb      	str	r3, [r7, #24]
 8003754:	e00d      	b.n	8003772 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800375c:	b29b      	uxth	r3, r3
 800375e:	b2da      	uxtb	r2, r3
 8003760:	8a7b      	ldrh	r3, [r7, #18]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	4013      	ands	r3, r2
 8003766:	b2da      	uxtb	r2, r3
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	3301      	adds	r3, #1
 8003770:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1c1      	bne.n	8003714 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	e000      	b.n	800379e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800379c:	2302      	movs	r3, #2
  }
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3720      	adds	r7, #32
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037ac:	b08a      	sub	sp, #40	; 0x28
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	431a      	orrs	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4ba4      	ldr	r3, [pc, #656]	; (8003a68 <UART_SetConfig+0x2c0>)
 80037d8:	4013      	ands	r3, r2
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037e0:	430b      	orrs	r3, r1
 80037e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a99      	ldr	r2, [pc, #612]	; (8003a6c <UART_SetConfig+0x2c4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003810:	4313      	orrs	r3, r2
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003824:	430a      	orrs	r2, r1
 8003826:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a90      	ldr	r2, [pc, #576]	; (8003a70 <UART_SetConfig+0x2c8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d126      	bne.n	8003880 <UART_SetConfig+0xd8>
 8003832:	4b90      	ldr	r3, [pc, #576]	; (8003a74 <UART_SetConfig+0x2cc>)
 8003834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	2b03      	cmp	r3, #3
 800383e:	d81b      	bhi.n	8003878 <UART_SetConfig+0xd0>
 8003840:	a201      	add	r2, pc, #4	; (adr r2, 8003848 <UART_SetConfig+0xa0>)
 8003842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003846:	bf00      	nop
 8003848:	08003859 	.word	0x08003859
 800384c:	08003869 	.word	0x08003869
 8003850:	08003861 	.word	0x08003861
 8003854:	08003871 	.word	0x08003871
 8003858:	2301      	movs	r3, #1
 800385a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800385e:	e116      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003860:	2302      	movs	r3, #2
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003866:	e112      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003868:	2304      	movs	r3, #4
 800386a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800386e:	e10e      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003870:	2308      	movs	r3, #8
 8003872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003876:	e10a      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003878:	2310      	movs	r3, #16
 800387a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800387e:	e106      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a7c      	ldr	r2, [pc, #496]	; (8003a78 <UART_SetConfig+0x2d0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d138      	bne.n	80038fc <UART_SetConfig+0x154>
 800388a:	4b7a      	ldr	r3, [pc, #488]	; (8003a74 <UART_SetConfig+0x2cc>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003890:	f003 030c 	and.w	r3, r3, #12
 8003894:	2b0c      	cmp	r3, #12
 8003896:	d82d      	bhi.n	80038f4 <UART_SetConfig+0x14c>
 8003898:	a201      	add	r2, pc, #4	; (adr r2, 80038a0 <UART_SetConfig+0xf8>)
 800389a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389e:	bf00      	nop
 80038a0:	080038d5 	.word	0x080038d5
 80038a4:	080038f5 	.word	0x080038f5
 80038a8:	080038f5 	.word	0x080038f5
 80038ac:	080038f5 	.word	0x080038f5
 80038b0:	080038e5 	.word	0x080038e5
 80038b4:	080038f5 	.word	0x080038f5
 80038b8:	080038f5 	.word	0x080038f5
 80038bc:	080038f5 	.word	0x080038f5
 80038c0:	080038dd 	.word	0x080038dd
 80038c4:	080038f5 	.word	0x080038f5
 80038c8:	080038f5 	.word	0x080038f5
 80038cc:	080038f5 	.word	0x080038f5
 80038d0:	080038ed 	.word	0x080038ed
 80038d4:	2300      	movs	r3, #0
 80038d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038da:	e0d8      	b.n	8003a8e <UART_SetConfig+0x2e6>
 80038dc:	2302      	movs	r3, #2
 80038de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038e2:	e0d4      	b.n	8003a8e <UART_SetConfig+0x2e6>
 80038e4:	2304      	movs	r3, #4
 80038e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ea:	e0d0      	b.n	8003a8e <UART_SetConfig+0x2e6>
 80038ec:	2308      	movs	r3, #8
 80038ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038f2:	e0cc      	b.n	8003a8e <UART_SetConfig+0x2e6>
 80038f4:	2310      	movs	r3, #16
 80038f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038fa:	e0c8      	b.n	8003a8e <UART_SetConfig+0x2e6>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a5e      	ldr	r2, [pc, #376]	; (8003a7c <UART_SetConfig+0x2d4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d125      	bne.n	8003952 <UART_SetConfig+0x1aa>
 8003906:	4b5b      	ldr	r3, [pc, #364]	; (8003a74 <UART_SetConfig+0x2cc>)
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003910:	2b30      	cmp	r3, #48	; 0x30
 8003912:	d016      	beq.n	8003942 <UART_SetConfig+0x19a>
 8003914:	2b30      	cmp	r3, #48	; 0x30
 8003916:	d818      	bhi.n	800394a <UART_SetConfig+0x1a2>
 8003918:	2b20      	cmp	r3, #32
 800391a:	d00a      	beq.n	8003932 <UART_SetConfig+0x18a>
 800391c:	2b20      	cmp	r3, #32
 800391e:	d814      	bhi.n	800394a <UART_SetConfig+0x1a2>
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <UART_SetConfig+0x182>
 8003924:	2b10      	cmp	r3, #16
 8003926:	d008      	beq.n	800393a <UART_SetConfig+0x192>
 8003928:	e00f      	b.n	800394a <UART_SetConfig+0x1a2>
 800392a:	2300      	movs	r3, #0
 800392c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003930:	e0ad      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003932:	2302      	movs	r3, #2
 8003934:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003938:	e0a9      	b.n	8003a8e <UART_SetConfig+0x2e6>
 800393a:	2304      	movs	r3, #4
 800393c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003940:	e0a5      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003942:	2308      	movs	r3, #8
 8003944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003948:	e0a1      	b.n	8003a8e <UART_SetConfig+0x2e6>
 800394a:	2310      	movs	r3, #16
 800394c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003950:	e09d      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a4a      	ldr	r2, [pc, #296]	; (8003a80 <UART_SetConfig+0x2d8>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d125      	bne.n	80039a8 <UART_SetConfig+0x200>
 800395c:	4b45      	ldr	r3, [pc, #276]	; (8003a74 <UART_SetConfig+0x2cc>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003962:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003966:	2bc0      	cmp	r3, #192	; 0xc0
 8003968:	d016      	beq.n	8003998 <UART_SetConfig+0x1f0>
 800396a:	2bc0      	cmp	r3, #192	; 0xc0
 800396c:	d818      	bhi.n	80039a0 <UART_SetConfig+0x1f8>
 800396e:	2b80      	cmp	r3, #128	; 0x80
 8003970:	d00a      	beq.n	8003988 <UART_SetConfig+0x1e0>
 8003972:	2b80      	cmp	r3, #128	; 0x80
 8003974:	d814      	bhi.n	80039a0 <UART_SetConfig+0x1f8>
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <UART_SetConfig+0x1d8>
 800397a:	2b40      	cmp	r3, #64	; 0x40
 800397c:	d008      	beq.n	8003990 <UART_SetConfig+0x1e8>
 800397e:	e00f      	b.n	80039a0 <UART_SetConfig+0x1f8>
 8003980:	2300      	movs	r3, #0
 8003982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003986:	e082      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003988:	2302      	movs	r3, #2
 800398a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800398e:	e07e      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003990:	2304      	movs	r3, #4
 8003992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003996:	e07a      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003998:	2308      	movs	r3, #8
 800399a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800399e:	e076      	b.n	8003a8e <UART_SetConfig+0x2e6>
 80039a0:	2310      	movs	r3, #16
 80039a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a6:	e072      	b.n	8003a8e <UART_SetConfig+0x2e6>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a35      	ldr	r2, [pc, #212]	; (8003a84 <UART_SetConfig+0x2dc>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d12a      	bne.n	8003a08 <UART_SetConfig+0x260>
 80039b2:	4b30      	ldr	r3, [pc, #192]	; (8003a74 <UART_SetConfig+0x2cc>)
 80039b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039c0:	d01a      	beq.n	80039f8 <UART_SetConfig+0x250>
 80039c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039c6:	d81b      	bhi.n	8003a00 <UART_SetConfig+0x258>
 80039c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039cc:	d00c      	beq.n	80039e8 <UART_SetConfig+0x240>
 80039ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d2:	d815      	bhi.n	8003a00 <UART_SetConfig+0x258>
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <UART_SetConfig+0x238>
 80039d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039dc:	d008      	beq.n	80039f0 <UART_SetConfig+0x248>
 80039de:	e00f      	b.n	8003a00 <UART_SetConfig+0x258>
 80039e0:	2300      	movs	r3, #0
 80039e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039e6:	e052      	b.n	8003a8e <UART_SetConfig+0x2e6>
 80039e8:	2302      	movs	r3, #2
 80039ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ee:	e04e      	b.n	8003a8e <UART_SetConfig+0x2e6>
 80039f0:	2304      	movs	r3, #4
 80039f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039f6:	e04a      	b.n	8003a8e <UART_SetConfig+0x2e6>
 80039f8:	2308      	movs	r3, #8
 80039fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039fe:	e046      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003a00:	2310      	movs	r3, #16
 8003a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a06:	e042      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a17      	ldr	r2, [pc, #92]	; (8003a6c <UART_SetConfig+0x2c4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d13a      	bne.n	8003a88 <UART_SetConfig+0x2e0>
 8003a12:	4b18      	ldr	r3, [pc, #96]	; (8003a74 <UART_SetConfig+0x2cc>)
 8003a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a20:	d01a      	beq.n	8003a58 <UART_SetConfig+0x2b0>
 8003a22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a26:	d81b      	bhi.n	8003a60 <UART_SetConfig+0x2b8>
 8003a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a2c:	d00c      	beq.n	8003a48 <UART_SetConfig+0x2a0>
 8003a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a32:	d815      	bhi.n	8003a60 <UART_SetConfig+0x2b8>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <UART_SetConfig+0x298>
 8003a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a3c:	d008      	beq.n	8003a50 <UART_SetConfig+0x2a8>
 8003a3e:	e00f      	b.n	8003a60 <UART_SetConfig+0x2b8>
 8003a40:	2300      	movs	r3, #0
 8003a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a46:	e022      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a4e:	e01e      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003a50:	2304      	movs	r3, #4
 8003a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a56:	e01a      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003a58:	2308      	movs	r3, #8
 8003a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a5e:	e016      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003a60:	2310      	movs	r3, #16
 8003a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a66:	e012      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003a68:	efff69f3 	.word	0xefff69f3
 8003a6c:	40008000 	.word	0x40008000
 8003a70:	40013800 	.word	0x40013800
 8003a74:	40021000 	.word	0x40021000
 8003a78:	40004400 	.word	0x40004400
 8003a7c:	40004800 	.word	0x40004800
 8003a80:	40004c00 	.word	0x40004c00
 8003a84:	40005000 	.word	0x40005000
 8003a88:	2310      	movs	r3, #16
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a9d      	ldr	r2, [pc, #628]	; (8003d08 <UART_SetConfig+0x560>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d179      	bne.n	8003b8c <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d823      	bhi.n	8003ae8 <UART_SetConfig+0x340>
 8003aa0:	a201      	add	r2, pc, #4	; (adr r2, 8003aa8 <UART_SetConfig+0x300>)
 8003aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa6:	bf00      	nop
 8003aa8:	08003acd 	.word	0x08003acd
 8003aac:	08003ae9 	.word	0x08003ae9
 8003ab0:	08003ad5 	.word	0x08003ad5
 8003ab4:	08003ae9 	.word	0x08003ae9
 8003ab8:	08003adb 	.word	0x08003adb
 8003abc:	08003ae9 	.word	0x08003ae9
 8003ac0:	08003ae9 	.word	0x08003ae9
 8003ac4:	08003ae9 	.word	0x08003ae9
 8003ac8:	08003ae3 	.word	0x08003ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003acc:	f7fe fce4 	bl	8002498 <HAL_RCC_GetPCLK1Freq>
 8003ad0:	61f8      	str	r0, [r7, #28]
        break;
 8003ad2:	e00f      	b.n	8003af4 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ad4:	4b8d      	ldr	r3, [pc, #564]	; (8003d0c <UART_SetConfig+0x564>)
 8003ad6:	61fb      	str	r3, [r7, #28]
        break;
 8003ad8:	e00c      	b.n	8003af4 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ada:	f7fe fc45 	bl	8002368 <HAL_RCC_GetSysClockFreq>
 8003ade:	61f8      	str	r0, [r7, #28]
        break;
 8003ae0:	e008      	b.n	8003af4 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ae2:	2320      	movs	r3, #32
 8003ae4:	61fb      	str	r3, [r7, #28]
        break;
 8003ae6:	e005      	b.n	8003af4 <UART_SetConfig+0x34c>
      default:
        pclk = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003af2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 80f9 	beq.w	8003cee <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	4413      	add	r3, r2
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d305      	bcc.n	8003b18 <UART_SetConfig+0x370>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b12:	69fa      	ldr	r2, [r7, #28]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d903      	bls.n	8003b20 <UART_SetConfig+0x378>
      {
        ret = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b1e:	e0e6      	b.n	8003cee <UART_SetConfig+0x546>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	2200      	movs	r2, #0
 8003b24:	461c      	mov	r4, r3
 8003b26:	4615      	mov	r5, r2
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	022b      	lsls	r3, r5, #8
 8003b32:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b36:	0222      	lsls	r2, r4, #8
 8003b38:	68f9      	ldr	r1, [r7, #12]
 8003b3a:	6849      	ldr	r1, [r1, #4]
 8003b3c:	0849      	lsrs	r1, r1, #1
 8003b3e:	2000      	movs	r0, #0
 8003b40:	4688      	mov	r8, r1
 8003b42:	4681      	mov	r9, r0
 8003b44:	eb12 0a08 	adds.w	sl, r2, r8
 8003b48:	eb43 0b09 	adc.w	fp, r3, r9
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	607a      	str	r2, [r7, #4]
 8003b56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b5a:	4650      	mov	r0, sl
 8003b5c:	4659      	mov	r1, fp
 8003b5e:	f7fc fb87 	bl	8000270 <__aeabi_uldivmod>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4613      	mov	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b70:	d308      	bcc.n	8003b84 <UART_SetConfig+0x3dc>
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b78:	d204      	bcs.n	8003b84 <UART_SetConfig+0x3dc>
        {
          huart->Instance->BRR = usartdiv;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	e0b4      	b.n	8003cee <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b8a:	e0b0      	b.n	8003cee <UART_SetConfig+0x546>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b94:	d15c      	bne.n	8003c50 <UART_SetConfig+0x4a8>
  {
    switch (clocksource)
 8003b96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d826      	bhi.n	8003bec <UART_SetConfig+0x444>
 8003b9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ba4 <UART_SetConfig+0x3fc>)
 8003ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba4:	08003bc9 	.word	0x08003bc9
 8003ba8:	08003bd1 	.word	0x08003bd1
 8003bac:	08003bd9 	.word	0x08003bd9
 8003bb0:	08003bed 	.word	0x08003bed
 8003bb4:	08003bdf 	.word	0x08003bdf
 8003bb8:	08003bed 	.word	0x08003bed
 8003bbc:	08003bed 	.word	0x08003bed
 8003bc0:	08003bed 	.word	0x08003bed
 8003bc4:	08003be7 	.word	0x08003be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bc8:	f7fe fc66 	bl	8002498 <HAL_RCC_GetPCLK1Freq>
 8003bcc:	61f8      	str	r0, [r7, #28]
        break;
 8003bce:	e013      	b.n	8003bf8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bd0:	f7fe fc78 	bl	80024c4 <HAL_RCC_GetPCLK2Freq>
 8003bd4:	61f8      	str	r0, [r7, #28]
        break;
 8003bd6:	e00f      	b.n	8003bf8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bd8:	4b4c      	ldr	r3, [pc, #304]	; (8003d0c <UART_SetConfig+0x564>)
 8003bda:	61fb      	str	r3, [r7, #28]
        break;
 8003bdc:	e00c      	b.n	8003bf8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bde:	f7fe fbc3 	bl	8002368 <HAL_RCC_GetSysClockFreq>
 8003be2:	61f8      	str	r0, [r7, #28]
        break;
 8003be4:	e008      	b.n	8003bf8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003be6:	2320      	movs	r3, #32
 8003be8:	61fb      	str	r3, [r7, #28]
        break;
 8003bea:	e005      	b.n	8003bf8 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003bf6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d077      	beq.n	8003cee <UART_SetConfig+0x546>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	005a      	lsls	r2, r3, #1
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	085b      	lsrs	r3, r3, #1
 8003c08:	441a      	add	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c12:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b0f      	cmp	r3, #15
 8003c18:	d916      	bls.n	8003c48 <UART_SetConfig+0x4a0>
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c20:	d212      	bcs.n	8003c48 <UART_SetConfig+0x4a0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	f023 030f 	bic.w	r3, r3, #15
 8003c2a:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	085b      	lsrs	r3, r3, #1
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	8afb      	ldrh	r3, [r7, #22]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	8afa      	ldrh	r2, [r7, #22]
 8003c44:	60da      	str	r2, [r3, #12]
 8003c46:	e052      	b.n	8003cee <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c4e:	e04e      	b.n	8003cee <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d827      	bhi.n	8003ca8 <UART_SetConfig+0x500>
 8003c58:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <UART_SetConfig+0x4b8>)
 8003c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5e:	bf00      	nop
 8003c60:	08003c85 	.word	0x08003c85
 8003c64:	08003c8d 	.word	0x08003c8d
 8003c68:	08003c95 	.word	0x08003c95
 8003c6c:	08003ca9 	.word	0x08003ca9
 8003c70:	08003c9b 	.word	0x08003c9b
 8003c74:	08003ca9 	.word	0x08003ca9
 8003c78:	08003ca9 	.word	0x08003ca9
 8003c7c:	08003ca9 	.word	0x08003ca9
 8003c80:	08003ca3 	.word	0x08003ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c84:	f7fe fc08 	bl	8002498 <HAL_RCC_GetPCLK1Freq>
 8003c88:	61f8      	str	r0, [r7, #28]
        break;
 8003c8a:	e013      	b.n	8003cb4 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c8c:	f7fe fc1a 	bl	80024c4 <HAL_RCC_GetPCLK2Freq>
 8003c90:	61f8      	str	r0, [r7, #28]
        break;
 8003c92:	e00f      	b.n	8003cb4 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c94:	4b1d      	ldr	r3, [pc, #116]	; (8003d0c <UART_SetConfig+0x564>)
 8003c96:	61fb      	str	r3, [r7, #28]
        break;
 8003c98:	e00c      	b.n	8003cb4 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c9a:	f7fe fb65 	bl	8002368 <HAL_RCC_GetSysClockFreq>
 8003c9e:	61f8      	str	r0, [r7, #28]
        break;
 8003ca0:	e008      	b.n	8003cb4 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ca2:	2320      	movs	r3, #32
 8003ca4:	61fb      	str	r3, [r7, #28]
        break;
 8003ca6:	e005      	b.n	8003cb4 <UART_SetConfig+0x50c>
      default:
        pclk = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cb2:	bf00      	nop
    }

    if (pclk != 0U)
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d019      	beq.n	8003cee <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	085a      	lsrs	r2, r3, #1
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	441a      	add	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ccc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2b0f      	cmp	r3, #15
 8003cd2:	d909      	bls.n	8003ce8 <UART_SetConfig+0x540>
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cda:	d205      	bcs.n	8003ce8 <UART_SetConfig+0x540>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60da      	str	r2, [r3, #12]
 8003ce6:	e002      	b.n	8003cee <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003cfa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3728      	adds	r7, #40	; 0x28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d08:	40008000 	.word	0x40008000
 8003d0c:	00f42400 	.word	0x00f42400

08003d10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00a      	beq.n	8003d3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00a      	beq.n	8003d7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	f003 0310 	and.w	r3, r3, #16
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d01a      	beq.n	8003e26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e0e:	d10a      	bne.n	8003e26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	605a      	str	r2, [r3, #4]
  }
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b098      	sub	sp, #96	; 0x60
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e64:	f7fd f9d6 	bl	8001214 <HAL_GetTick>
 8003e68:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d12e      	bne.n	8003ed6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e80:	2200      	movs	r2, #0
 8003e82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f88c 	bl	8003fa4 <UART_WaitOnFlagUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d021      	beq.n	8003ed6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9a:	e853 3f00 	ldrex	r3, [r3]
 8003e9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ea6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	461a      	mov	r2, r3
 8003eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003eb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e6      	bne.n	8003e92 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e062      	b.n	8003f9c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d149      	bne.n	8003f78 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ee4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eec:	2200      	movs	r2, #0
 8003eee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f856 	bl	8003fa4 <UART_WaitOnFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d03c      	beq.n	8003f78 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	e853 3f00 	ldrex	r3, [r3]
 8003f0a:	623b      	str	r3, [r7, #32]
   return(result);
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f1e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f24:	e841 2300 	strex	r3, r2, [r1]
 8003f28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1e6      	bne.n	8003efe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3308      	adds	r3, #8
 8003f36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	e853 3f00 	ldrex	r3, [r3]
 8003f3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0301 	bic.w	r3, r3, #1
 8003f46:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3308      	adds	r3, #8
 8003f4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f50:	61fa      	str	r2, [r7, #28]
 8003f52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	69b9      	ldr	r1, [r7, #24]
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e5      	bne.n	8003f30 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e011      	b.n	8003f9c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3758      	adds	r7, #88	; 0x58
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb4:	e049      	b.n	800404a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbc:	d045      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fbe:	f7fd f929 	bl	8001214 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d302      	bcc.n	8003fd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e048      	b.n	800406a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d031      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d110      	bne.n	8004016 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f838 	bl	8004072 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2208      	movs	r2, #8
 8004006:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e029      	b.n	800406a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004024:	d111      	bne.n	800404a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800402e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 f81e 	bl	8004072 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2220      	movs	r2, #32
 800403a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e00f      	b.n	800406a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69da      	ldr	r2, [r3, #28]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4013      	ands	r3, r2
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	429a      	cmp	r2, r3
 8004058:	bf0c      	ite	eq
 800405a:	2301      	moveq	r3, #1
 800405c:	2300      	movne	r3, #0
 800405e:	b2db      	uxtb	r3, r3
 8004060:	461a      	mov	r2, r3
 8004062:	79fb      	ldrb	r3, [r7, #7]
 8004064:	429a      	cmp	r2, r3
 8004066:	d0a6      	beq.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004072:	b480      	push	{r7}
 8004074:	b095      	sub	sp, #84	; 0x54
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004082:	e853 3f00 	ldrex	r3, [r3]
 8004086:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800408e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004098:	643b      	str	r3, [r7, #64]	; 0x40
 800409a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800409e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040a0:	e841 2300 	strex	r3, r2, [r1]
 80040a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e6      	bne.n	800407a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3308      	adds	r3, #8
 80040b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	e853 3f00 	ldrex	r3, [r3]
 80040ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f023 0301 	bic.w	r3, r3, #1
 80040c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3308      	adds	r3, #8
 80040ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040d4:	e841 2300 	strex	r3, r2, [r1]
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e5      	bne.n	80040ac <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d118      	bne.n	800411a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	e853 3f00 	ldrex	r3, [r3]
 80040f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f023 0310 	bic.w	r3, r3, #16
 80040fc:	647b      	str	r3, [r7, #68]	; 0x44
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004106:	61bb      	str	r3, [r7, #24]
 8004108:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410a:	6979      	ldr	r1, [r7, #20]
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	e841 2300 	strex	r3, r2, [r1]
 8004112:	613b      	str	r3, [r7, #16]
   return(result);
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1e6      	bne.n	80040e8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800412e:	bf00      	nop
 8004130:	3754      	adds	r7, #84	; 0x54
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <atoi>:
 800413a:	220a      	movs	r2, #10
 800413c:	2100      	movs	r1, #0
 800413e:	f000 b883 	b.w	8004248 <strtol>
	...

08004144 <_strtol_l.constprop.0>:
 8004144:	2b01      	cmp	r3, #1
 8004146:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800414a:	d001      	beq.n	8004150 <_strtol_l.constprop.0+0xc>
 800414c:	2b24      	cmp	r3, #36	; 0x24
 800414e:	d906      	bls.n	800415e <_strtol_l.constprop.0+0x1a>
 8004150:	f000 f9f2 	bl	8004538 <__errno>
 8004154:	2316      	movs	r3, #22
 8004156:	6003      	str	r3, [r0, #0]
 8004158:	2000      	movs	r0, #0
 800415a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800415e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004244 <_strtol_l.constprop.0+0x100>
 8004162:	460d      	mov	r5, r1
 8004164:	462e      	mov	r6, r5
 8004166:	f815 4b01 	ldrb.w	r4, [r5], #1
 800416a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800416e:	f017 0708 	ands.w	r7, r7, #8
 8004172:	d1f7      	bne.n	8004164 <_strtol_l.constprop.0+0x20>
 8004174:	2c2d      	cmp	r4, #45	; 0x2d
 8004176:	d132      	bne.n	80041de <_strtol_l.constprop.0+0x9a>
 8004178:	782c      	ldrb	r4, [r5, #0]
 800417a:	2701      	movs	r7, #1
 800417c:	1cb5      	adds	r5, r6, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d05b      	beq.n	800423a <_strtol_l.constprop.0+0xf6>
 8004182:	2b10      	cmp	r3, #16
 8004184:	d109      	bne.n	800419a <_strtol_l.constprop.0+0x56>
 8004186:	2c30      	cmp	r4, #48	; 0x30
 8004188:	d107      	bne.n	800419a <_strtol_l.constprop.0+0x56>
 800418a:	782c      	ldrb	r4, [r5, #0]
 800418c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004190:	2c58      	cmp	r4, #88	; 0x58
 8004192:	d14d      	bne.n	8004230 <_strtol_l.constprop.0+0xec>
 8004194:	786c      	ldrb	r4, [r5, #1]
 8004196:	2310      	movs	r3, #16
 8004198:	3502      	adds	r5, #2
 800419a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800419e:	f108 38ff 	add.w	r8, r8, #4294967295
 80041a2:	f04f 0e00 	mov.w	lr, #0
 80041a6:	fbb8 f9f3 	udiv	r9, r8, r3
 80041aa:	4676      	mov	r6, lr
 80041ac:	fb03 8a19 	mls	sl, r3, r9, r8
 80041b0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80041b4:	f1bc 0f09 	cmp.w	ip, #9
 80041b8:	d816      	bhi.n	80041e8 <_strtol_l.constprop.0+0xa4>
 80041ba:	4664      	mov	r4, ip
 80041bc:	42a3      	cmp	r3, r4
 80041be:	dd24      	ble.n	800420a <_strtol_l.constprop.0+0xc6>
 80041c0:	f1be 3fff 	cmp.w	lr, #4294967295
 80041c4:	d008      	beq.n	80041d8 <_strtol_l.constprop.0+0x94>
 80041c6:	45b1      	cmp	r9, r6
 80041c8:	d31c      	bcc.n	8004204 <_strtol_l.constprop.0+0xc0>
 80041ca:	d101      	bne.n	80041d0 <_strtol_l.constprop.0+0x8c>
 80041cc:	45a2      	cmp	sl, r4
 80041ce:	db19      	blt.n	8004204 <_strtol_l.constprop.0+0xc0>
 80041d0:	fb06 4603 	mla	r6, r6, r3, r4
 80041d4:	f04f 0e01 	mov.w	lr, #1
 80041d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80041dc:	e7e8      	b.n	80041b0 <_strtol_l.constprop.0+0x6c>
 80041de:	2c2b      	cmp	r4, #43	; 0x2b
 80041e0:	bf04      	itt	eq
 80041e2:	782c      	ldrbeq	r4, [r5, #0]
 80041e4:	1cb5      	addeq	r5, r6, #2
 80041e6:	e7ca      	b.n	800417e <_strtol_l.constprop.0+0x3a>
 80041e8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80041ec:	f1bc 0f19 	cmp.w	ip, #25
 80041f0:	d801      	bhi.n	80041f6 <_strtol_l.constprop.0+0xb2>
 80041f2:	3c37      	subs	r4, #55	; 0x37
 80041f4:	e7e2      	b.n	80041bc <_strtol_l.constprop.0+0x78>
 80041f6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80041fa:	f1bc 0f19 	cmp.w	ip, #25
 80041fe:	d804      	bhi.n	800420a <_strtol_l.constprop.0+0xc6>
 8004200:	3c57      	subs	r4, #87	; 0x57
 8004202:	e7db      	b.n	80041bc <_strtol_l.constprop.0+0x78>
 8004204:	f04f 3eff 	mov.w	lr, #4294967295
 8004208:	e7e6      	b.n	80041d8 <_strtol_l.constprop.0+0x94>
 800420a:	f1be 3fff 	cmp.w	lr, #4294967295
 800420e:	d105      	bne.n	800421c <_strtol_l.constprop.0+0xd8>
 8004210:	2322      	movs	r3, #34	; 0x22
 8004212:	6003      	str	r3, [r0, #0]
 8004214:	4646      	mov	r6, r8
 8004216:	b942      	cbnz	r2, 800422a <_strtol_l.constprop.0+0xe6>
 8004218:	4630      	mov	r0, r6
 800421a:	e79e      	b.n	800415a <_strtol_l.constprop.0+0x16>
 800421c:	b107      	cbz	r7, 8004220 <_strtol_l.constprop.0+0xdc>
 800421e:	4276      	negs	r6, r6
 8004220:	2a00      	cmp	r2, #0
 8004222:	d0f9      	beq.n	8004218 <_strtol_l.constprop.0+0xd4>
 8004224:	f1be 0f00 	cmp.w	lr, #0
 8004228:	d000      	beq.n	800422c <_strtol_l.constprop.0+0xe8>
 800422a:	1e69      	subs	r1, r5, #1
 800422c:	6011      	str	r1, [r2, #0]
 800422e:	e7f3      	b.n	8004218 <_strtol_l.constprop.0+0xd4>
 8004230:	2430      	movs	r4, #48	; 0x30
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1b1      	bne.n	800419a <_strtol_l.constprop.0+0x56>
 8004236:	2308      	movs	r3, #8
 8004238:	e7af      	b.n	800419a <_strtol_l.constprop.0+0x56>
 800423a:	2c30      	cmp	r4, #48	; 0x30
 800423c:	d0a5      	beq.n	800418a <_strtol_l.constprop.0+0x46>
 800423e:	230a      	movs	r3, #10
 8004240:	e7ab      	b.n	800419a <_strtol_l.constprop.0+0x56>
 8004242:	bf00      	nop
 8004244:	08005231 	.word	0x08005231

08004248 <strtol>:
 8004248:	4613      	mov	r3, r2
 800424a:	460a      	mov	r2, r1
 800424c:	4601      	mov	r1, r0
 800424e:	4802      	ldr	r0, [pc, #8]	; (8004258 <strtol+0x10>)
 8004250:	6800      	ldr	r0, [r0, #0]
 8004252:	f7ff bf77 	b.w	8004144 <_strtol_l.constprop.0>
 8004256:	bf00      	nop
 8004258:	20000064 	.word	0x20000064

0800425c <std>:
 800425c:	2300      	movs	r3, #0
 800425e:	b510      	push	{r4, lr}
 8004260:	4604      	mov	r4, r0
 8004262:	e9c0 3300 	strd	r3, r3, [r0]
 8004266:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800426a:	6083      	str	r3, [r0, #8]
 800426c:	8181      	strh	r1, [r0, #12]
 800426e:	6643      	str	r3, [r0, #100]	; 0x64
 8004270:	81c2      	strh	r2, [r0, #14]
 8004272:	6183      	str	r3, [r0, #24]
 8004274:	4619      	mov	r1, r3
 8004276:	2208      	movs	r2, #8
 8004278:	305c      	adds	r0, #92	; 0x5c
 800427a:	f000 f90e 	bl	800449a <memset>
 800427e:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <std+0x58>)
 8004280:	6263      	str	r3, [r4, #36]	; 0x24
 8004282:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <std+0x5c>)
 8004284:	62a3      	str	r3, [r4, #40]	; 0x28
 8004286:	4b0d      	ldr	r3, [pc, #52]	; (80042bc <std+0x60>)
 8004288:	62e3      	str	r3, [r4, #44]	; 0x2c
 800428a:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <std+0x64>)
 800428c:	6323      	str	r3, [r4, #48]	; 0x30
 800428e:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <std+0x68>)
 8004290:	6224      	str	r4, [r4, #32]
 8004292:	429c      	cmp	r4, r3
 8004294:	d006      	beq.n	80042a4 <std+0x48>
 8004296:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800429a:	4294      	cmp	r4, r2
 800429c:	d002      	beq.n	80042a4 <std+0x48>
 800429e:	33d0      	adds	r3, #208	; 0xd0
 80042a0:	429c      	cmp	r4, r3
 80042a2:	d105      	bne.n	80042b0 <std+0x54>
 80042a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80042a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042ac:	f000 b96e 	b.w	800458c <__retarget_lock_init_recursive>
 80042b0:	bd10      	pop	{r4, pc}
 80042b2:	bf00      	nop
 80042b4:	08004415 	.word	0x08004415
 80042b8:	08004437 	.word	0x08004437
 80042bc:	0800446f 	.word	0x0800446f
 80042c0:	08004493 	.word	0x08004493
 80042c4:	200001f8 	.word	0x200001f8

080042c8 <stdio_exit_handler>:
 80042c8:	4a02      	ldr	r2, [pc, #8]	; (80042d4 <stdio_exit_handler+0xc>)
 80042ca:	4903      	ldr	r1, [pc, #12]	; (80042d8 <stdio_exit_handler+0x10>)
 80042cc:	4803      	ldr	r0, [pc, #12]	; (80042dc <stdio_exit_handler+0x14>)
 80042ce:	f000 b869 	b.w	80043a4 <_fwalk_sglue>
 80042d2:	bf00      	nop
 80042d4:	2000000c 	.word	0x2000000c
 80042d8:	08004e39 	.word	0x08004e39
 80042dc:	20000018 	.word	0x20000018

080042e0 <cleanup_stdio>:
 80042e0:	6841      	ldr	r1, [r0, #4]
 80042e2:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <cleanup_stdio+0x34>)
 80042e4:	4299      	cmp	r1, r3
 80042e6:	b510      	push	{r4, lr}
 80042e8:	4604      	mov	r4, r0
 80042ea:	d001      	beq.n	80042f0 <cleanup_stdio+0x10>
 80042ec:	f000 fda4 	bl	8004e38 <_fflush_r>
 80042f0:	68a1      	ldr	r1, [r4, #8]
 80042f2:	4b09      	ldr	r3, [pc, #36]	; (8004318 <cleanup_stdio+0x38>)
 80042f4:	4299      	cmp	r1, r3
 80042f6:	d002      	beq.n	80042fe <cleanup_stdio+0x1e>
 80042f8:	4620      	mov	r0, r4
 80042fa:	f000 fd9d 	bl	8004e38 <_fflush_r>
 80042fe:	68e1      	ldr	r1, [r4, #12]
 8004300:	4b06      	ldr	r3, [pc, #24]	; (800431c <cleanup_stdio+0x3c>)
 8004302:	4299      	cmp	r1, r3
 8004304:	d004      	beq.n	8004310 <cleanup_stdio+0x30>
 8004306:	4620      	mov	r0, r4
 8004308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800430c:	f000 bd94 	b.w	8004e38 <_fflush_r>
 8004310:	bd10      	pop	{r4, pc}
 8004312:	bf00      	nop
 8004314:	200001f8 	.word	0x200001f8
 8004318:	20000260 	.word	0x20000260
 800431c:	200002c8 	.word	0x200002c8

08004320 <global_stdio_init.part.0>:
 8004320:	b510      	push	{r4, lr}
 8004322:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <global_stdio_init.part.0+0x30>)
 8004324:	4c0b      	ldr	r4, [pc, #44]	; (8004354 <global_stdio_init.part.0+0x34>)
 8004326:	4a0c      	ldr	r2, [pc, #48]	; (8004358 <global_stdio_init.part.0+0x38>)
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	4620      	mov	r0, r4
 800432c:	2200      	movs	r2, #0
 800432e:	2104      	movs	r1, #4
 8004330:	f7ff ff94 	bl	800425c <std>
 8004334:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004338:	2201      	movs	r2, #1
 800433a:	2109      	movs	r1, #9
 800433c:	f7ff ff8e 	bl	800425c <std>
 8004340:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004344:	2202      	movs	r2, #2
 8004346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800434a:	2112      	movs	r1, #18
 800434c:	f7ff bf86 	b.w	800425c <std>
 8004350:	20000330 	.word	0x20000330
 8004354:	200001f8 	.word	0x200001f8
 8004358:	080042c9 	.word	0x080042c9

0800435c <__sfp_lock_acquire>:
 800435c:	4801      	ldr	r0, [pc, #4]	; (8004364 <__sfp_lock_acquire+0x8>)
 800435e:	f000 b916 	b.w	800458e <__retarget_lock_acquire_recursive>
 8004362:	bf00      	nop
 8004364:	20000339 	.word	0x20000339

08004368 <__sfp_lock_release>:
 8004368:	4801      	ldr	r0, [pc, #4]	; (8004370 <__sfp_lock_release+0x8>)
 800436a:	f000 b911 	b.w	8004590 <__retarget_lock_release_recursive>
 800436e:	bf00      	nop
 8004370:	20000339 	.word	0x20000339

08004374 <__sinit>:
 8004374:	b510      	push	{r4, lr}
 8004376:	4604      	mov	r4, r0
 8004378:	f7ff fff0 	bl	800435c <__sfp_lock_acquire>
 800437c:	6a23      	ldr	r3, [r4, #32]
 800437e:	b11b      	cbz	r3, 8004388 <__sinit+0x14>
 8004380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004384:	f7ff bff0 	b.w	8004368 <__sfp_lock_release>
 8004388:	4b04      	ldr	r3, [pc, #16]	; (800439c <__sinit+0x28>)
 800438a:	6223      	str	r3, [r4, #32]
 800438c:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <__sinit+0x2c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1f5      	bne.n	8004380 <__sinit+0xc>
 8004394:	f7ff ffc4 	bl	8004320 <global_stdio_init.part.0>
 8004398:	e7f2      	b.n	8004380 <__sinit+0xc>
 800439a:	bf00      	nop
 800439c:	080042e1 	.word	0x080042e1
 80043a0:	20000330 	.word	0x20000330

080043a4 <_fwalk_sglue>:
 80043a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043a8:	4607      	mov	r7, r0
 80043aa:	4688      	mov	r8, r1
 80043ac:	4614      	mov	r4, r2
 80043ae:	2600      	movs	r6, #0
 80043b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043b4:	f1b9 0901 	subs.w	r9, r9, #1
 80043b8:	d505      	bpl.n	80043c6 <_fwalk_sglue+0x22>
 80043ba:	6824      	ldr	r4, [r4, #0]
 80043bc:	2c00      	cmp	r4, #0
 80043be:	d1f7      	bne.n	80043b0 <_fwalk_sglue+0xc>
 80043c0:	4630      	mov	r0, r6
 80043c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043c6:	89ab      	ldrh	r3, [r5, #12]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d907      	bls.n	80043dc <_fwalk_sglue+0x38>
 80043cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043d0:	3301      	adds	r3, #1
 80043d2:	d003      	beq.n	80043dc <_fwalk_sglue+0x38>
 80043d4:	4629      	mov	r1, r5
 80043d6:	4638      	mov	r0, r7
 80043d8:	47c0      	blx	r8
 80043da:	4306      	orrs	r6, r0
 80043dc:	3568      	adds	r5, #104	; 0x68
 80043de:	e7e9      	b.n	80043b4 <_fwalk_sglue+0x10>

080043e0 <iprintf>:
 80043e0:	b40f      	push	{r0, r1, r2, r3}
 80043e2:	b507      	push	{r0, r1, r2, lr}
 80043e4:	4906      	ldr	r1, [pc, #24]	; (8004400 <iprintf+0x20>)
 80043e6:	ab04      	add	r3, sp, #16
 80043e8:	6808      	ldr	r0, [r1, #0]
 80043ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80043ee:	6881      	ldr	r1, [r0, #8]
 80043f0:	9301      	str	r3, [sp, #4]
 80043f2:	f000 f9f1 	bl	80047d8 <_vfiprintf_r>
 80043f6:	b003      	add	sp, #12
 80043f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80043fc:	b004      	add	sp, #16
 80043fe:	4770      	bx	lr
 8004400:	20000064 	.word	0x20000064

08004404 <putchar>:
 8004404:	4b02      	ldr	r3, [pc, #8]	; (8004410 <putchar+0xc>)
 8004406:	4601      	mov	r1, r0
 8004408:	6818      	ldr	r0, [r3, #0]
 800440a:	6882      	ldr	r2, [r0, #8]
 800440c:	f000 bd3c 	b.w	8004e88 <_putc_r>
 8004410:	20000064 	.word	0x20000064

08004414 <__sread>:
 8004414:	b510      	push	{r4, lr}
 8004416:	460c      	mov	r4, r1
 8004418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800441c:	f000 f868 	bl	80044f0 <_read_r>
 8004420:	2800      	cmp	r0, #0
 8004422:	bfab      	itete	ge
 8004424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004426:	89a3      	ldrhlt	r3, [r4, #12]
 8004428:	181b      	addge	r3, r3, r0
 800442a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800442e:	bfac      	ite	ge
 8004430:	6563      	strge	r3, [r4, #84]	; 0x54
 8004432:	81a3      	strhlt	r3, [r4, #12]
 8004434:	bd10      	pop	{r4, pc}

08004436 <__swrite>:
 8004436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800443a:	461f      	mov	r7, r3
 800443c:	898b      	ldrh	r3, [r1, #12]
 800443e:	05db      	lsls	r3, r3, #23
 8004440:	4605      	mov	r5, r0
 8004442:	460c      	mov	r4, r1
 8004444:	4616      	mov	r6, r2
 8004446:	d505      	bpl.n	8004454 <__swrite+0x1e>
 8004448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800444c:	2302      	movs	r3, #2
 800444e:	2200      	movs	r2, #0
 8004450:	f000 f83c 	bl	80044cc <_lseek_r>
 8004454:	89a3      	ldrh	r3, [r4, #12]
 8004456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800445a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800445e:	81a3      	strh	r3, [r4, #12]
 8004460:	4632      	mov	r2, r6
 8004462:	463b      	mov	r3, r7
 8004464:	4628      	mov	r0, r5
 8004466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800446a:	f000 b853 	b.w	8004514 <_write_r>

0800446e <__sseek>:
 800446e:	b510      	push	{r4, lr}
 8004470:	460c      	mov	r4, r1
 8004472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004476:	f000 f829 	bl	80044cc <_lseek_r>
 800447a:	1c43      	adds	r3, r0, #1
 800447c:	89a3      	ldrh	r3, [r4, #12]
 800447e:	bf15      	itete	ne
 8004480:	6560      	strne	r0, [r4, #84]	; 0x54
 8004482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800448a:	81a3      	strheq	r3, [r4, #12]
 800448c:	bf18      	it	ne
 800448e:	81a3      	strhne	r3, [r4, #12]
 8004490:	bd10      	pop	{r4, pc}

08004492 <__sclose>:
 8004492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004496:	f000 b809 	b.w	80044ac <_close_r>

0800449a <memset>:
 800449a:	4402      	add	r2, r0
 800449c:	4603      	mov	r3, r0
 800449e:	4293      	cmp	r3, r2
 80044a0:	d100      	bne.n	80044a4 <memset+0xa>
 80044a2:	4770      	bx	lr
 80044a4:	f803 1b01 	strb.w	r1, [r3], #1
 80044a8:	e7f9      	b.n	800449e <memset+0x4>
	...

080044ac <_close_r>:
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	4d06      	ldr	r5, [pc, #24]	; (80044c8 <_close_r+0x1c>)
 80044b0:	2300      	movs	r3, #0
 80044b2:	4604      	mov	r4, r0
 80044b4:	4608      	mov	r0, r1
 80044b6:	602b      	str	r3, [r5, #0]
 80044b8:	f7fc fd9d 	bl	8000ff6 <_close>
 80044bc:	1c43      	adds	r3, r0, #1
 80044be:	d102      	bne.n	80044c6 <_close_r+0x1a>
 80044c0:	682b      	ldr	r3, [r5, #0]
 80044c2:	b103      	cbz	r3, 80044c6 <_close_r+0x1a>
 80044c4:	6023      	str	r3, [r4, #0]
 80044c6:	bd38      	pop	{r3, r4, r5, pc}
 80044c8:	20000334 	.word	0x20000334

080044cc <_lseek_r>:
 80044cc:	b538      	push	{r3, r4, r5, lr}
 80044ce:	4d07      	ldr	r5, [pc, #28]	; (80044ec <_lseek_r+0x20>)
 80044d0:	4604      	mov	r4, r0
 80044d2:	4608      	mov	r0, r1
 80044d4:	4611      	mov	r1, r2
 80044d6:	2200      	movs	r2, #0
 80044d8:	602a      	str	r2, [r5, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	f7fc fdb2 	bl	8001044 <_lseek>
 80044e0:	1c43      	adds	r3, r0, #1
 80044e2:	d102      	bne.n	80044ea <_lseek_r+0x1e>
 80044e4:	682b      	ldr	r3, [r5, #0]
 80044e6:	b103      	cbz	r3, 80044ea <_lseek_r+0x1e>
 80044e8:	6023      	str	r3, [r4, #0]
 80044ea:	bd38      	pop	{r3, r4, r5, pc}
 80044ec:	20000334 	.word	0x20000334

080044f0 <_read_r>:
 80044f0:	b538      	push	{r3, r4, r5, lr}
 80044f2:	4d07      	ldr	r5, [pc, #28]	; (8004510 <_read_r+0x20>)
 80044f4:	4604      	mov	r4, r0
 80044f6:	4608      	mov	r0, r1
 80044f8:	4611      	mov	r1, r2
 80044fa:	2200      	movs	r2, #0
 80044fc:	602a      	str	r2, [r5, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	f7fc fd40 	bl	8000f84 <_read>
 8004504:	1c43      	adds	r3, r0, #1
 8004506:	d102      	bne.n	800450e <_read_r+0x1e>
 8004508:	682b      	ldr	r3, [r5, #0]
 800450a:	b103      	cbz	r3, 800450e <_read_r+0x1e>
 800450c:	6023      	str	r3, [r4, #0]
 800450e:	bd38      	pop	{r3, r4, r5, pc}
 8004510:	20000334 	.word	0x20000334

08004514 <_write_r>:
 8004514:	b538      	push	{r3, r4, r5, lr}
 8004516:	4d07      	ldr	r5, [pc, #28]	; (8004534 <_write_r+0x20>)
 8004518:	4604      	mov	r4, r0
 800451a:	4608      	mov	r0, r1
 800451c:	4611      	mov	r1, r2
 800451e:	2200      	movs	r2, #0
 8004520:	602a      	str	r2, [r5, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	f7fc fd4b 	bl	8000fbe <_write>
 8004528:	1c43      	adds	r3, r0, #1
 800452a:	d102      	bne.n	8004532 <_write_r+0x1e>
 800452c:	682b      	ldr	r3, [r5, #0]
 800452e:	b103      	cbz	r3, 8004532 <_write_r+0x1e>
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	bd38      	pop	{r3, r4, r5, pc}
 8004534:	20000334 	.word	0x20000334

08004538 <__errno>:
 8004538:	4b01      	ldr	r3, [pc, #4]	; (8004540 <__errno+0x8>)
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	20000064 	.word	0x20000064

08004544 <__libc_init_array>:
 8004544:	b570      	push	{r4, r5, r6, lr}
 8004546:	4d0d      	ldr	r5, [pc, #52]	; (800457c <__libc_init_array+0x38>)
 8004548:	4c0d      	ldr	r4, [pc, #52]	; (8004580 <__libc_init_array+0x3c>)
 800454a:	1b64      	subs	r4, r4, r5
 800454c:	10a4      	asrs	r4, r4, #2
 800454e:	2600      	movs	r6, #0
 8004550:	42a6      	cmp	r6, r4
 8004552:	d109      	bne.n	8004568 <__libc_init_array+0x24>
 8004554:	4d0b      	ldr	r5, [pc, #44]	; (8004584 <__libc_init_array+0x40>)
 8004556:	4c0c      	ldr	r4, [pc, #48]	; (8004588 <__libc_init_array+0x44>)
 8004558:	f000 fdf4 	bl	8005144 <_init>
 800455c:	1b64      	subs	r4, r4, r5
 800455e:	10a4      	asrs	r4, r4, #2
 8004560:	2600      	movs	r6, #0
 8004562:	42a6      	cmp	r6, r4
 8004564:	d105      	bne.n	8004572 <__libc_init_array+0x2e>
 8004566:	bd70      	pop	{r4, r5, r6, pc}
 8004568:	f855 3b04 	ldr.w	r3, [r5], #4
 800456c:	4798      	blx	r3
 800456e:	3601      	adds	r6, #1
 8004570:	e7ee      	b.n	8004550 <__libc_init_array+0xc>
 8004572:	f855 3b04 	ldr.w	r3, [r5], #4
 8004576:	4798      	blx	r3
 8004578:	3601      	adds	r6, #1
 800457a:	e7f2      	b.n	8004562 <__libc_init_array+0x1e>
 800457c:	0800536c 	.word	0x0800536c
 8004580:	0800536c 	.word	0x0800536c
 8004584:	0800536c 	.word	0x0800536c
 8004588:	08005370 	.word	0x08005370

0800458c <__retarget_lock_init_recursive>:
 800458c:	4770      	bx	lr

0800458e <__retarget_lock_acquire_recursive>:
 800458e:	4770      	bx	lr

08004590 <__retarget_lock_release_recursive>:
 8004590:	4770      	bx	lr
	...

08004594 <_free_r>:
 8004594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004596:	2900      	cmp	r1, #0
 8004598:	d044      	beq.n	8004624 <_free_r+0x90>
 800459a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800459e:	9001      	str	r0, [sp, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f1a1 0404 	sub.w	r4, r1, #4
 80045a6:	bfb8      	it	lt
 80045a8:	18e4      	addlt	r4, r4, r3
 80045aa:	f000 f8df 	bl	800476c <__malloc_lock>
 80045ae:	4a1e      	ldr	r2, [pc, #120]	; (8004628 <_free_r+0x94>)
 80045b0:	9801      	ldr	r0, [sp, #4]
 80045b2:	6813      	ldr	r3, [r2, #0]
 80045b4:	b933      	cbnz	r3, 80045c4 <_free_r+0x30>
 80045b6:	6063      	str	r3, [r4, #4]
 80045b8:	6014      	str	r4, [r2, #0]
 80045ba:	b003      	add	sp, #12
 80045bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045c0:	f000 b8da 	b.w	8004778 <__malloc_unlock>
 80045c4:	42a3      	cmp	r3, r4
 80045c6:	d908      	bls.n	80045da <_free_r+0x46>
 80045c8:	6825      	ldr	r5, [r4, #0]
 80045ca:	1961      	adds	r1, r4, r5
 80045cc:	428b      	cmp	r3, r1
 80045ce:	bf01      	itttt	eq
 80045d0:	6819      	ldreq	r1, [r3, #0]
 80045d2:	685b      	ldreq	r3, [r3, #4]
 80045d4:	1949      	addeq	r1, r1, r5
 80045d6:	6021      	streq	r1, [r4, #0]
 80045d8:	e7ed      	b.n	80045b6 <_free_r+0x22>
 80045da:	461a      	mov	r2, r3
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	b10b      	cbz	r3, 80045e4 <_free_r+0x50>
 80045e0:	42a3      	cmp	r3, r4
 80045e2:	d9fa      	bls.n	80045da <_free_r+0x46>
 80045e4:	6811      	ldr	r1, [r2, #0]
 80045e6:	1855      	adds	r5, r2, r1
 80045e8:	42a5      	cmp	r5, r4
 80045ea:	d10b      	bne.n	8004604 <_free_r+0x70>
 80045ec:	6824      	ldr	r4, [r4, #0]
 80045ee:	4421      	add	r1, r4
 80045f0:	1854      	adds	r4, r2, r1
 80045f2:	42a3      	cmp	r3, r4
 80045f4:	6011      	str	r1, [r2, #0]
 80045f6:	d1e0      	bne.n	80045ba <_free_r+0x26>
 80045f8:	681c      	ldr	r4, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	6053      	str	r3, [r2, #4]
 80045fe:	440c      	add	r4, r1
 8004600:	6014      	str	r4, [r2, #0]
 8004602:	e7da      	b.n	80045ba <_free_r+0x26>
 8004604:	d902      	bls.n	800460c <_free_r+0x78>
 8004606:	230c      	movs	r3, #12
 8004608:	6003      	str	r3, [r0, #0]
 800460a:	e7d6      	b.n	80045ba <_free_r+0x26>
 800460c:	6825      	ldr	r5, [r4, #0]
 800460e:	1961      	adds	r1, r4, r5
 8004610:	428b      	cmp	r3, r1
 8004612:	bf04      	itt	eq
 8004614:	6819      	ldreq	r1, [r3, #0]
 8004616:	685b      	ldreq	r3, [r3, #4]
 8004618:	6063      	str	r3, [r4, #4]
 800461a:	bf04      	itt	eq
 800461c:	1949      	addeq	r1, r1, r5
 800461e:	6021      	streq	r1, [r4, #0]
 8004620:	6054      	str	r4, [r2, #4]
 8004622:	e7ca      	b.n	80045ba <_free_r+0x26>
 8004624:	b003      	add	sp, #12
 8004626:	bd30      	pop	{r4, r5, pc}
 8004628:	2000033c 	.word	0x2000033c

0800462c <sbrk_aligned>:
 800462c:	b570      	push	{r4, r5, r6, lr}
 800462e:	4e0e      	ldr	r6, [pc, #56]	; (8004668 <sbrk_aligned+0x3c>)
 8004630:	460c      	mov	r4, r1
 8004632:	6831      	ldr	r1, [r6, #0]
 8004634:	4605      	mov	r5, r0
 8004636:	b911      	cbnz	r1, 800463e <sbrk_aligned+0x12>
 8004638:	f000 fcf0 	bl	800501c <_sbrk_r>
 800463c:	6030      	str	r0, [r6, #0]
 800463e:	4621      	mov	r1, r4
 8004640:	4628      	mov	r0, r5
 8004642:	f000 fceb 	bl	800501c <_sbrk_r>
 8004646:	1c43      	adds	r3, r0, #1
 8004648:	d00a      	beq.n	8004660 <sbrk_aligned+0x34>
 800464a:	1cc4      	adds	r4, r0, #3
 800464c:	f024 0403 	bic.w	r4, r4, #3
 8004650:	42a0      	cmp	r0, r4
 8004652:	d007      	beq.n	8004664 <sbrk_aligned+0x38>
 8004654:	1a21      	subs	r1, r4, r0
 8004656:	4628      	mov	r0, r5
 8004658:	f000 fce0 	bl	800501c <_sbrk_r>
 800465c:	3001      	adds	r0, #1
 800465e:	d101      	bne.n	8004664 <sbrk_aligned+0x38>
 8004660:	f04f 34ff 	mov.w	r4, #4294967295
 8004664:	4620      	mov	r0, r4
 8004666:	bd70      	pop	{r4, r5, r6, pc}
 8004668:	20000340 	.word	0x20000340

0800466c <_malloc_r>:
 800466c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004670:	1ccd      	adds	r5, r1, #3
 8004672:	f025 0503 	bic.w	r5, r5, #3
 8004676:	3508      	adds	r5, #8
 8004678:	2d0c      	cmp	r5, #12
 800467a:	bf38      	it	cc
 800467c:	250c      	movcc	r5, #12
 800467e:	2d00      	cmp	r5, #0
 8004680:	4607      	mov	r7, r0
 8004682:	db01      	blt.n	8004688 <_malloc_r+0x1c>
 8004684:	42a9      	cmp	r1, r5
 8004686:	d905      	bls.n	8004694 <_malloc_r+0x28>
 8004688:	230c      	movs	r3, #12
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	2600      	movs	r6, #0
 800468e:	4630      	mov	r0, r6
 8004690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004694:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004768 <_malloc_r+0xfc>
 8004698:	f000 f868 	bl	800476c <__malloc_lock>
 800469c:	f8d8 3000 	ldr.w	r3, [r8]
 80046a0:	461c      	mov	r4, r3
 80046a2:	bb5c      	cbnz	r4, 80046fc <_malloc_r+0x90>
 80046a4:	4629      	mov	r1, r5
 80046a6:	4638      	mov	r0, r7
 80046a8:	f7ff ffc0 	bl	800462c <sbrk_aligned>
 80046ac:	1c43      	adds	r3, r0, #1
 80046ae:	4604      	mov	r4, r0
 80046b0:	d155      	bne.n	800475e <_malloc_r+0xf2>
 80046b2:	f8d8 4000 	ldr.w	r4, [r8]
 80046b6:	4626      	mov	r6, r4
 80046b8:	2e00      	cmp	r6, #0
 80046ba:	d145      	bne.n	8004748 <_malloc_r+0xdc>
 80046bc:	2c00      	cmp	r4, #0
 80046be:	d048      	beq.n	8004752 <_malloc_r+0xe6>
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	4631      	mov	r1, r6
 80046c4:	4638      	mov	r0, r7
 80046c6:	eb04 0903 	add.w	r9, r4, r3
 80046ca:	f000 fca7 	bl	800501c <_sbrk_r>
 80046ce:	4581      	cmp	r9, r0
 80046d0:	d13f      	bne.n	8004752 <_malloc_r+0xe6>
 80046d2:	6821      	ldr	r1, [r4, #0]
 80046d4:	1a6d      	subs	r5, r5, r1
 80046d6:	4629      	mov	r1, r5
 80046d8:	4638      	mov	r0, r7
 80046da:	f7ff ffa7 	bl	800462c <sbrk_aligned>
 80046de:	3001      	adds	r0, #1
 80046e0:	d037      	beq.n	8004752 <_malloc_r+0xe6>
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	442b      	add	r3, r5
 80046e6:	6023      	str	r3, [r4, #0]
 80046e8:	f8d8 3000 	ldr.w	r3, [r8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d038      	beq.n	8004762 <_malloc_r+0xf6>
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	42a2      	cmp	r2, r4
 80046f4:	d12b      	bne.n	800474e <_malloc_r+0xe2>
 80046f6:	2200      	movs	r2, #0
 80046f8:	605a      	str	r2, [r3, #4]
 80046fa:	e00f      	b.n	800471c <_malloc_r+0xb0>
 80046fc:	6822      	ldr	r2, [r4, #0]
 80046fe:	1b52      	subs	r2, r2, r5
 8004700:	d41f      	bmi.n	8004742 <_malloc_r+0xd6>
 8004702:	2a0b      	cmp	r2, #11
 8004704:	d917      	bls.n	8004736 <_malloc_r+0xca>
 8004706:	1961      	adds	r1, r4, r5
 8004708:	42a3      	cmp	r3, r4
 800470a:	6025      	str	r5, [r4, #0]
 800470c:	bf18      	it	ne
 800470e:	6059      	strne	r1, [r3, #4]
 8004710:	6863      	ldr	r3, [r4, #4]
 8004712:	bf08      	it	eq
 8004714:	f8c8 1000 	streq.w	r1, [r8]
 8004718:	5162      	str	r2, [r4, r5]
 800471a:	604b      	str	r3, [r1, #4]
 800471c:	4638      	mov	r0, r7
 800471e:	f104 060b 	add.w	r6, r4, #11
 8004722:	f000 f829 	bl	8004778 <__malloc_unlock>
 8004726:	f026 0607 	bic.w	r6, r6, #7
 800472a:	1d23      	adds	r3, r4, #4
 800472c:	1af2      	subs	r2, r6, r3
 800472e:	d0ae      	beq.n	800468e <_malloc_r+0x22>
 8004730:	1b9b      	subs	r3, r3, r6
 8004732:	50a3      	str	r3, [r4, r2]
 8004734:	e7ab      	b.n	800468e <_malloc_r+0x22>
 8004736:	42a3      	cmp	r3, r4
 8004738:	6862      	ldr	r2, [r4, #4]
 800473a:	d1dd      	bne.n	80046f8 <_malloc_r+0x8c>
 800473c:	f8c8 2000 	str.w	r2, [r8]
 8004740:	e7ec      	b.n	800471c <_malloc_r+0xb0>
 8004742:	4623      	mov	r3, r4
 8004744:	6864      	ldr	r4, [r4, #4]
 8004746:	e7ac      	b.n	80046a2 <_malloc_r+0x36>
 8004748:	4634      	mov	r4, r6
 800474a:	6876      	ldr	r6, [r6, #4]
 800474c:	e7b4      	b.n	80046b8 <_malloc_r+0x4c>
 800474e:	4613      	mov	r3, r2
 8004750:	e7cc      	b.n	80046ec <_malloc_r+0x80>
 8004752:	230c      	movs	r3, #12
 8004754:	603b      	str	r3, [r7, #0]
 8004756:	4638      	mov	r0, r7
 8004758:	f000 f80e 	bl	8004778 <__malloc_unlock>
 800475c:	e797      	b.n	800468e <_malloc_r+0x22>
 800475e:	6025      	str	r5, [r4, #0]
 8004760:	e7dc      	b.n	800471c <_malloc_r+0xb0>
 8004762:	605b      	str	r3, [r3, #4]
 8004764:	deff      	udf	#255	; 0xff
 8004766:	bf00      	nop
 8004768:	2000033c 	.word	0x2000033c

0800476c <__malloc_lock>:
 800476c:	4801      	ldr	r0, [pc, #4]	; (8004774 <__malloc_lock+0x8>)
 800476e:	f7ff bf0e 	b.w	800458e <__retarget_lock_acquire_recursive>
 8004772:	bf00      	nop
 8004774:	20000338 	.word	0x20000338

08004778 <__malloc_unlock>:
 8004778:	4801      	ldr	r0, [pc, #4]	; (8004780 <__malloc_unlock+0x8>)
 800477a:	f7ff bf09 	b.w	8004590 <__retarget_lock_release_recursive>
 800477e:	bf00      	nop
 8004780:	20000338 	.word	0x20000338

08004784 <__sfputc_r>:
 8004784:	6893      	ldr	r3, [r2, #8]
 8004786:	3b01      	subs	r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	b410      	push	{r4}
 800478c:	6093      	str	r3, [r2, #8]
 800478e:	da08      	bge.n	80047a2 <__sfputc_r+0x1e>
 8004790:	6994      	ldr	r4, [r2, #24]
 8004792:	42a3      	cmp	r3, r4
 8004794:	db01      	blt.n	800479a <__sfputc_r+0x16>
 8004796:	290a      	cmp	r1, #10
 8004798:	d103      	bne.n	80047a2 <__sfputc_r+0x1e>
 800479a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800479e:	f000 bba7 	b.w	8004ef0 <__swbuf_r>
 80047a2:	6813      	ldr	r3, [r2, #0]
 80047a4:	1c58      	adds	r0, r3, #1
 80047a6:	6010      	str	r0, [r2, #0]
 80047a8:	7019      	strb	r1, [r3, #0]
 80047aa:	4608      	mov	r0, r1
 80047ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <__sfputs_r>:
 80047b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b4:	4606      	mov	r6, r0
 80047b6:	460f      	mov	r7, r1
 80047b8:	4614      	mov	r4, r2
 80047ba:	18d5      	adds	r5, r2, r3
 80047bc:	42ac      	cmp	r4, r5
 80047be:	d101      	bne.n	80047c4 <__sfputs_r+0x12>
 80047c0:	2000      	movs	r0, #0
 80047c2:	e007      	b.n	80047d4 <__sfputs_r+0x22>
 80047c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047c8:	463a      	mov	r2, r7
 80047ca:	4630      	mov	r0, r6
 80047cc:	f7ff ffda 	bl	8004784 <__sfputc_r>
 80047d0:	1c43      	adds	r3, r0, #1
 80047d2:	d1f3      	bne.n	80047bc <__sfputs_r+0xa>
 80047d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047d8 <_vfiprintf_r>:
 80047d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047dc:	460d      	mov	r5, r1
 80047de:	b09d      	sub	sp, #116	; 0x74
 80047e0:	4614      	mov	r4, r2
 80047e2:	4698      	mov	r8, r3
 80047e4:	4606      	mov	r6, r0
 80047e6:	b118      	cbz	r0, 80047f0 <_vfiprintf_r+0x18>
 80047e8:	6a03      	ldr	r3, [r0, #32]
 80047ea:	b90b      	cbnz	r3, 80047f0 <_vfiprintf_r+0x18>
 80047ec:	f7ff fdc2 	bl	8004374 <__sinit>
 80047f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047f2:	07d9      	lsls	r1, r3, #31
 80047f4:	d405      	bmi.n	8004802 <_vfiprintf_r+0x2a>
 80047f6:	89ab      	ldrh	r3, [r5, #12]
 80047f8:	059a      	lsls	r2, r3, #22
 80047fa:	d402      	bmi.n	8004802 <_vfiprintf_r+0x2a>
 80047fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047fe:	f7ff fec6 	bl	800458e <__retarget_lock_acquire_recursive>
 8004802:	89ab      	ldrh	r3, [r5, #12]
 8004804:	071b      	lsls	r3, r3, #28
 8004806:	d501      	bpl.n	800480c <_vfiprintf_r+0x34>
 8004808:	692b      	ldr	r3, [r5, #16]
 800480a:	b99b      	cbnz	r3, 8004834 <_vfiprintf_r+0x5c>
 800480c:	4629      	mov	r1, r5
 800480e:	4630      	mov	r0, r6
 8004810:	f000 fbac 	bl	8004f6c <__swsetup_r>
 8004814:	b170      	cbz	r0, 8004834 <_vfiprintf_r+0x5c>
 8004816:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004818:	07dc      	lsls	r4, r3, #31
 800481a:	d504      	bpl.n	8004826 <_vfiprintf_r+0x4e>
 800481c:	f04f 30ff 	mov.w	r0, #4294967295
 8004820:	b01d      	add	sp, #116	; 0x74
 8004822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004826:	89ab      	ldrh	r3, [r5, #12]
 8004828:	0598      	lsls	r0, r3, #22
 800482a:	d4f7      	bmi.n	800481c <_vfiprintf_r+0x44>
 800482c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800482e:	f7ff feaf 	bl	8004590 <__retarget_lock_release_recursive>
 8004832:	e7f3      	b.n	800481c <_vfiprintf_r+0x44>
 8004834:	2300      	movs	r3, #0
 8004836:	9309      	str	r3, [sp, #36]	; 0x24
 8004838:	2320      	movs	r3, #32
 800483a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800483e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004842:	2330      	movs	r3, #48	; 0x30
 8004844:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80049f8 <_vfiprintf_r+0x220>
 8004848:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800484c:	f04f 0901 	mov.w	r9, #1
 8004850:	4623      	mov	r3, r4
 8004852:	469a      	mov	sl, r3
 8004854:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004858:	b10a      	cbz	r2, 800485e <_vfiprintf_r+0x86>
 800485a:	2a25      	cmp	r2, #37	; 0x25
 800485c:	d1f9      	bne.n	8004852 <_vfiprintf_r+0x7a>
 800485e:	ebba 0b04 	subs.w	fp, sl, r4
 8004862:	d00b      	beq.n	800487c <_vfiprintf_r+0xa4>
 8004864:	465b      	mov	r3, fp
 8004866:	4622      	mov	r2, r4
 8004868:	4629      	mov	r1, r5
 800486a:	4630      	mov	r0, r6
 800486c:	f7ff ffa1 	bl	80047b2 <__sfputs_r>
 8004870:	3001      	adds	r0, #1
 8004872:	f000 80a9 	beq.w	80049c8 <_vfiprintf_r+0x1f0>
 8004876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004878:	445a      	add	r2, fp
 800487a:	9209      	str	r2, [sp, #36]	; 0x24
 800487c:	f89a 3000 	ldrb.w	r3, [sl]
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 80a1 	beq.w	80049c8 <_vfiprintf_r+0x1f0>
 8004886:	2300      	movs	r3, #0
 8004888:	f04f 32ff 	mov.w	r2, #4294967295
 800488c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004890:	f10a 0a01 	add.w	sl, sl, #1
 8004894:	9304      	str	r3, [sp, #16]
 8004896:	9307      	str	r3, [sp, #28]
 8004898:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800489c:	931a      	str	r3, [sp, #104]	; 0x68
 800489e:	4654      	mov	r4, sl
 80048a0:	2205      	movs	r2, #5
 80048a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048a6:	4854      	ldr	r0, [pc, #336]	; (80049f8 <_vfiprintf_r+0x220>)
 80048a8:	f7fb fc92 	bl	80001d0 <memchr>
 80048ac:	9a04      	ldr	r2, [sp, #16]
 80048ae:	b9d8      	cbnz	r0, 80048e8 <_vfiprintf_r+0x110>
 80048b0:	06d1      	lsls	r1, r2, #27
 80048b2:	bf44      	itt	mi
 80048b4:	2320      	movmi	r3, #32
 80048b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048ba:	0713      	lsls	r3, r2, #28
 80048bc:	bf44      	itt	mi
 80048be:	232b      	movmi	r3, #43	; 0x2b
 80048c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048c4:	f89a 3000 	ldrb.w	r3, [sl]
 80048c8:	2b2a      	cmp	r3, #42	; 0x2a
 80048ca:	d015      	beq.n	80048f8 <_vfiprintf_r+0x120>
 80048cc:	9a07      	ldr	r2, [sp, #28]
 80048ce:	4654      	mov	r4, sl
 80048d0:	2000      	movs	r0, #0
 80048d2:	f04f 0c0a 	mov.w	ip, #10
 80048d6:	4621      	mov	r1, r4
 80048d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048dc:	3b30      	subs	r3, #48	; 0x30
 80048de:	2b09      	cmp	r3, #9
 80048e0:	d94d      	bls.n	800497e <_vfiprintf_r+0x1a6>
 80048e2:	b1b0      	cbz	r0, 8004912 <_vfiprintf_r+0x13a>
 80048e4:	9207      	str	r2, [sp, #28]
 80048e6:	e014      	b.n	8004912 <_vfiprintf_r+0x13a>
 80048e8:	eba0 0308 	sub.w	r3, r0, r8
 80048ec:	fa09 f303 	lsl.w	r3, r9, r3
 80048f0:	4313      	orrs	r3, r2
 80048f2:	9304      	str	r3, [sp, #16]
 80048f4:	46a2      	mov	sl, r4
 80048f6:	e7d2      	b.n	800489e <_vfiprintf_r+0xc6>
 80048f8:	9b03      	ldr	r3, [sp, #12]
 80048fa:	1d19      	adds	r1, r3, #4
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	9103      	str	r1, [sp, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	bfbb      	ittet	lt
 8004904:	425b      	neglt	r3, r3
 8004906:	f042 0202 	orrlt.w	r2, r2, #2
 800490a:	9307      	strge	r3, [sp, #28]
 800490c:	9307      	strlt	r3, [sp, #28]
 800490e:	bfb8      	it	lt
 8004910:	9204      	strlt	r2, [sp, #16]
 8004912:	7823      	ldrb	r3, [r4, #0]
 8004914:	2b2e      	cmp	r3, #46	; 0x2e
 8004916:	d10c      	bne.n	8004932 <_vfiprintf_r+0x15a>
 8004918:	7863      	ldrb	r3, [r4, #1]
 800491a:	2b2a      	cmp	r3, #42	; 0x2a
 800491c:	d134      	bne.n	8004988 <_vfiprintf_r+0x1b0>
 800491e:	9b03      	ldr	r3, [sp, #12]
 8004920:	1d1a      	adds	r2, r3, #4
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	9203      	str	r2, [sp, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	bfb8      	it	lt
 800492a:	f04f 33ff 	movlt.w	r3, #4294967295
 800492e:	3402      	adds	r4, #2
 8004930:	9305      	str	r3, [sp, #20]
 8004932:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004a08 <_vfiprintf_r+0x230>
 8004936:	7821      	ldrb	r1, [r4, #0]
 8004938:	2203      	movs	r2, #3
 800493a:	4650      	mov	r0, sl
 800493c:	f7fb fc48 	bl	80001d0 <memchr>
 8004940:	b138      	cbz	r0, 8004952 <_vfiprintf_r+0x17a>
 8004942:	9b04      	ldr	r3, [sp, #16]
 8004944:	eba0 000a 	sub.w	r0, r0, sl
 8004948:	2240      	movs	r2, #64	; 0x40
 800494a:	4082      	lsls	r2, r0
 800494c:	4313      	orrs	r3, r2
 800494e:	3401      	adds	r4, #1
 8004950:	9304      	str	r3, [sp, #16]
 8004952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004956:	4829      	ldr	r0, [pc, #164]	; (80049fc <_vfiprintf_r+0x224>)
 8004958:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800495c:	2206      	movs	r2, #6
 800495e:	f7fb fc37 	bl	80001d0 <memchr>
 8004962:	2800      	cmp	r0, #0
 8004964:	d03f      	beq.n	80049e6 <_vfiprintf_r+0x20e>
 8004966:	4b26      	ldr	r3, [pc, #152]	; (8004a00 <_vfiprintf_r+0x228>)
 8004968:	bb1b      	cbnz	r3, 80049b2 <_vfiprintf_r+0x1da>
 800496a:	9b03      	ldr	r3, [sp, #12]
 800496c:	3307      	adds	r3, #7
 800496e:	f023 0307 	bic.w	r3, r3, #7
 8004972:	3308      	adds	r3, #8
 8004974:	9303      	str	r3, [sp, #12]
 8004976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004978:	443b      	add	r3, r7
 800497a:	9309      	str	r3, [sp, #36]	; 0x24
 800497c:	e768      	b.n	8004850 <_vfiprintf_r+0x78>
 800497e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004982:	460c      	mov	r4, r1
 8004984:	2001      	movs	r0, #1
 8004986:	e7a6      	b.n	80048d6 <_vfiprintf_r+0xfe>
 8004988:	2300      	movs	r3, #0
 800498a:	3401      	adds	r4, #1
 800498c:	9305      	str	r3, [sp, #20]
 800498e:	4619      	mov	r1, r3
 8004990:	f04f 0c0a 	mov.w	ip, #10
 8004994:	4620      	mov	r0, r4
 8004996:	f810 2b01 	ldrb.w	r2, [r0], #1
 800499a:	3a30      	subs	r2, #48	; 0x30
 800499c:	2a09      	cmp	r2, #9
 800499e:	d903      	bls.n	80049a8 <_vfiprintf_r+0x1d0>
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0c6      	beq.n	8004932 <_vfiprintf_r+0x15a>
 80049a4:	9105      	str	r1, [sp, #20]
 80049a6:	e7c4      	b.n	8004932 <_vfiprintf_r+0x15a>
 80049a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80049ac:	4604      	mov	r4, r0
 80049ae:	2301      	movs	r3, #1
 80049b0:	e7f0      	b.n	8004994 <_vfiprintf_r+0x1bc>
 80049b2:	ab03      	add	r3, sp, #12
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	462a      	mov	r2, r5
 80049b8:	4b12      	ldr	r3, [pc, #72]	; (8004a04 <_vfiprintf_r+0x22c>)
 80049ba:	a904      	add	r1, sp, #16
 80049bc:	4630      	mov	r0, r6
 80049be:	f3af 8000 	nop.w
 80049c2:	4607      	mov	r7, r0
 80049c4:	1c78      	adds	r0, r7, #1
 80049c6:	d1d6      	bne.n	8004976 <_vfiprintf_r+0x19e>
 80049c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049ca:	07d9      	lsls	r1, r3, #31
 80049cc:	d405      	bmi.n	80049da <_vfiprintf_r+0x202>
 80049ce:	89ab      	ldrh	r3, [r5, #12]
 80049d0:	059a      	lsls	r2, r3, #22
 80049d2:	d402      	bmi.n	80049da <_vfiprintf_r+0x202>
 80049d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049d6:	f7ff fddb 	bl	8004590 <__retarget_lock_release_recursive>
 80049da:	89ab      	ldrh	r3, [r5, #12]
 80049dc:	065b      	lsls	r3, r3, #25
 80049de:	f53f af1d 	bmi.w	800481c <_vfiprintf_r+0x44>
 80049e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049e4:	e71c      	b.n	8004820 <_vfiprintf_r+0x48>
 80049e6:	ab03      	add	r3, sp, #12
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	462a      	mov	r2, r5
 80049ec:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <_vfiprintf_r+0x22c>)
 80049ee:	a904      	add	r1, sp, #16
 80049f0:	4630      	mov	r0, r6
 80049f2:	f000 f879 	bl	8004ae8 <_printf_i>
 80049f6:	e7e4      	b.n	80049c2 <_vfiprintf_r+0x1ea>
 80049f8:	08005331 	.word	0x08005331
 80049fc:	0800533b 	.word	0x0800533b
 8004a00:	00000000 	.word	0x00000000
 8004a04:	080047b3 	.word	0x080047b3
 8004a08:	08005337 	.word	0x08005337

08004a0c <_printf_common>:
 8004a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a10:	4616      	mov	r6, r2
 8004a12:	4699      	mov	r9, r3
 8004a14:	688a      	ldr	r2, [r1, #8]
 8004a16:	690b      	ldr	r3, [r1, #16]
 8004a18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	bfb8      	it	lt
 8004a20:	4613      	movlt	r3, r2
 8004a22:	6033      	str	r3, [r6, #0]
 8004a24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a28:	4607      	mov	r7, r0
 8004a2a:	460c      	mov	r4, r1
 8004a2c:	b10a      	cbz	r2, 8004a32 <_printf_common+0x26>
 8004a2e:	3301      	adds	r3, #1
 8004a30:	6033      	str	r3, [r6, #0]
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	0699      	lsls	r1, r3, #26
 8004a36:	bf42      	ittt	mi
 8004a38:	6833      	ldrmi	r3, [r6, #0]
 8004a3a:	3302      	addmi	r3, #2
 8004a3c:	6033      	strmi	r3, [r6, #0]
 8004a3e:	6825      	ldr	r5, [r4, #0]
 8004a40:	f015 0506 	ands.w	r5, r5, #6
 8004a44:	d106      	bne.n	8004a54 <_printf_common+0x48>
 8004a46:	f104 0a19 	add.w	sl, r4, #25
 8004a4a:	68e3      	ldr	r3, [r4, #12]
 8004a4c:	6832      	ldr	r2, [r6, #0]
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	42ab      	cmp	r3, r5
 8004a52:	dc26      	bgt.n	8004aa2 <_printf_common+0x96>
 8004a54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a58:	1e13      	subs	r3, r2, #0
 8004a5a:	6822      	ldr	r2, [r4, #0]
 8004a5c:	bf18      	it	ne
 8004a5e:	2301      	movne	r3, #1
 8004a60:	0692      	lsls	r2, r2, #26
 8004a62:	d42b      	bmi.n	8004abc <_printf_common+0xb0>
 8004a64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a68:	4649      	mov	r1, r9
 8004a6a:	4638      	mov	r0, r7
 8004a6c:	47c0      	blx	r8
 8004a6e:	3001      	adds	r0, #1
 8004a70:	d01e      	beq.n	8004ab0 <_printf_common+0xa4>
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	6922      	ldr	r2, [r4, #16]
 8004a76:	f003 0306 	and.w	r3, r3, #6
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	bf02      	ittt	eq
 8004a7e:	68e5      	ldreq	r5, [r4, #12]
 8004a80:	6833      	ldreq	r3, [r6, #0]
 8004a82:	1aed      	subeq	r5, r5, r3
 8004a84:	68a3      	ldr	r3, [r4, #8]
 8004a86:	bf0c      	ite	eq
 8004a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a8c:	2500      	movne	r5, #0
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	bfc4      	itt	gt
 8004a92:	1a9b      	subgt	r3, r3, r2
 8004a94:	18ed      	addgt	r5, r5, r3
 8004a96:	2600      	movs	r6, #0
 8004a98:	341a      	adds	r4, #26
 8004a9a:	42b5      	cmp	r5, r6
 8004a9c:	d11a      	bne.n	8004ad4 <_printf_common+0xc8>
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	e008      	b.n	8004ab4 <_printf_common+0xa8>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	4652      	mov	r2, sl
 8004aa6:	4649      	mov	r1, r9
 8004aa8:	4638      	mov	r0, r7
 8004aaa:	47c0      	blx	r8
 8004aac:	3001      	adds	r0, #1
 8004aae:	d103      	bne.n	8004ab8 <_printf_common+0xac>
 8004ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ab8:	3501      	adds	r5, #1
 8004aba:	e7c6      	b.n	8004a4a <_printf_common+0x3e>
 8004abc:	18e1      	adds	r1, r4, r3
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	2030      	movs	r0, #48	; 0x30
 8004ac2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ac6:	4422      	add	r2, r4
 8004ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004acc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ad0:	3302      	adds	r3, #2
 8004ad2:	e7c7      	b.n	8004a64 <_printf_common+0x58>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	4622      	mov	r2, r4
 8004ad8:	4649      	mov	r1, r9
 8004ada:	4638      	mov	r0, r7
 8004adc:	47c0      	blx	r8
 8004ade:	3001      	adds	r0, #1
 8004ae0:	d0e6      	beq.n	8004ab0 <_printf_common+0xa4>
 8004ae2:	3601      	adds	r6, #1
 8004ae4:	e7d9      	b.n	8004a9a <_printf_common+0x8e>
	...

08004ae8 <_printf_i>:
 8004ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004aec:	7e0f      	ldrb	r7, [r1, #24]
 8004aee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004af0:	2f78      	cmp	r7, #120	; 0x78
 8004af2:	4691      	mov	r9, r2
 8004af4:	4680      	mov	r8, r0
 8004af6:	460c      	mov	r4, r1
 8004af8:	469a      	mov	sl, r3
 8004afa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004afe:	d807      	bhi.n	8004b10 <_printf_i+0x28>
 8004b00:	2f62      	cmp	r7, #98	; 0x62
 8004b02:	d80a      	bhi.n	8004b1a <_printf_i+0x32>
 8004b04:	2f00      	cmp	r7, #0
 8004b06:	f000 80d4 	beq.w	8004cb2 <_printf_i+0x1ca>
 8004b0a:	2f58      	cmp	r7, #88	; 0x58
 8004b0c:	f000 80c0 	beq.w	8004c90 <_printf_i+0x1a8>
 8004b10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b18:	e03a      	b.n	8004b90 <_printf_i+0xa8>
 8004b1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b1e:	2b15      	cmp	r3, #21
 8004b20:	d8f6      	bhi.n	8004b10 <_printf_i+0x28>
 8004b22:	a101      	add	r1, pc, #4	; (adr r1, 8004b28 <_printf_i+0x40>)
 8004b24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b28:	08004b81 	.word	0x08004b81
 8004b2c:	08004b95 	.word	0x08004b95
 8004b30:	08004b11 	.word	0x08004b11
 8004b34:	08004b11 	.word	0x08004b11
 8004b38:	08004b11 	.word	0x08004b11
 8004b3c:	08004b11 	.word	0x08004b11
 8004b40:	08004b95 	.word	0x08004b95
 8004b44:	08004b11 	.word	0x08004b11
 8004b48:	08004b11 	.word	0x08004b11
 8004b4c:	08004b11 	.word	0x08004b11
 8004b50:	08004b11 	.word	0x08004b11
 8004b54:	08004c99 	.word	0x08004c99
 8004b58:	08004bc1 	.word	0x08004bc1
 8004b5c:	08004c53 	.word	0x08004c53
 8004b60:	08004b11 	.word	0x08004b11
 8004b64:	08004b11 	.word	0x08004b11
 8004b68:	08004cbb 	.word	0x08004cbb
 8004b6c:	08004b11 	.word	0x08004b11
 8004b70:	08004bc1 	.word	0x08004bc1
 8004b74:	08004b11 	.word	0x08004b11
 8004b78:	08004b11 	.word	0x08004b11
 8004b7c:	08004c5b 	.word	0x08004c5b
 8004b80:	682b      	ldr	r3, [r5, #0]
 8004b82:	1d1a      	adds	r2, r3, #4
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	602a      	str	r2, [r5, #0]
 8004b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b90:	2301      	movs	r3, #1
 8004b92:	e09f      	b.n	8004cd4 <_printf_i+0x1ec>
 8004b94:	6820      	ldr	r0, [r4, #0]
 8004b96:	682b      	ldr	r3, [r5, #0]
 8004b98:	0607      	lsls	r7, r0, #24
 8004b9a:	f103 0104 	add.w	r1, r3, #4
 8004b9e:	6029      	str	r1, [r5, #0]
 8004ba0:	d501      	bpl.n	8004ba6 <_printf_i+0xbe>
 8004ba2:	681e      	ldr	r6, [r3, #0]
 8004ba4:	e003      	b.n	8004bae <_printf_i+0xc6>
 8004ba6:	0646      	lsls	r6, r0, #25
 8004ba8:	d5fb      	bpl.n	8004ba2 <_printf_i+0xba>
 8004baa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004bae:	2e00      	cmp	r6, #0
 8004bb0:	da03      	bge.n	8004bba <_printf_i+0xd2>
 8004bb2:	232d      	movs	r3, #45	; 0x2d
 8004bb4:	4276      	negs	r6, r6
 8004bb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bba:	485a      	ldr	r0, [pc, #360]	; (8004d24 <_printf_i+0x23c>)
 8004bbc:	230a      	movs	r3, #10
 8004bbe:	e012      	b.n	8004be6 <_printf_i+0xfe>
 8004bc0:	682b      	ldr	r3, [r5, #0]
 8004bc2:	6820      	ldr	r0, [r4, #0]
 8004bc4:	1d19      	adds	r1, r3, #4
 8004bc6:	6029      	str	r1, [r5, #0]
 8004bc8:	0605      	lsls	r5, r0, #24
 8004bca:	d501      	bpl.n	8004bd0 <_printf_i+0xe8>
 8004bcc:	681e      	ldr	r6, [r3, #0]
 8004bce:	e002      	b.n	8004bd6 <_printf_i+0xee>
 8004bd0:	0641      	lsls	r1, r0, #25
 8004bd2:	d5fb      	bpl.n	8004bcc <_printf_i+0xe4>
 8004bd4:	881e      	ldrh	r6, [r3, #0]
 8004bd6:	4853      	ldr	r0, [pc, #332]	; (8004d24 <_printf_i+0x23c>)
 8004bd8:	2f6f      	cmp	r7, #111	; 0x6f
 8004bda:	bf0c      	ite	eq
 8004bdc:	2308      	moveq	r3, #8
 8004bde:	230a      	movne	r3, #10
 8004be0:	2100      	movs	r1, #0
 8004be2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004be6:	6865      	ldr	r5, [r4, #4]
 8004be8:	60a5      	str	r5, [r4, #8]
 8004bea:	2d00      	cmp	r5, #0
 8004bec:	bfa2      	ittt	ge
 8004bee:	6821      	ldrge	r1, [r4, #0]
 8004bf0:	f021 0104 	bicge.w	r1, r1, #4
 8004bf4:	6021      	strge	r1, [r4, #0]
 8004bf6:	b90e      	cbnz	r6, 8004bfc <_printf_i+0x114>
 8004bf8:	2d00      	cmp	r5, #0
 8004bfa:	d04b      	beq.n	8004c94 <_printf_i+0x1ac>
 8004bfc:	4615      	mov	r5, r2
 8004bfe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c02:	fb03 6711 	mls	r7, r3, r1, r6
 8004c06:	5dc7      	ldrb	r7, [r0, r7]
 8004c08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c0c:	4637      	mov	r7, r6
 8004c0e:	42bb      	cmp	r3, r7
 8004c10:	460e      	mov	r6, r1
 8004c12:	d9f4      	bls.n	8004bfe <_printf_i+0x116>
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d10b      	bne.n	8004c30 <_printf_i+0x148>
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	07de      	lsls	r6, r3, #31
 8004c1c:	d508      	bpl.n	8004c30 <_printf_i+0x148>
 8004c1e:	6923      	ldr	r3, [r4, #16]
 8004c20:	6861      	ldr	r1, [r4, #4]
 8004c22:	4299      	cmp	r1, r3
 8004c24:	bfde      	ittt	le
 8004c26:	2330      	movle	r3, #48	; 0x30
 8004c28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c30:	1b52      	subs	r2, r2, r5
 8004c32:	6122      	str	r2, [r4, #16]
 8004c34:	f8cd a000 	str.w	sl, [sp]
 8004c38:	464b      	mov	r3, r9
 8004c3a:	aa03      	add	r2, sp, #12
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	4640      	mov	r0, r8
 8004c40:	f7ff fee4 	bl	8004a0c <_printf_common>
 8004c44:	3001      	adds	r0, #1
 8004c46:	d14a      	bne.n	8004cde <_printf_i+0x1f6>
 8004c48:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4c:	b004      	add	sp, #16
 8004c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	f043 0320 	orr.w	r3, r3, #32
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	4833      	ldr	r0, [pc, #204]	; (8004d28 <_printf_i+0x240>)
 8004c5c:	2778      	movs	r7, #120	; 0x78
 8004c5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	6829      	ldr	r1, [r5, #0]
 8004c66:	061f      	lsls	r7, r3, #24
 8004c68:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c6c:	d402      	bmi.n	8004c74 <_printf_i+0x18c>
 8004c6e:	065f      	lsls	r7, r3, #25
 8004c70:	bf48      	it	mi
 8004c72:	b2b6      	uxthmi	r6, r6
 8004c74:	07df      	lsls	r7, r3, #31
 8004c76:	bf48      	it	mi
 8004c78:	f043 0320 	orrmi.w	r3, r3, #32
 8004c7c:	6029      	str	r1, [r5, #0]
 8004c7e:	bf48      	it	mi
 8004c80:	6023      	strmi	r3, [r4, #0]
 8004c82:	b91e      	cbnz	r6, 8004c8c <_printf_i+0x1a4>
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	f023 0320 	bic.w	r3, r3, #32
 8004c8a:	6023      	str	r3, [r4, #0]
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	e7a7      	b.n	8004be0 <_printf_i+0xf8>
 8004c90:	4824      	ldr	r0, [pc, #144]	; (8004d24 <_printf_i+0x23c>)
 8004c92:	e7e4      	b.n	8004c5e <_printf_i+0x176>
 8004c94:	4615      	mov	r5, r2
 8004c96:	e7bd      	b.n	8004c14 <_printf_i+0x12c>
 8004c98:	682b      	ldr	r3, [r5, #0]
 8004c9a:	6826      	ldr	r6, [r4, #0]
 8004c9c:	6961      	ldr	r1, [r4, #20]
 8004c9e:	1d18      	adds	r0, r3, #4
 8004ca0:	6028      	str	r0, [r5, #0]
 8004ca2:	0635      	lsls	r5, r6, #24
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	d501      	bpl.n	8004cac <_printf_i+0x1c4>
 8004ca8:	6019      	str	r1, [r3, #0]
 8004caa:	e002      	b.n	8004cb2 <_printf_i+0x1ca>
 8004cac:	0670      	lsls	r0, r6, #25
 8004cae:	d5fb      	bpl.n	8004ca8 <_printf_i+0x1c0>
 8004cb0:	8019      	strh	r1, [r3, #0]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	6123      	str	r3, [r4, #16]
 8004cb6:	4615      	mov	r5, r2
 8004cb8:	e7bc      	b.n	8004c34 <_printf_i+0x14c>
 8004cba:	682b      	ldr	r3, [r5, #0]
 8004cbc:	1d1a      	adds	r2, r3, #4
 8004cbe:	602a      	str	r2, [r5, #0]
 8004cc0:	681d      	ldr	r5, [r3, #0]
 8004cc2:	6862      	ldr	r2, [r4, #4]
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	f7fb fa82 	bl	80001d0 <memchr>
 8004ccc:	b108      	cbz	r0, 8004cd2 <_printf_i+0x1ea>
 8004cce:	1b40      	subs	r0, r0, r5
 8004cd0:	6060      	str	r0, [r4, #4]
 8004cd2:	6863      	ldr	r3, [r4, #4]
 8004cd4:	6123      	str	r3, [r4, #16]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cdc:	e7aa      	b.n	8004c34 <_printf_i+0x14c>
 8004cde:	6923      	ldr	r3, [r4, #16]
 8004ce0:	462a      	mov	r2, r5
 8004ce2:	4649      	mov	r1, r9
 8004ce4:	4640      	mov	r0, r8
 8004ce6:	47d0      	blx	sl
 8004ce8:	3001      	adds	r0, #1
 8004cea:	d0ad      	beq.n	8004c48 <_printf_i+0x160>
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	079b      	lsls	r3, r3, #30
 8004cf0:	d413      	bmi.n	8004d1a <_printf_i+0x232>
 8004cf2:	68e0      	ldr	r0, [r4, #12]
 8004cf4:	9b03      	ldr	r3, [sp, #12]
 8004cf6:	4298      	cmp	r0, r3
 8004cf8:	bfb8      	it	lt
 8004cfa:	4618      	movlt	r0, r3
 8004cfc:	e7a6      	b.n	8004c4c <_printf_i+0x164>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	4632      	mov	r2, r6
 8004d02:	4649      	mov	r1, r9
 8004d04:	4640      	mov	r0, r8
 8004d06:	47d0      	blx	sl
 8004d08:	3001      	adds	r0, #1
 8004d0a:	d09d      	beq.n	8004c48 <_printf_i+0x160>
 8004d0c:	3501      	adds	r5, #1
 8004d0e:	68e3      	ldr	r3, [r4, #12]
 8004d10:	9903      	ldr	r1, [sp, #12]
 8004d12:	1a5b      	subs	r3, r3, r1
 8004d14:	42ab      	cmp	r3, r5
 8004d16:	dcf2      	bgt.n	8004cfe <_printf_i+0x216>
 8004d18:	e7eb      	b.n	8004cf2 <_printf_i+0x20a>
 8004d1a:	2500      	movs	r5, #0
 8004d1c:	f104 0619 	add.w	r6, r4, #25
 8004d20:	e7f5      	b.n	8004d0e <_printf_i+0x226>
 8004d22:	bf00      	nop
 8004d24:	08005342 	.word	0x08005342
 8004d28:	08005353 	.word	0x08005353

08004d2c <__sflush_r>:
 8004d2c:	898a      	ldrh	r2, [r1, #12]
 8004d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d32:	4605      	mov	r5, r0
 8004d34:	0710      	lsls	r0, r2, #28
 8004d36:	460c      	mov	r4, r1
 8004d38:	d458      	bmi.n	8004dec <__sflush_r+0xc0>
 8004d3a:	684b      	ldr	r3, [r1, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	dc05      	bgt.n	8004d4c <__sflush_r+0x20>
 8004d40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	dc02      	bgt.n	8004d4c <__sflush_r+0x20>
 8004d46:	2000      	movs	r0, #0
 8004d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d4e:	2e00      	cmp	r6, #0
 8004d50:	d0f9      	beq.n	8004d46 <__sflush_r+0x1a>
 8004d52:	2300      	movs	r3, #0
 8004d54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d58:	682f      	ldr	r7, [r5, #0]
 8004d5a:	6a21      	ldr	r1, [r4, #32]
 8004d5c:	602b      	str	r3, [r5, #0]
 8004d5e:	d032      	beq.n	8004dc6 <__sflush_r+0x9a>
 8004d60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d62:	89a3      	ldrh	r3, [r4, #12]
 8004d64:	075a      	lsls	r2, r3, #29
 8004d66:	d505      	bpl.n	8004d74 <__sflush_r+0x48>
 8004d68:	6863      	ldr	r3, [r4, #4]
 8004d6a:	1ac0      	subs	r0, r0, r3
 8004d6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d6e:	b10b      	cbz	r3, 8004d74 <__sflush_r+0x48>
 8004d70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d72:	1ac0      	subs	r0, r0, r3
 8004d74:	2300      	movs	r3, #0
 8004d76:	4602      	mov	r2, r0
 8004d78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d7a:	6a21      	ldr	r1, [r4, #32]
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	47b0      	blx	r6
 8004d80:	1c43      	adds	r3, r0, #1
 8004d82:	89a3      	ldrh	r3, [r4, #12]
 8004d84:	d106      	bne.n	8004d94 <__sflush_r+0x68>
 8004d86:	6829      	ldr	r1, [r5, #0]
 8004d88:	291d      	cmp	r1, #29
 8004d8a:	d82b      	bhi.n	8004de4 <__sflush_r+0xb8>
 8004d8c:	4a29      	ldr	r2, [pc, #164]	; (8004e34 <__sflush_r+0x108>)
 8004d8e:	410a      	asrs	r2, r1
 8004d90:	07d6      	lsls	r6, r2, #31
 8004d92:	d427      	bmi.n	8004de4 <__sflush_r+0xb8>
 8004d94:	2200      	movs	r2, #0
 8004d96:	6062      	str	r2, [r4, #4]
 8004d98:	04d9      	lsls	r1, r3, #19
 8004d9a:	6922      	ldr	r2, [r4, #16]
 8004d9c:	6022      	str	r2, [r4, #0]
 8004d9e:	d504      	bpl.n	8004daa <__sflush_r+0x7e>
 8004da0:	1c42      	adds	r2, r0, #1
 8004da2:	d101      	bne.n	8004da8 <__sflush_r+0x7c>
 8004da4:	682b      	ldr	r3, [r5, #0]
 8004da6:	b903      	cbnz	r3, 8004daa <__sflush_r+0x7e>
 8004da8:	6560      	str	r0, [r4, #84]	; 0x54
 8004daa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dac:	602f      	str	r7, [r5, #0]
 8004dae:	2900      	cmp	r1, #0
 8004db0:	d0c9      	beq.n	8004d46 <__sflush_r+0x1a>
 8004db2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004db6:	4299      	cmp	r1, r3
 8004db8:	d002      	beq.n	8004dc0 <__sflush_r+0x94>
 8004dba:	4628      	mov	r0, r5
 8004dbc:	f7ff fbea 	bl	8004594 <_free_r>
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	6360      	str	r0, [r4, #52]	; 0x34
 8004dc4:	e7c0      	b.n	8004d48 <__sflush_r+0x1c>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	4628      	mov	r0, r5
 8004dca:	47b0      	blx	r6
 8004dcc:	1c41      	adds	r1, r0, #1
 8004dce:	d1c8      	bne.n	8004d62 <__sflush_r+0x36>
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0c5      	beq.n	8004d62 <__sflush_r+0x36>
 8004dd6:	2b1d      	cmp	r3, #29
 8004dd8:	d001      	beq.n	8004dde <__sflush_r+0xb2>
 8004dda:	2b16      	cmp	r3, #22
 8004ddc:	d101      	bne.n	8004de2 <__sflush_r+0xb6>
 8004dde:	602f      	str	r7, [r5, #0]
 8004de0:	e7b1      	b.n	8004d46 <__sflush_r+0x1a>
 8004de2:	89a3      	ldrh	r3, [r4, #12]
 8004de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004de8:	81a3      	strh	r3, [r4, #12]
 8004dea:	e7ad      	b.n	8004d48 <__sflush_r+0x1c>
 8004dec:	690f      	ldr	r7, [r1, #16]
 8004dee:	2f00      	cmp	r7, #0
 8004df0:	d0a9      	beq.n	8004d46 <__sflush_r+0x1a>
 8004df2:	0793      	lsls	r3, r2, #30
 8004df4:	680e      	ldr	r6, [r1, #0]
 8004df6:	bf08      	it	eq
 8004df8:	694b      	ldreq	r3, [r1, #20]
 8004dfa:	600f      	str	r7, [r1, #0]
 8004dfc:	bf18      	it	ne
 8004dfe:	2300      	movne	r3, #0
 8004e00:	eba6 0807 	sub.w	r8, r6, r7
 8004e04:	608b      	str	r3, [r1, #8]
 8004e06:	f1b8 0f00 	cmp.w	r8, #0
 8004e0a:	dd9c      	ble.n	8004d46 <__sflush_r+0x1a>
 8004e0c:	6a21      	ldr	r1, [r4, #32]
 8004e0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e10:	4643      	mov	r3, r8
 8004e12:	463a      	mov	r2, r7
 8004e14:	4628      	mov	r0, r5
 8004e16:	47b0      	blx	r6
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	dc06      	bgt.n	8004e2a <__sflush_r+0xfe>
 8004e1c:	89a3      	ldrh	r3, [r4, #12]
 8004e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e22:	81a3      	strh	r3, [r4, #12]
 8004e24:	f04f 30ff 	mov.w	r0, #4294967295
 8004e28:	e78e      	b.n	8004d48 <__sflush_r+0x1c>
 8004e2a:	4407      	add	r7, r0
 8004e2c:	eba8 0800 	sub.w	r8, r8, r0
 8004e30:	e7e9      	b.n	8004e06 <__sflush_r+0xda>
 8004e32:	bf00      	nop
 8004e34:	dfbffffe 	.word	0xdfbffffe

08004e38 <_fflush_r>:
 8004e38:	b538      	push	{r3, r4, r5, lr}
 8004e3a:	690b      	ldr	r3, [r1, #16]
 8004e3c:	4605      	mov	r5, r0
 8004e3e:	460c      	mov	r4, r1
 8004e40:	b913      	cbnz	r3, 8004e48 <_fflush_r+0x10>
 8004e42:	2500      	movs	r5, #0
 8004e44:	4628      	mov	r0, r5
 8004e46:	bd38      	pop	{r3, r4, r5, pc}
 8004e48:	b118      	cbz	r0, 8004e52 <_fflush_r+0x1a>
 8004e4a:	6a03      	ldr	r3, [r0, #32]
 8004e4c:	b90b      	cbnz	r3, 8004e52 <_fflush_r+0x1a>
 8004e4e:	f7ff fa91 	bl	8004374 <__sinit>
 8004e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0f3      	beq.n	8004e42 <_fflush_r+0xa>
 8004e5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e5c:	07d0      	lsls	r0, r2, #31
 8004e5e:	d404      	bmi.n	8004e6a <_fflush_r+0x32>
 8004e60:	0599      	lsls	r1, r3, #22
 8004e62:	d402      	bmi.n	8004e6a <_fflush_r+0x32>
 8004e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e66:	f7ff fb92 	bl	800458e <__retarget_lock_acquire_recursive>
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	f7ff ff5d 	bl	8004d2c <__sflush_r>
 8004e72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e74:	07da      	lsls	r2, r3, #31
 8004e76:	4605      	mov	r5, r0
 8004e78:	d4e4      	bmi.n	8004e44 <_fflush_r+0xc>
 8004e7a:	89a3      	ldrh	r3, [r4, #12]
 8004e7c:	059b      	lsls	r3, r3, #22
 8004e7e:	d4e1      	bmi.n	8004e44 <_fflush_r+0xc>
 8004e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e82:	f7ff fb85 	bl	8004590 <__retarget_lock_release_recursive>
 8004e86:	e7dd      	b.n	8004e44 <_fflush_r+0xc>

08004e88 <_putc_r>:
 8004e88:	b570      	push	{r4, r5, r6, lr}
 8004e8a:	460d      	mov	r5, r1
 8004e8c:	4614      	mov	r4, r2
 8004e8e:	4606      	mov	r6, r0
 8004e90:	b118      	cbz	r0, 8004e9a <_putc_r+0x12>
 8004e92:	6a03      	ldr	r3, [r0, #32]
 8004e94:	b90b      	cbnz	r3, 8004e9a <_putc_r+0x12>
 8004e96:	f7ff fa6d 	bl	8004374 <__sinit>
 8004e9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e9c:	07d8      	lsls	r0, r3, #31
 8004e9e:	d405      	bmi.n	8004eac <_putc_r+0x24>
 8004ea0:	89a3      	ldrh	r3, [r4, #12]
 8004ea2:	0599      	lsls	r1, r3, #22
 8004ea4:	d402      	bmi.n	8004eac <_putc_r+0x24>
 8004ea6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ea8:	f7ff fb71 	bl	800458e <__retarget_lock_acquire_recursive>
 8004eac:	68a3      	ldr	r3, [r4, #8]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	60a3      	str	r3, [r4, #8]
 8004eb4:	da05      	bge.n	8004ec2 <_putc_r+0x3a>
 8004eb6:	69a2      	ldr	r2, [r4, #24]
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	db12      	blt.n	8004ee2 <_putc_r+0x5a>
 8004ebc:	b2eb      	uxtb	r3, r5
 8004ebe:	2b0a      	cmp	r3, #10
 8004ec0:	d00f      	beq.n	8004ee2 <_putc_r+0x5a>
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	6022      	str	r2, [r4, #0]
 8004ec8:	701d      	strb	r5, [r3, #0]
 8004eca:	b2ed      	uxtb	r5, r5
 8004ecc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ece:	07da      	lsls	r2, r3, #31
 8004ed0:	d405      	bmi.n	8004ede <_putc_r+0x56>
 8004ed2:	89a3      	ldrh	r3, [r4, #12]
 8004ed4:	059b      	lsls	r3, r3, #22
 8004ed6:	d402      	bmi.n	8004ede <_putc_r+0x56>
 8004ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eda:	f7ff fb59 	bl	8004590 <__retarget_lock_release_recursive>
 8004ede:	4628      	mov	r0, r5
 8004ee0:	bd70      	pop	{r4, r5, r6, pc}
 8004ee2:	4629      	mov	r1, r5
 8004ee4:	4622      	mov	r2, r4
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	f000 f802 	bl	8004ef0 <__swbuf_r>
 8004eec:	4605      	mov	r5, r0
 8004eee:	e7ed      	b.n	8004ecc <_putc_r+0x44>

08004ef0 <__swbuf_r>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	460e      	mov	r6, r1
 8004ef4:	4614      	mov	r4, r2
 8004ef6:	4605      	mov	r5, r0
 8004ef8:	b118      	cbz	r0, 8004f02 <__swbuf_r+0x12>
 8004efa:	6a03      	ldr	r3, [r0, #32]
 8004efc:	b90b      	cbnz	r3, 8004f02 <__swbuf_r+0x12>
 8004efe:	f7ff fa39 	bl	8004374 <__sinit>
 8004f02:	69a3      	ldr	r3, [r4, #24]
 8004f04:	60a3      	str	r3, [r4, #8]
 8004f06:	89a3      	ldrh	r3, [r4, #12]
 8004f08:	071a      	lsls	r2, r3, #28
 8004f0a:	d525      	bpl.n	8004f58 <__swbuf_r+0x68>
 8004f0c:	6923      	ldr	r3, [r4, #16]
 8004f0e:	b31b      	cbz	r3, 8004f58 <__swbuf_r+0x68>
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	6922      	ldr	r2, [r4, #16]
 8004f14:	1a98      	subs	r0, r3, r2
 8004f16:	6963      	ldr	r3, [r4, #20]
 8004f18:	b2f6      	uxtb	r6, r6
 8004f1a:	4283      	cmp	r3, r0
 8004f1c:	4637      	mov	r7, r6
 8004f1e:	dc04      	bgt.n	8004f2a <__swbuf_r+0x3a>
 8004f20:	4621      	mov	r1, r4
 8004f22:	4628      	mov	r0, r5
 8004f24:	f7ff ff88 	bl	8004e38 <_fflush_r>
 8004f28:	b9e0      	cbnz	r0, 8004f64 <__swbuf_r+0x74>
 8004f2a:	68a3      	ldr	r3, [r4, #8]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	60a3      	str	r3, [r4, #8]
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	6022      	str	r2, [r4, #0]
 8004f36:	701e      	strb	r6, [r3, #0]
 8004f38:	6962      	ldr	r2, [r4, #20]
 8004f3a:	1c43      	adds	r3, r0, #1
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d004      	beq.n	8004f4a <__swbuf_r+0x5a>
 8004f40:	89a3      	ldrh	r3, [r4, #12]
 8004f42:	07db      	lsls	r3, r3, #31
 8004f44:	d506      	bpl.n	8004f54 <__swbuf_r+0x64>
 8004f46:	2e0a      	cmp	r6, #10
 8004f48:	d104      	bne.n	8004f54 <__swbuf_r+0x64>
 8004f4a:	4621      	mov	r1, r4
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	f7ff ff73 	bl	8004e38 <_fflush_r>
 8004f52:	b938      	cbnz	r0, 8004f64 <__swbuf_r+0x74>
 8004f54:	4638      	mov	r0, r7
 8004f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f58:	4621      	mov	r1, r4
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	f000 f806 	bl	8004f6c <__swsetup_r>
 8004f60:	2800      	cmp	r0, #0
 8004f62:	d0d5      	beq.n	8004f10 <__swbuf_r+0x20>
 8004f64:	f04f 37ff 	mov.w	r7, #4294967295
 8004f68:	e7f4      	b.n	8004f54 <__swbuf_r+0x64>
	...

08004f6c <__swsetup_r>:
 8004f6c:	b538      	push	{r3, r4, r5, lr}
 8004f6e:	4b2a      	ldr	r3, [pc, #168]	; (8005018 <__swsetup_r+0xac>)
 8004f70:	4605      	mov	r5, r0
 8004f72:	6818      	ldr	r0, [r3, #0]
 8004f74:	460c      	mov	r4, r1
 8004f76:	b118      	cbz	r0, 8004f80 <__swsetup_r+0x14>
 8004f78:	6a03      	ldr	r3, [r0, #32]
 8004f7a:	b90b      	cbnz	r3, 8004f80 <__swsetup_r+0x14>
 8004f7c:	f7ff f9fa 	bl	8004374 <__sinit>
 8004f80:	89a3      	ldrh	r3, [r4, #12]
 8004f82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f86:	0718      	lsls	r0, r3, #28
 8004f88:	d422      	bmi.n	8004fd0 <__swsetup_r+0x64>
 8004f8a:	06d9      	lsls	r1, r3, #27
 8004f8c:	d407      	bmi.n	8004f9e <__swsetup_r+0x32>
 8004f8e:	2309      	movs	r3, #9
 8004f90:	602b      	str	r3, [r5, #0]
 8004f92:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f96:	81a3      	strh	r3, [r4, #12]
 8004f98:	f04f 30ff 	mov.w	r0, #4294967295
 8004f9c:	e034      	b.n	8005008 <__swsetup_r+0x9c>
 8004f9e:	0758      	lsls	r0, r3, #29
 8004fa0:	d512      	bpl.n	8004fc8 <__swsetup_r+0x5c>
 8004fa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fa4:	b141      	cbz	r1, 8004fb8 <__swsetup_r+0x4c>
 8004fa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004faa:	4299      	cmp	r1, r3
 8004fac:	d002      	beq.n	8004fb4 <__swsetup_r+0x48>
 8004fae:	4628      	mov	r0, r5
 8004fb0:	f7ff faf0 	bl	8004594 <_free_r>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	6363      	str	r3, [r4, #52]	; 0x34
 8004fb8:	89a3      	ldrh	r3, [r4, #12]
 8004fba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004fbe:	81a3      	strh	r3, [r4, #12]
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	6063      	str	r3, [r4, #4]
 8004fc4:	6923      	ldr	r3, [r4, #16]
 8004fc6:	6023      	str	r3, [r4, #0]
 8004fc8:	89a3      	ldrh	r3, [r4, #12]
 8004fca:	f043 0308 	orr.w	r3, r3, #8
 8004fce:	81a3      	strh	r3, [r4, #12]
 8004fd0:	6923      	ldr	r3, [r4, #16]
 8004fd2:	b94b      	cbnz	r3, 8004fe8 <__swsetup_r+0x7c>
 8004fd4:	89a3      	ldrh	r3, [r4, #12]
 8004fd6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fde:	d003      	beq.n	8004fe8 <__swsetup_r+0x7c>
 8004fe0:	4621      	mov	r1, r4
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	f000 f850 	bl	8005088 <__smakebuf_r>
 8004fe8:	89a0      	ldrh	r0, [r4, #12]
 8004fea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fee:	f010 0301 	ands.w	r3, r0, #1
 8004ff2:	d00a      	beq.n	800500a <__swsetup_r+0x9e>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60a3      	str	r3, [r4, #8]
 8004ff8:	6963      	ldr	r3, [r4, #20]
 8004ffa:	425b      	negs	r3, r3
 8004ffc:	61a3      	str	r3, [r4, #24]
 8004ffe:	6923      	ldr	r3, [r4, #16]
 8005000:	b943      	cbnz	r3, 8005014 <__swsetup_r+0xa8>
 8005002:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005006:	d1c4      	bne.n	8004f92 <__swsetup_r+0x26>
 8005008:	bd38      	pop	{r3, r4, r5, pc}
 800500a:	0781      	lsls	r1, r0, #30
 800500c:	bf58      	it	pl
 800500e:	6963      	ldrpl	r3, [r4, #20]
 8005010:	60a3      	str	r3, [r4, #8]
 8005012:	e7f4      	b.n	8004ffe <__swsetup_r+0x92>
 8005014:	2000      	movs	r0, #0
 8005016:	e7f7      	b.n	8005008 <__swsetup_r+0x9c>
 8005018:	20000064 	.word	0x20000064

0800501c <_sbrk_r>:
 800501c:	b538      	push	{r3, r4, r5, lr}
 800501e:	4d06      	ldr	r5, [pc, #24]	; (8005038 <_sbrk_r+0x1c>)
 8005020:	2300      	movs	r3, #0
 8005022:	4604      	mov	r4, r0
 8005024:	4608      	mov	r0, r1
 8005026:	602b      	str	r3, [r5, #0]
 8005028:	f7fc f81a 	bl	8001060 <_sbrk>
 800502c:	1c43      	adds	r3, r0, #1
 800502e:	d102      	bne.n	8005036 <_sbrk_r+0x1a>
 8005030:	682b      	ldr	r3, [r5, #0]
 8005032:	b103      	cbz	r3, 8005036 <_sbrk_r+0x1a>
 8005034:	6023      	str	r3, [r4, #0]
 8005036:	bd38      	pop	{r3, r4, r5, pc}
 8005038:	20000334 	.word	0x20000334

0800503c <__swhatbuf_r>:
 800503c:	b570      	push	{r4, r5, r6, lr}
 800503e:	460c      	mov	r4, r1
 8005040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005044:	2900      	cmp	r1, #0
 8005046:	b096      	sub	sp, #88	; 0x58
 8005048:	4615      	mov	r5, r2
 800504a:	461e      	mov	r6, r3
 800504c:	da0d      	bge.n	800506a <__swhatbuf_r+0x2e>
 800504e:	89a3      	ldrh	r3, [r4, #12]
 8005050:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005054:	f04f 0100 	mov.w	r1, #0
 8005058:	bf0c      	ite	eq
 800505a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800505e:	2340      	movne	r3, #64	; 0x40
 8005060:	2000      	movs	r0, #0
 8005062:	6031      	str	r1, [r6, #0]
 8005064:	602b      	str	r3, [r5, #0]
 8005066:	b016      	add	sp, #88	; 0x58
 8005068:	bd70      	pop	{r4, r5, r6, pc}
 800506a:	466a      	mov	r2, sp
 800506c:	f000 f848 	bl	8005100 <_fstat_r>
 8005070:	2800      	cmp	r0, #0
 8005072:	dbec      	blt.n	800504e <__swhatbuf_r+0x12>
 8005074:	9901      	ldr	r1, [sp, #4]
 8005076:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800507a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800507e:	4259      	negs	r1, r3
 8005080:	4159      	adcs	r1, r3
 8005082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005086:	e7eb      	b.n	8005060 <__swhatbuf_r+0x24>

08005088 <__smakebuf_r>:
 8005088:	898b      	ldrh	r3, [r1, #12]
 800508a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800508c:	079d      	lsls	r5, r3, #30
 800508e:	4606      	mov	r6, r0
 8005090:	460c      	mov	r4, r1
 8005092:	d507      	bpl.n	80050a4 <__smakebuf_r+0x1c>
 8005094:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005098:	6023      	str	r3, [r4, #0]
 800509a:	6123      	str	r3, [r4, #16]
 800509c:	2301      	movs	r3, #1
 800509e:	6163      	str	r3, [r4, #20]
 80050a0:	b002      	add	sp, #8
 80050a2:	bd70      	pop	{r4, r5, r6, pc}
 80050a4:	ab01      	add	r3, sp, #4
 80050a6:	466a      	mov	r2, sp
 80050a8:	f7ff ffc8 	bl	800503c <__swhatbuf_r>
 80050ac:	9900      	ldr	r1, [sp, #0]
 80050ae:	4605      	mov	r5, r0
 80050b0:	4630      	mov	r0, r6
 80050b2:	f7ff fadb 	bl	800466c <_malloc_r>
 80050b6:	b948      	cbnz	r0, 80050cc <__smakebuf_r+0x44>
 80050b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050bc:	059a      	lsls	r2, r3, #22
 80050be:	d4ef      	bmi.n	80050a0 <__smakebuf_r+0x18>
 80050c0:	f023 0303 	bic.w	r3, r3, #3
 80050c4:	f043 0302 	orr.w	r3, r3, #2
 80050c8:	81a3      	strh	r3, [r4, #12]
 80050ca:	e7e3      	b.n	8005094 <__smakebuf_r+0xc>
 80050cc:	89a3      	ldrh	r3, [r4, #12]
 80050ce:	6020      	str	r0, [r4, #0]
 80050d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d4:	81a3      	strh	r3, [r4, #12]
 80050d6:	9b00      	ldr	r3, [sp, #0]
 80050d8:	6163      	str	r3, [r4, #20]
 80050da:	9b01      	ldr	r3, [sp, #4]
 80050dc:	6120      	str	r0, [r4, #16]
 80050de:	b15b      	cbz	r3, 80050f8 <__smakebuf_r+0x70>
 80050e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050e4:	4630      	mov	r0, r6
 80050e6:	f000 f81d 	bl	8005124 <_isatty_r>
 80050ea:	b128      	cbz	r0, 80050f8 <__smakebuf_r+0x70>
 80050ec:	89a3      	ldrh	r3, [r4, #12]
 80050ee:	f023 0303 	bic.w	r3, r3, #3
 80050f2:	f043 0301 	orr.w	r3, r3, #1
 80050f6:	81a3      	strh	r3, [r4, #12]
 80050f8:	89a3      	ldrh	r3, [r4, #12]
 80050fa:	431d      	orrs	r5, r3
 80050fc:	81a5      	strh	r5, [r4, #12]
 80050fe:	e7cf      	b.n	80050a0 <__smakebuf_r+0x18>

08005100 <_fstat_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	4d07      	ldr	r5, [pc, #28]	; (8005120 <_fstat_r+0x20>)
 8005104:	2300      	movs	r3, #0
 8005106:	4604      	mov	r4, r0
 8005108:	4608      	mov	r0, r1
 800510a:	4611      	mov	r1, r2
 800510c:	602b      	str	r3, [r5, #0]
 800510e:	f7fb ff7e 	bl	800100e <_fstat>
 8005112:	1c43      	adds	r3, r0, #1
 8005114:	d102      	bne.n	800511c <_fstat_r+0x1c>
 8005116:	682b      	ldr	r3, [r5, #0]
 8005118:	b103      	cbz	r3, 800511c <_fstat_r+0x1c>
 800511a:	6023      	str	r3, [r4, #0]
 800511c:	bd38      	pop	{r3, r4, r5, pc}
 800511e:	bf00      	nop
 8005120:	20000334 	.word	0x20000334

08005124 <_isatty_r>:
 8005124:	b538      	push	{r3, r4, r5, lr}
 8005126:	4d06      	ldr	r5, [pc, #24]	; (8005140 <_isatty_r+0x1c>)
 8005128:	2300      	movs	r3, #0
 800512a:	4604      	mov	r4, r0
 800512c:	4608      	mov	r0, r1
 800512e:	602b      	str	r3, [r5, #0]
 8005130:	f7fb ff7d 	bl	800102e <_isatty>
 8005134:	1c43      	adds	r3, r0, #1
 8005136:	d102      	bne.n	800513e <_isatty_r+0x1a>
 8005138:	682b      	ldr	r3, [r5, #0]
 800513a:	b103      	cbz	r3, 800513e <_isatty_r+0x1a>
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	bd38      	pop	{r3, r4, r5, pc}
 8005140:	20000334 	.word	0x20000334

08005144 <_init>:
 8005144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005146:	bf00      	nop
 8005148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514a:	bc08      	pop	{r3}
 800514c:	469e      	mov	lr, r3
 800514e:	4770      	bx	lr

08005150 <_fini>:
 8005150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005152:	bf00      	nop
 8005154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005156:	bc08      	pop	{r3}
 8005158:	469e      	mov	lr, r3
 800515a:	4770      	bx	lr
